 calculateAndSetTimeoutDates: function(responseData, callSignId ,flag) {
			var doc_check;
				var optionSelectedYes = $(this.dom.body).find("#signalextend-yes");
				var optionSelectedNo  = $(this.dom.body).find("#signalextend-no");
					
				doc_check = optionSelectedYes.prop("checked")?"AGREEMENT":optionSelectedNo.prop("checked")?"NOTIFICATION":false;					
				
			$.each(responseData, (i, data)=> {
				if (doc_check=="AGREEMENT"){
					if(data.vzRegService == "AWS"){
						if(data && data.agrementSentDate){
							
							 data.agreementTimeout= addDays(data.agrementSentDate, 60);
						}
					}else{
						if(data && data.agrementSentDate){
							
							 data.agreementTimeout= addDays(data.agrementSentDate, 30);
						}
					}
			}else{
					
						if(data && data.notificationSentDate){
							
							 data.notificationTimeoutDate = addDays(data.notificationSentDate, 30);
						}
				}
						 
						  
    function addDays(date, days) {
        var result = new Date(date);
        result.setDate(result.getDate() + days);
        var day = String(result.getDate()).padStart(2, '0');
        var month = String(result.getMonth() + 1).padStart(2, '0'); // Months are zero-based
            var year = result.getFullYear();

  return month + '/' + day + '/' + year;


      
    }

   

 
		},












getFreqBandTitle: function(callSignId){
			var title;
			var freqBand;
			if (callSignId === "band700m") {
				title = "700 Mhz";
				freqBand = "700Mhz";
			} else if (callSignId === "band850m") {
				title = "850 Mhz";
				freqBand = "850Mhz";
			} else if (callSignId === "band1900m") {
				title = "1900 Mhz";
				freqBand = "1900Mhz";
			} else if (callSignId === "band2100m") {
				title = "2100 Mhz";
				freqBand = "2100Mhz";
			}else if (callSignId === "cband") {
				title = "C-BAND";
				freqBand = "cband";
			}
			return {
				title:title,
				freqBand:freqBand
			}
		},

	    loadCallSignDetails: function(response, callSignId){
			var details = this.getFreqBandTitle(callSignId);
			var title = details.title;
			var freqBand =  details.freqBand;

	    	if (response && response.length !== 0) {
	    		var templateHeader = this.dom.body.find(".international-table-header-template").html();

	    		var doc_check;
				var optionSelectedYes = $(this.dom.body).find("#signalextend-yes");
				var optionSelectedNo  = $(this.dom.body).find("#signalextend-no");
					
				doc_check = optionSelectedYes.prop("checked")?"AGREEMENT":optionSelectedNo.prop("checked")?"NOTIFICATION":false;					
				
	    		
	    		var tableHeader = templateHeader.replace(/@BANDWIDTH/g, title).replace(/@ID/g, callSignId).replace(/@VZREGSERVICE/g, response[0].vzRegService).replace(/@DOC_CHECK/g, (doc_check?doc_check:"")).replace(/@DOC_CATEGORY/g, title.replace(" Mhz", "")).replace(/@COUNTRY/g, response[0].country);
	    		// $.each(response, function(i, data) {
	    		// tableModifiedHeader = tableHeader.replace(/@VZREGSERVICE/g,
				// data.vzRegService);
	    		// });
	    		this.dom.body.find(".international-callsign-tables").append(tableHeader);
	    		let tableId = this.dom.body.find("#" + callSignId + "-international-colnames");
	    		let columns = this.getCallsignsColumns(false); // don't hide
																// last 2 cols
	    		
	    		createKendoGrid(tableId, columns, response);

	    		if (callSignId === "band700m") {
	    			if (response[0].intlBorderExtendsFor700Mhz === 'Yes') {
	    				this.appendFccRadioValues(".band700m", true, false);
	    			} else {
	    				this.appendFccRadioValues(".band700m", false, true);
	    			}
	    		} else if (callSignId === "band850m") {
	    			if (response[0].intlBorderExtendsForCellular === 'Yes') {
	    				this.appendFccRadioValues(".band850m", true, false);
	    			} else {
	    				this.appendFccRadioValues(".band850m", false, true);
	    			}
	    		} else if (callSignId === "band1900m") {
	    			if (response[0].intlBorderExtendsForPCS === 'Yes') {
	    				this.appendFccRadioValues(".band1900m", true, false);
	    			} else {
	    				this.appendFccRadioValues(".band1900m", false, true);
	    			}
	    		} else if (callSignId === "band2100m") {
	    			if (response[0].intlBorderExtendsForAWS === 'Yes') {
	    				this.appendFccRadioValues(".band2100m", true, false);
	    			} else {
	    				this.appendFccRadioValues(".band2100m", false, true);
	    			}
	    		}
				else if (callSignId === "cband") {
	    			if (response[0].intlBorderExtendsForCBand === 'Yes') {
	    				this.appendFccRadioValues(".cband", true, false);
	    			} else {
	    				this.appendFccRadioValues(".cband", false, true);
	    			}
	    		}
	    	} else {
	    		console.info("No Callsigns");
	    	}
	    },

	    appendFccRadioValues: function(className, value1, value2) {
	    	this.dom.body.find(className + "-yes").prop("checked", value1);
	    	this.dom.body.find(className + "-no").prop("checked", value2);
			this.dom.body.find(".fcc-radio").off('change').on('change', $.proxy(this.changeFccRadio, this));
			//this.dom.body.find(".fcc-radio").trigger("change");
		},
	    getBasData: function() {
	    	var callSignsReq = {};
	    	callSignsReq.refType = "AWS";
	    	callSignsReq.searchKey = this.dom.projectId;
			rfdsModule.getExternalContactDetails(()=>{
				this.getCallSignsWrap(callSignsReq);// load callsigns
			});
	    },
		getExternalContactDetails:function(cb){
			var payload = {};
			payload.country = "CANADA";
			// this.constructor.ajax.fireApi(payload, "regulatory-doc-mngmnt", "getExternalContactDetails", (externalContactDetails)=> {
			// 	this.dom.externalContactDetails = externalContactDetails;
			// 	cb();
			// });

changeFccRadio: function(e) {
    var self = $(e.currentTarget);
    var fccRequiredObject = {};
    var radioVal = self.val();
    var regService = self.data('reg-service');
    var selectedBandName = self.data('reg-service');
    var country = self.data('country');
    fccRequiredObject.siteProjectsId = this.dom.projectId;
    var bandNames = ['700Mhz', 'Cellular', 'PCS', 'AWS', 'C-Band'];
    var callSignId = self.attr("name");

    // Retrieve sent dates from data attributes
    var notificationSentDate = new Date(self.data('notification-sent-date'));
    var agreementSentDate = new Date(self.data('agreement-sent-date'));
    
    if (notificationSentDate) {
        $("#" + callSignId + "-form").find("#notificationSentDate").val(notificationSentDate.toISOString().split('T')[0]);
        var notificationTimeoutDate = new Date(notificationSentDate);
        notificationTimeoutDate.setDate(notificationTimeoutDate.getDate() + 30);
        $("#" + callSignId + "-form").find("#notificationTimeoutDate").val(notificationTimeoutDate.toISOString().split('T')[0]);
    }

    if (agreementSentDate) {
        $("#" + callSignId + "-form").find("#agreementSentDate").val(agreementSentDate.toISOString().split('T')[0]);

        var agreementTimeoutDate = new Date(agreementSentDate);
        var bandTimeoutDays = (selectedBandName === '2100') ? 60 : 30;
        agreementTimeoutDate.setDate(agreementTimeoutDate.getDate() + bandTimeoutDays);
        $("#" + callSignId + "-form").find("#agreementTimeoutDate").val(agreementTimeoutDate.toISOString().split('T')[0]);
    }

    $.each(this.dom.intBorderInfo, (i, data) => {
        if (data && data.length) {
            this.showLicenseGrid(callSignId, data);
        }
    });

    for (var key = 0; key < bandNames.length; key++) {
        var value = bandNames[key];
        if (selectedBandName === value) {
            selectedBandName = selectedBandName === 'C-Band' ? 'CBand' : selectedBandName;
            fccRequiredObject['intlBorderExtendsFor' + selectedBandName] = radioVal;
            fccRequiredObject.vzRegService = regService;
            this.updateRfdsCallSigns(fccRequiredObject);
            break;
        }
    }

    var subCategory = "";
    if (callSignId === "band700m") {
        subCategory = "700";
    } else if (callSignId === "band850m") {
        subCategory = "850";
    } else if (callSignId === "band1900m") {
        subCategory = "1900";
    } else if (callSignId === "band2100m") {
        subCategory = "2100";
    } else if (callSignId === "cband") {
        subCategory = "C-BAND";
    }
    subCategory = 'INTERNATIONAL_BORDER_' + (radioVal === 'No' ? 'NOTIFICATION' : 'AGREEMENT') + '_' + subCategory;
    $("#" + callSignId + "-form").find("#subCategory").val(subCategory);
}







changeFccRadio: function(e){
			var self  = $(e.currentTarget);
    		var fccRequiredObject = {};
    		var radioVal = self.val();
    		var regService = self.data('reg-service');
    		var selectedBandName = self.data('reg-service');
			var country = self.data('country');
    		fccRequiredObject.siteProjectsId = this.dom.projectId;
    		var bandNames = ['700Mhz', 'Cellular', 'PCS', 'AWS', 'C-Band']
			var callSignId = self.attr("name");
			// if(radioVal === 'Yes'){
			// 	$("."+callSignId).removeClass("hide");
			// }
			$.each(this.dom.intBorderInfo, (i, data)=> {
				if(data && data.length){
					this.showLicenseGrid(callSignId, data)
				}
			});
		
    		for (var key = 0; key < bandNames.length; key++) {
    			var value = bandNames[key];
    			if (selectedBandName === value) {
					selectedBandName = selectedBandName === 'C-Band'? 'CBand':selectedBandName;
    				fccRequiredObject['intlBorderExtendsFor' + selectedBandName] = radioVal
    				fccRequiredObject.vzRegService = regService;
    				this.updateRfdsCallSigns(fccRequiredObject);
    				break;
    			}
    		}
    		var callSignId = self.attr("name");
			if(radioVal === 'Yes'){
				//this.showLicenseGrid(callSignId);
			}
			// if(value1){//yes
				
			// }else if(value2){//no
			// 	//adding co-channel license grid for NOTIFICATION
	    	// 	let tableId = this.dom.body.find("#" + callSignId + "-co-channel-license");
	    	// 	//let columns = this.getNotificationCoLicensColumns();
			// 	let response = [];
			// 	//createKendoGrid(tableId, columns, response);

			// }



    		var subCategory="";
    		if (callSignId === "band700m") {
                    subCategory = "700"
                } else if (callSignId === "band850m") {
                    subCategory = "850"
                } else if (callSignId === "band1900m") {
                    subCategory = "1900"
                } else if (callSignId === "band2100m") {
                    subCategory = "2100"
                }else if (callSignId === "cband") {
                    subCategory = "C-BAND";
                }
               subCategory = 'INTERNATIONAL_BORDER_'+  (radioVal === 'No' ? 'NOTIFICATION' : 'AGREEMENT' )+'_'+subCategory;
               $("#"+callSignId+"-form").find("#subCategory").val(subCategory);                
	    },
		showLicenseGrid:function(callSignId, externalContactDetails){
			var parentContainer = $("."+callSignId+"-container");
			var container = $("#"+callSignId+"-block").find(".company-content");
			var fccVal = parentContainer.find(".fcc-radio").prop("checked");
			container.empty();
			$("#"+callSignId+"-block").removeClass("hide");
			externalContactDetails.forEach(contact=>{
				var template = this.dom.body.find(".company-details-template").html();
				container.attr("data-vz-reg-service",contact.vzRegService);
				container.attr("data-external-company-id",contact.externalCompanyNameId);
				
				container.append(template.replace(/@COMPANY/g, contact.companyName).replace(/@EXTERNAL_ID/g, contact.externalCompanyNameId));
				var feildsTemplate = fccVal  ? $(".agreement-feilds").html() : $(".notification-feilds").html();
				var companyContainer = container.find("#"+contact.externalCompanyNameId);
				companyContainer.append(feildsTemplate);
				$.each(contact, (i, data)=>{
					companyContainer.find("#"+i).val(data);
				});
				
			})
			//adding co-channel license grid for AGREEMENT
			let tableId = this.dom.body.find("#" + callSignId + "-co-channel-license");
		
		},
		mergeInternationalBorderInfo: function(){
			var internationalBorderInfo = [];
			$.each(this.dom.body.find(".company-content"), (i, data)=>{
				var companyContainer = $(data);
				this.appendNotificationAgreementFeilds(internationalBorderInfo,companyContainer);
			});
			console.log("mergeInternationalBorderInfo", internationalBorderInfo);
			this.constructor.ajax.fireApi(internationalBorderInfo, "project", "mergeInternationalBorderInfo", (response)=> {
				console.log("mergeRes", response);
			})
		},

above i provided the .js code pls add the code or modify code according to below validation: This field will be auto-populated with a calculated date (Notification Sent Date + 30 days).
  This field will be auto-populated with a calculated date (For 700, 850, 1900 & C-Band: Agreement Sent Date + 30 days, For 2100: Agreement Sent Date + 60 days).
