

changeFccRadio: function(e) {
    var self = $(e.currentTarget);
    var fccRequiredObject = {};
    var radioVal = self.val();
    var regService = self.data('reg-service');
    var selectedBandName = self.data('reg-service');
    var country = self.data('country');
    fccRequiredObject.siteProjectsId = this.dom.projectId;
    var bandNames = ['700Mhz', 'Cellular', 'PCS', 'AWS', 'C-Band'];
    var callSignId = self.attr("name");

    // Retrieve sent dates from data attributes
    var notificationSentDate = new Date(self.data('notification-sent-date'));
    var agreementSentDate = new Date(self.data('agreement-sent-date'));
    
    if (notificationSentDate) {
        $("#" + callSignId + "-form").find("#notificationSentDate").val(notificationSentDate.toISOString().split('T')[0]);
        var notificationTimeoutDate = new Date(notificationSentDate);
        notificationTimeoutDate.setDate(notificationTimeoutDate.getDate() + 30);
        $("#" + callSignId + "-form").find("#notificationTimeoutDate").val(notificationTimeoutDate.toISOString().split('T')[0]);
    }

    if (agreementSentDate) {
        $("#" + callSignId + "-form").find("#agreementSentDate").val(agreementSentDate.toISOString().split('T')[0]);

        var agreementTimeoutDate = new Date(agreementSentDate);
        var bandTimeoutDays = (selectedBandName === '2100') ? 60 : 30;
        agreementTimeoutDate.setDate(agreementTimeoutDate.getDate() + bandTimeoutDays);
        $("#" + callSignId + "-form").find("#agreementTimeoutDate").val(agreementTimeoutDate.toISOString().split('T')[0]);
    }

    $.each(this.dom.intBorderInfo, (i, data) => {
        if (data && data.length) {
            this.showLicenseGrid(callSignId, data);
        }
    });

    for (var key = 0; key < bandNames.length; key++) {
        var value = bandNames[key];
        if (selectedBandName === value) {
            selectedBandName = selectedBandName === 'C-Band' ? 'CBand' : selectedBandName;
            fccRequiredObject['intlBorderExtendsFor' + selectedBandName] = radioVal;
            fccRequiredObject.vzRegService = regService;
            this.updateRfdsCallSigns(fccRequiredObject);
            break;
        }
    }

    var subCategory = "";
    if (callSignId === "band700m") {
        subCategory = "700";
    } else if (callSignId === "band850m") {
        subCategory = "850";
    } else if (callSignId === "band1900m") {
        subCategory = "1900";
    } else if (callSignId === "band2100m") {
        subCategory = "2100";
    } else if (callSignId === "cband") {
        subCategory = "C-BAND";
    }
    subCategory = 'INTERNATIONAL_BORDER_' + (radioVal === 'No' ? 'NOTIFICATION' : 'AGREEMENT') + '_' + subCategory;
    $("#" + callSignId + "-form").find("#subCategory").val(subCategory);
}







changeFccRadio: function(e){
			var self  = $(e.currentTarget);
    		var fccRequiredObject = {};
    		var radioVal = self.val();
    		var regService = self.data('reg-service');
    		var selectedBandName = self.data('reg-service');
			var country = self.data('country');
    		fccRequiredObject.siteProjectsId = this.dom.projectId;
    		var bandNames = ['700Mhz', 'Cellular', 'PCS', 'AWS', 'C-Band']
			var callSignId = self.attr("name");
			// if(radioVal === 'Yes'){
			// 	$("."+callSignId).removeClass("hide");
			// }
			$.each(this.dom.intBorderInfo, (i, data)=> {
				if(data && data.length){
					this.showLicenseGrid(callSignId, data)
				}
			});
		
    		for (var key = 0; key < bandNames.length; key++) {
    			var value = bandNames[key];
    			if (selectedBandName === value) {
					selectedBandName = selectedBandName === 'C-Band'? 'CBand':selectedBandName;
    				fccRequiredObject['intlBorderExtendsFor' + selectedBandName] = radioVal
    				fccRequiredObject.vzRegService = regService;
    				this.updateRfdsCallSigns(fccRequiredObject);
    				break;
    			}
    		}
    		var callSignId = self.attr("name");
			if(radioVal === 'Yes'){
				//this.showLicenseGrid(callSignId);
			}
			// if(value1){//yes
				
			// }else if(value2){//no
			// 	//adding co-channel license grid for NOTIFICATION
	    	// 	let tableId = this.dom.body.find("#" + callSignId + "-co-channel-license");
	    	// 	//let columns = this.getNotificationCoLicensColumns();
			// 	let response = [];
			// 	//createKendoGrid(tableId, columns, response);

			// }



    		var subCategory="";
    		if (callSignId === "band700m") {
                    subCategory = "700"
                } else if (callSignId === "band850m") {
                    subCategory = "850"
                } else if (callSignId === "band1900m") {
                    subCategory = "1900"
                } else if (callSignId === "band2100m") {
                    subCategory = "2100"
                }else if (callSignId === "cband") {
                    subCategory = "C-BAND";
                }
               subCategory = 'INTERNATIONAL_BORDER_'+  (radioVal === 'No' ? 'NOTIFICATION' : 'AGREEMENT' )+'_'+subCategory;
               $("#"+callSignId+"-form").find("#subCategory").val(subCategory);                
	    },
		showLicenseGrid:function(callSignId, externalContactDetails){
			var parentContainer = $("."+callSignId+"-container");
			var container = $("#"+callSignId+"-block").find(".company-content");
			var fccVal = parentContainer.find(".fcc-radio").prop("checked");
			container.empty();
			$("#"+callSignId+"-block").removeClass("hide");
			externalContactDetails.forEach(contact=>{
				var template = this.dom.body.find(".company-details-template").html();
				container.attr("data-vz-reg-service",contact.vzRegService);
				container.attr("data-external-company-id",contact.externalCompanyNameId);
				
				container.append(template.replace(/@COMPANY/g, contact.companyName).replace(/@EXTERNAL_ID/g, contact.externalCompanyNameId));
				var feildsTemplate = fccVal  ? $(".agreement-feilds").html() : $(".notification-feilds").html();
				var companyContainer = container.find("#"+contact.externalCompanyNameId);
				companyContainer.append(feildsTemplate);
				$.each(contact, (i, data)=>{
					companyContainer.find("#"+i).val(data);
				});
				
			})
			//adding co-channel license grid for AGREEMENT
			let tableId = this.dom.body.find("#" + callSignId + "-co-channel-license");
		
		},
		mergeInternationalBorderInfo: function(){
			var internationalBorderInfo = [];
			$.each(this.dom.body.find(".company-content"), (i, data)=>{
				var companyContainer = $(data);
				this.appendNotificationAgreementFeilds(internationalBorderInfo,companyContainer);
			});
			console.log("mergeInternationalBorderInfo", internationalBorderInfo);
			this.constructor.ajax.fireApi(internationalBorderInfo, "project", "mergeInternationalBorderInfo", (response)=> {
				console.log("mergeRes", response);
			})
		},

above i provided the .js code pls add the code or modify code according to below validation: This field will be auto-populated with a calculated date (Notification Sent Date + 30 days).
  This field will be auto-populated with a calculated date (For 700, 850, 1900 & C-Band: Agreement Sent Date + 30 days, For 2100: Agreement Sent Date + 60 days).
