//reset.js
// Parse the user list from local storage or initialize an empty array
const userList = JSON.parse(localStorage.getItem('userList')) || [];

// Declare userIndex outside of event listeners
let userIndex;

// Trigger the password reset modal when the button is clicked
document.getElementById('passwordResetBtn').addEventListener('click', function () {
    // Clear any previous input values
    document.getElementById('resetUsername').value = '';
    // Show the password reset modal
    $('#passwordResetModal').modal('show');
});

// Event listener for the username input in the password reset modal
const resetUsernameInput = document.getElementById('resetUsername');
const resetSubmitBtn = document.getElementById('resetSubmitBtn');

resetUsernameInput.addEventListener('input', function () {
    // Validate username for special characters
    const validUsername = /^[a-zA-Z0-9_]+$/.test(resetUsernameInput.value.trim());
    // Enable/disable the reset button based on the username input
    resetSubmitBtn.disabled = !resetUsernameInput.value.trim() || !validUsername;
});

// Event listener for the reset button in the password reset modal
resetSubmitBtn.addEventListener('click', function () {
    const username = resetUsernameInput.value.trim();

    if (!username) {
        showAlert('Username is mandatory');
        resetUsernameInput.focus();
        return;
    }

    userIndex = userList.findIndex(user => user.userName === username);
    if (userIndex === -1) {
        showAlert('User Name not found');
        resetUsernameInput.focus();
    } else {
        // Show the password reset modal
        $('#passwordResetModal').modal('hide');
        // Open the Password Reset Modal
        $('#resetPasswordModal').modal('show');
        // Set the non-editable username
        document.getElementById('resetPasswordUsername').value = username;
    }
});

// Event listener for the submit button in the password reset modal
document.getElementById('resetPasswordSubmitBtn').addEventListener('click', function () {
    const newPassword = document.getElementById('resetNewPassword').value.trim();
    const retypeNewPassword = document.getElementById('resetRetypeNewPassword').value.trim();

    // Password validation
    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^]).{8,}$/;

    if (!newPassword) {
        showAlert('New Password is mandatory');
        document.getElementById('resetNewPassword').focus();
        return;
    }

    if (!passwordRegex.test(newPassword)) {
        showAlert('Invalid Password. Password should have 8 characters, at least 1 lowercase, 1 uppercase, and 1 special character (!@#$%^).');
        document.getElementById('resetNewPassword').focus();
        return;
    }

    if (newPassword !== retypeNewPassword) {
        showAlert('Password does not match');
        document.getElementById('resetRetypeNewPassword').focus();
        return;
    }

    const user = userList[userIndex];
    user.pwd = newPassword;
    localStorage.setItem('userList', JSON.stringify(userList));

    // Show success message
    showSuccessAlert('User Password Reset Success');

    // Close the Password Reset Modal
    $('#resetPasswordModal').modal('hide');
});

// Event listener for the close button in the password reset modal
const resetPasswordCloseBtn = document.getElementById('resetPasswordCloseBtn');
if (resetPasswordCloseBtn) {
    resetPasswordCloseBtn.addEventListener('click', function () {
        // Close the Password Reset Modal
        $('#resetPasswordModal').modal('hide');
    });
}

// Event listener for the close button in the success alert modal
document.getElementById('resetSuccessCloseBtn').addEventListener('click', function () {
    // Close the Success Alert Modal
    $('#resetSuccessMessageContainer').find('.alert').alert('close');
});

// Function to show Bootstrap alert for success messages
function showSuccessAlert(message) {
    const successAlert = `<div class="alert alert-success alert-dismissible fade show" role="alert">
                            ${message}
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>`;
    const successAlertContainer = document.getElementById('resetSuccessMessageContainer');
    successAlertContainer.innerHTML = successAlert;

    // Automatically close the alert after 5 seconds
    setTimeout(function () {
        // Close the Success Alert Modal
        $(successAlertContainer).find('.alert').alert('close');
    }, 5000);
}

// Function to show Bootstrap alert for error messages
function showAlert(message) {
    const alertMessage = `<div class="alert alert-danger alert-dismissible fade show" role="alert">
                            ${message}
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>`;
    document.getElementById('resetAlertContainer').innerHTML = alertMessage;
    setTimeout(function () {
        // Close the Success Alert Modal
       $ (resetAlertContainer).find('.alert').alert('close');
    }, 5000);
}

// Disable copy, paste using shortcuts and right click on password fields
const passwordFields = document.querySelectorAll('.disable-copy-paste');
passwordFields.forEach(field => {
    field.addEventListener('cut', (event) => {
        event.preventDefault();
        showAlert('Copying is not allowed');
    });

    field.addEventListener('copy', (event) => {
        event.preventDefault();
        showAlert('Copying is not allowed');
    });

    field.addEventListener('paste', (event) => {
        event.preventDefault();
        showAlert('Pasting is not allowed');
    });

    field.addEventListener('contextmenu', (event) => {
        event.preventDefault();
        showAlert('Right-clicking is not allowed');
    });
});

//reset.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" type="text/css" href="reset.css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
    <title>Password Reset</title>
</head>
<body>

    <!-- Login Page Content -->
    <button id="passwordResetBtn">Password Reset</button>

    <!-- Password Reset Modal -->
    <div class="modal fade" id="passwordResetModal" tabindex="-1" role="dialog" aria-labelledby="passwordResetModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="passwordResetModalLabel">Password Reset</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="resetForm">
                        <input type="text" id="resetUsername" placeholder="Enter the User Name" required>
                        <button type="button" id="resetSubmitBtn" disabled>Reset</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Password Reset Modal -->
    <div class="modal fade" id="resetPasswordModal" tabindex="-1" role="dialog" aria-labelledby="resetPasswordModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="resetPasswordModalLabel">Password Reset</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="resetPasswordForm">
                        <input type="text" id="resetPasswordUsername" placeholder="User Name" readonly>
                        <input type="password" id="resetNewPassword" class="disable-copy-paste" placeholder="Enter New Password" required oncut="return false;" oncopy="return false;" onpaste="return false;" oncontextmenu="return false;">
                        <input type="password" id="resetRetypeNewPassword" class="disable-copy-paste" placeholder="Retype New Password" required oncut="return false;" oncopy="return false;" onpaste="return false;" oncontextmenu="return false;">
                        <button type="button" id="resetPasswordSubmitBtn">Submit</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Password Reset Success Alert Modal -->
    <div class="modal fade" id="resetSuccessModal" tabindex="-1" role="dialog" aria-labelledby="resetSuccessModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="resetSuccessModalLabel">Success</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p id="resetSuccessMessage"></p>
                </div>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
    <script src="reset.js"></script>
</body>
</html>
