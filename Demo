class Node<T> {
    T data;
    Node<T> next;

    public Node(T data) {
        this.data = data;
        this.next = null;
    }
}

public class Solution {

    public static Node<Integer> appendLastNToFirst(Node<Integer> head, int n) {
        // Handle empty list or no rearrangement needed
        if (head == null || n == 0) {
            return head;
        }

        // Step 1: Find the length of the linked list
        int length = 0;
        Node<Integer> current = head;
        while (current != null) {
            length++;
            current = current.next;
        }

        // Step 2: If N equals length, no change needed
        if (n == length) {
            return head;
        }

        // Step 3: Find the (length - N)th node (the new tail)
        current = head;
        int count = 1;
        while (count < length - n) {
            current = current.next;
            count++;
        }

        // Step 4: Rearrange pointers
        Node<Integer> newHead = current.next;
        current.next = null;  // Make current node the new tail
        Node<Integer> temp = newHead;
        while (temp.next != null) {
            temp = temp.next;
        }
        temp.next = head;  // Make the old head the next of the last node
        
        // Return the new head
        return newHead;
    }
}
2)..

class Node<T> {
    T data;
    Node<T> next;

    public Node(T data) {
        this.data = data;
        this.next = null;
    }
}

public class Solution {

    public static Node<Integer> removeDuplicates(Node<Integer> head) {
        // Edge case: If the list is empty or has only one element, no duplicates to remove
        if (head == null || head.next == null) {
            return head;
        }

        Node<Integer> current = head;

        // Traverse the list
        while (current != null && current.next != null) {
            // Check if current node's data is equal to next node's data
            if (current.data.equals(current.next.data)) {
                // Skip the next node
                current.next = current.next.next;
            } else {
                // Move to the next node
                current = current.next;
            }
        }
        return head;
    }
}


3)

class Node<T> {
    T data;
    Node<T> next;

    public Node(T data) {
        this.data = data;
        this.next = null;
    }
}

public class Solution {

    public static void printReverse(Node<Integer> root) {
        // Base case: If the node is null, return
        if (root == null) {
            return;
        }

        // Recursive call on the next node
        printReverse(root.next);

        // Print the current node's data after the recursion has reached the end
        System.out.print(root.data);
    }
}


4.

class Node<T> {
    T data;
    Node<T> next;

    public Node(T data) {
        this.data = data;
        this.next = null;
    }
}

public class Solution {

    // Function to find the middle of the linked list
    private static Node<Integer> findMiddle(Node<Integer> head) {
        Node<Integer> slow = head;
        Node<Integer> fast = head;

        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }

    // Function to reverse a linked list
    private static Node<Integer> reverseList(Node<Integer> head) {
        Node<Integer> prev = null;
        Node<Integer> curr = head;

        while (curr != null) {
            Node<Integer> nextNode = curr.next;
            curr.next = prev;
            prev = curr;
            curr = nextNode;
        }
        return prev;
    }

    // Function to check if the linked list is a palindrome
    public static boolean isPalindrome(Node<Integer> head) {
        // Edge case: if the list is empty or has only one element, it's a palindrome
        if (head == null || head.next == null) {
            return true;
        }

        // Step 1: Find the middle of the list
        Node<Integer> middle = findMiddle(head);

        // Step 2: Reverse the second half of the list
        Node<Integer> secondHalf = reverseList(middle);

        // Step 3: Compare the first and second halves
        Node<Integer> firstHalf = head;
        Node<Integer> secondHalfCopy = secondHalf;

        while (secondHalfCopy != null) {
            if (!firstHalf.data.equals(secondHalfCopy.data)) {
                return false; // If mismatch found, it's not a palindrome
            }
            firstHalf = firstHalf.next;
            secondHalfCopy = secondHalfCopy.next;
        }

        return true; // If no mismatch, the list is a palindrome
    }
}
new...


public static Node<Integer> deleteNodeRec(Node<Integer> head, int pos) {
    // Base case: If the list is empty or position is invalid
    if (head == null) {
        return null;
    }

    // Base case: If the current node is to be deleted
    if (pos == 0) {
        return head.next; // Skip the current node
    }

    // Recursive call for the next node
    head.next = deleteNodeRec(head.next, pos - 1);

    return head; // Return the current head
}

...

public static Node<Integer> reverseRec(Node<Integer> head) {
    // Base case: If the list is empty or has one node
    if (head == null || head.next == null) {
        return head;
    }

    // Recursively reverse the rest of the list
    Node<Integer> reversedHead = reverseRec(head.next);

    // Adjust the current node's next pointer
    head.next.next = head;
    head.next = null;

    // Return the new head of the reversed list
    return reversedHead;
}
....

public static Node<Integer> reverse_I(Node<Integer> head) {
    // Initialize three pointers
    Node<Integer> prev = null;
    Node<Integer> curr = head;
    Node<Integer> next = null;

    // Iterate through the list
    while (curr != null) {
        // Save the next node
        next = curr.next;

        // Reverse the current node's pointer
        curr.next = prev;

        // Move pointers one step forward
        prev = curr;
        curr = next;
    }

    // Return the new head (prev)
    return prev;
}

...

public static Node<Integer> midPoint(Node<Integer> head) {
    // If the list is empty or has only one node
    if (head == null || head.next == null) {
        return head;
    }

    // Initialize slow and fast pointers
    Node<Integer> slow = head;
    Node<Integer> fast = head;

    // Move pointers until fast or fast.next reaches the end
    while (fast.next != null && fast.next.next != null) {
        slow = slow.next;
        fast = fast.next.next;
    }

    // Slow is now pointing to the midpoint
    return slow;
}


....

public static Node<Integer> mergeTwoSorted(Node<Integer> head1, Node<Integer> head2) {
    // If one of the lists is empty, return the other list
    if (head1 == null) {
        return head2;
    }
    if (head2 == null) {
        return head1;
    }

    // Initialize the merged list's head
    Node<Integer> mergedHead = null, mergedTail = null;

    // Set the initial mergedHead and mergedTail
    if (head1.data <= head2.data) {
        mergedHead = head1;
        mergedTail = head1;
        head1 = head1.next;
    } else {
        mergedHead = head2;
        mergedTail = head2;
        head2 = head2.next;
    }

    // Traverse both lists and merge
    while (head1 != null && head2 != null) {
        if (head1.data <= head2.data) {
            mergedTail.next = head1;
            mergedTail = head1;
            head1 = head1.next;
        } else {
            mergedTail.next = head2;
            mergedTail = head2;
            head2 = head2.next;
        }
    }

    // Attach the remaining nodes (if any)
    if (head1 != null) {
        mergedTail.next = head1;
    } else {
        mergedTail.next = head2;
    }

    return mergedHead;
}


...
public static Node<Integer> mergeSort(Node<Integer> head) {
    // Base case: if the list has 0 or 1 node
    if (head == null || head.next == null) {
        return head;
    }

    // Find the middle of the list
    Node<Integer> mid = getMiddle(head);
    Node<Integer> half = mid.next;
    mid.next = null; // Split the list into two halves

    // Recursively sort both halves
    Node<Integer> left = mergeSort(head);
    Node<Integer> right = mergeSort(half);

    // Merge the two sorted halves
    return mergeTwoSorted(left, right);
}

private static Node<Integer> getMiddle(Node<Integer> head) {
    if (head == null) {
        return head;
    }

    Node<Integer> slow = head;
    Node<Integer> fast = head;

    // Move fast by 2 steps and slow by 1 step to find the middle
    while (fast.next != null && fast.next.next != null) {
        slow = slow.next;
        fast = fast.next.next;
    }

    return slow;
}

private static Node<Integer> mergeTwoSorted(Node<Integer> head1, Node<Integer> head2) {
    if (head1 == null) {
        return head2;
    }
    if (head2 == null) {
        return head1;
    }

    Node<Integer> mergedHead;
    if (head1.data <= head2.data) {
        mergedHead = head1;
        mergedHead.next = mergeTwoSorted(head1.next, head2);
    } else {
        mergedHead = head2;
        mergedHead.next = mergeTwoSorted(head1, head2.next);
    }

    return mergedHead;
}

...

public class Solution {
    public static int findNodeRec(Node<Integer> head, int n) {
        // Base case: if head is null, return -1 (indicating not found)
        if (head == null) {
            return -1;
        }
        
        // If current node's data is equal to n, return the current index (which is 0 at this point)
        if (head.data == n) {
            return 0;
        }
        
        // Recurse into the next node, and add 1 to the result (index in the next node)
        int indexInNextNode = findNodeRec(head.next, n);
        
        // If the result is not -1, it means the element was found in the subsequent nodes
        if (indexInNextNode != -1) {
            return indexInNextNode + 1;
        }
        
        // If the element wasn't found in the list, return -1
        return -1;
    }
}
