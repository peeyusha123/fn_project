class Node<T> {
    T data;
    Node<T> next;

    public Node(T data) {
        this.data = data;
        this.next = null;
    }
}

public class Solution {

    public static Node<Integer> appendLastNToFirst(Node<Integer> head, int n) {
        // Handle empty list or no rearrangement needed
        if (head == null || n == 0) {
            return head;
        }

        // Step 1: Find the length of the linked list
        int length = 0;
        Node<Integer> current = head;
        while (current != null) {
            length++;
            current = current.next;
        }

        // Step 2: If N equals length, no change needed
        if (n == length) {
            return head;
        }

        // Step 3: Find the (length - N)th node (the new tail)
        current = head;
        int count = 1;
        while (count < length - n) {
            current = current.next;
            count++;
        }

        // Step 4: Rearrange pointers
        Node<Integer> newHead = current.next;
        current.next = null;  // Make current node the new tail
        Node<Integer> temp = newHead;
        while (temp.next != null) {
            temp = temp.next;
        }
        temp.next = head;  // Make the old head the next of the last node
        
        // Return the new head
        return newHead;
    }
}
