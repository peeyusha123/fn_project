class Node<T> {
    T data;
    Node<T> next;

    public Node(T data) {
        this.data = data;
        this.next = null;
    }
}

public class Solution {

    public static Node<Integer> appendLastNToFirst(Node<Integer> head, int n) {
        // Handle empty list or no rearrangement needed
        if (head == null || n == 0) {
            return head;
        }

        // Step 1: Find the length of the linked list
        int length = 0;
        Node<Integer> current = head;
        while (current != null) {
            length++;
            current = current.next;
        }

        // Step 2: If N equals length, no change needed
        if (n == length) {
            return head;
        }

        // Step 3: Find the (length - N)th node (the new tail)
        current = head;
        int count = 1;
        while (count < length - n) {
            current = current.next;
            count++;
        }

        // Step 4: Rearrange pointers
        Node<Integer> newHead = current.next;
        current.next = null;  // Make current node the new tail
        Node<Integer> temp = newHead;
        while (temp.next != null) {
            temp = temp.next;
        }
        temp.next = head;  // Make the old head the next of the last node
        
        // Return the new head
        return newHead;
    }
}
2)..

class Node<T> {
    T data;
    Node<T> next;

    public Node(T data) {
        this.data = data;
        this.next = null;
    }
}

public class Solution {

    public static Node<Integer> removeDuplicates(Node<Integer> head) {
        // Edge case: If the list is empty or has only one element, no duplicates to remove
        if (head == null || head.next == null) {
            return head;
        }

        Node<Integer> current = head;

        // Traverse the list
        while (current != null && current.next != null) {
            // Check if current node's data is equal to next node's data
            if (current.data.equals(current.next.data)) {
                // Skip the next node
                current.next = current.next.next;
            } else {
                // Move to the next node
                current = current.next;
            }
        }
        return head;
    }
}


3)

class Node<T> {
    T data;
    Node<T> next;

    public Node(T data) {
        this.data = data;
        this.next = null;
    }
}

public class Solution {

    public static void printReverse(Node<Integer> root) {
        // Base case: If the node is null, return
        if (root == null) {
            return;
        }

        // Recursive call on the next node
        printReverse(root.next);

        // Print the current node's data after the recursion has reached the end
        System.out.print(root.data);
    }
}


4.

class Node<T> {
    T data;
    Node<T> next;

    public Node(T data) {
        this.data = data;
        this.next = null;
    }
}

public class Solution {

    // Function to find the middle of the linked list
    private static Node<Integer> findMiddle(Node<Integer> head) {
        Node<Integer> slow = head;
        Node<Integer> fast = head;

        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }

    // Function to reverse a linked list
    private static Node<Integer> reverseList(Node<Integer> head) {
        Node<Integer> prev = null;
        Node<Integer> curr = head;

        while (curr != null) {
            Node<Integer> nextNode = curr.next;
            curr.next = prev;
            prev = curr;
            curr = nextNode;
        }
        return prev;
    }

    // Function to check if the linked list is a palindrome
    public static boolean isPalindrome(Node<Integer> head) {
        // Edge case: if the list is empty or has only one element, it's a palindrome
        if (head == null || head.next == null) {
            return true;
        }

        // Step 1: Find the middle of the list
        Node<Integer> middle = findMiddle(head);

        // Step 2: Reverse the second half of the list
        Node<Integer> secondHalf = reverseList(middle);

        // Step 3: Compare the first and second halves
        Node<Integer> firstHalf = head;
        Node<Integer> secondHalfCopy = secondHalf;

        while (secondHalfCopy != null) {
            if (!firstHalf.data.equals(secondHalfCopy.data)) {
                return false; // If mismatch found, it's not a palindrome
            }
            firstHalf = firstHalf.next;
            secondHalfCopy = secondHalfCopy.next;
        }

        return true; // If no mismatch, the list is a palindrome
    }
}
new...


public static Node<Integer> deleteNodeRec(Node<Integer> head, int pos) {
    // Base case: If the list is empty or position is invalid
    if (head == null) {
        return null;
    }

    // Base case: If the current node is to be deleted
    if (pos == 0) {
        return head.next; // Skip the current node
    }

    // Recursive call for the next node
    head.next = deleteNodeRec(head.next, pos - 1);

    return head; // Return the current head
}

...

public static Node<Integer> reverseRec(Node<Integer> head) {
    // Base case: If the list is empty or has one node
    if (head == null || head.next == null) {
        return head;
    }

    // Recursively reverse the rest of the list
    Node<Integer> reversedHead = reverseRec(head.next);

    // Adjust the current node's next pointer
    head.next.next = head;
    head.next = null;

    // Return the new head of the reversed list
    return reversedHead;
}
....

public static Node<Integer> reverse_I(Node<Integer> head) {
    // Initialize three pointers
    Node<Integer> prev = null;
    Node<Integer> curr = head;
    Node<Integer> next = null;

    // Iterate through the list
    while (curr != null) {
        // Save the next node
        next = curr.next;

        // Reverse the current node's pointer
        curr.next = prev;

        // Move pointers one step forward
        prev = curr;
        curr = next;
    }

    // Return the new head (prev)
    return prev;
}

...

public static Node<Integer> midPoint(Node<Integer> head) {
    // If the list is empty or has only one node
    if (head == null || head.next == null) {
        return head;
    }

    // Initialize slow and fast pointers
    Node<Integer> slow = head;
    Node<Integer> fast = head;

    // Move pointers until fast or fast.next reaches the end
    while (fast.next != null && fast.next.next != null) {
        slow = slow.next;
        fast = fast.next.next;
    }

    // Slow is now pointing to the midpoint
    return slow;
}


....

public static Node<Integer> mergeTwoSorted(Node<Integer> head1, Node<Integer> head2) {
    // If one of the lists is empty, return the other list
    if (head1 == null) {
        return head2;
    }
    if (head2 == null) {
        return head1;
    }

    // Initialize the merged list's head
    Node<Integer> mergedHead = null, mergedTail = null;

    // Set the initial mergedHead and mergedTail
    if (head1.data <= head2.data) {
        mergedHead = head1;
        mergedTail = head1;
        head1 = head1.next;
    } else {
        mergedHead = head2;
        mergedTail = head2;
        head2 = head2.next;
    }

    // Traverse both lists and merge
    while (head1 != null && head2 != null) {
        if (head1.data <= head2.data) {
            mergedTail.next = head1;
            mergedTail = head1;
            head1 = head1.next;
        } else {
            mergedTail.next = head2;
            mergedTail = head2;
            head2 = head2.next;
        }
    }

    // Attach the remaining nodes (if any)
    if (head1 != null) {
        mergedTail.next = head1;
    } else {
        mergedTail.next = head2;
    }

    return mergedHead;
}


...
public static Node<Integer> mergeSort(Node<Integer> head) {
    // Base case: if the list has 0 or 1 node
    if (head == null || head.next == null) {
        return head;
    }

    // Find the middle of the list
    Node<Integer> mid = getMiddle(head);
    Node<Integer> half = mid.next;
    mid.next = null; // Split the list into two halves

    // Recursively sort both halves
    Node<Integer> left = mergeSort(head);
    Node<Integer> right = mergeSort(half);

    // Merge the two sorted halves
    return mergeTwoSorted(left, right);
}

private static Node<Integer> getMiddle(Node<Integer> head) {
    if (head == null) {
        return head;
    }

    Node<Integer> slow = head;
    Node<Integer> fast = head;

    // Move fast by 2 steps and slow by 1 step to find the middle
    while (fast.next != null && fast.next.next != null) {
        slow = slow.next;
        fast = fast.next.next;
    }

    return slow;
}

private static Node<Integer> mergeTwoSorted(Node<Integer> head1, Node<Integer> head2) {
    if (head1 == null) {
        return head2;
    }
    if (head2 == null) {
        return head1;
    }

    Node<Integer> mergedHead;
    if (head1.data <= head2.data) {
        mergedHead = head1;
        mergedHead.next = mergeTwoSorted(head1.next, head2);
    } else {
        mergedHead = head2;
        mergedHead.next = mergeTwoSorted(head1, head2.next);
    }

    return mergedHead;
}

...

public class Solution {
    public static int findNodeRec(Node<Integer> head, int n) {
        // Base case: if head is null, return -1 (indicating not found)
        if (head == null) {
            return -1;
        }
        
        // If current node's data is equal to n, return the current index (which is 0 at this point)
        if (head.data == n) {
            return 0;
        }
        
        // Recurse into the next node, and add 1 to the result (index in the next node)
        int indexInNextNode = findNodeRec(head.next, n);
        
        // If the result is not -1, it means the element was found in the subsequent nodes
        if (indexInNextNode != -1) {
            return indexInNextNode + 1;
        }
        
        // If the element wasn't found in the list, return -1
        return -1;
    }
}

.....


public class Solution {
    public static Node<Integer> evenAfterOdd(Node<Integer> head) {
        // Edge case: If the list is empty or has only one node, return it directly.
        if (head == null || head.next == null) {
            return head;
        }

        // Initialize two dummy nodes for odd and even lists.
        Node<Integer> oddHead = new Node<>(0);  // Dummy head for odd list
        Node<Integer> evenHead = new Node<>(0); // Dummy head for even list

        Node<Integer> odd = oddHead;  // Pointer for odd list
        Node<Integer> even = evenHead;  // Pointer for even list

        Node<Integer> current = head;

        // Traverse the list and divide nodes into odd and even lists.
        while (current != null) {
            if (current.data % 2 != 0) {
                odd.next = current;  // Add to odd list
                odd = odd.next;
            } else {
                even.next = current;  // Add to even list
                even = even.next;
            }
            current = current.next;
        }

        // To avoid circular references, mark the end of the even list.
        even.next = null;

        // Connect odd list to even list.
        odd.next = evenHead.next;

        // Return the head of the new list, which is oddHead.next (skipping dummy node).
        return oddHead.next;
    }
}


...

public class Solution {
    public static Node<Integer> skipMdeleteN(Node<Integer> head, int M, int N) {
        // Base case: If the head is null or M is 0 (delete all nodes), return null
        if (head == null || M == 0) {
            return null;
        }

        Node<Integer> current = head;
        Node<Integer> temp = null;
        
        while (current != null) {
            // Retain M nodes
            for (int i = 1; i < M && current != null; i++) {
                current = current.next;
            }

            // If current is null, exit the loop
            if (current == null) {
                break;
            }

            // Now, current points to the M-th node, disconnect it from the next part of the list
            temp = current.next;
            
            // Delete the next N nodes
            for (int i = 1; i <= N && temp != null; i++) {
                temp = temp.next;
            }

            // Connect the M-th node to the (M+N)-th node
            current.next = temp;
            
            // Move the current pointer to the next retained node
            current = temp;
        }

        return head;
    }
}
......

public class Solution {
    public static Node<Integer> swapNodes(Node<Integer> head, int i, int j) {
        // If i and j are the same, no swap is needed
        if (i == j) {
            return head;
        }

        // Initialize pointers for traversal
        Node<Integer> prevI = null, currI = head;
        Node<Integer> prevJ = null, currJ = head;

        // Find the i-th and j-th nodes along with their previous nodes
        for (int idx = 0; currI != null && idx < i; idx++) {
            prevI = currI;
            currI = currI.next;
        }
        for (int idx = 0; currJ != null && idx < j; idx++) {
            prevJ = currJ;
            currJ = currJ.next;
        }

        // If either of the nodes is not found (i or j is out of bounds), return the original list
        if (currI == null || currJ == null) {
            return head;
        }

        // If i-th node is not the head, update the previous node to point to the j-th node
        if (prevI != null) {
            prevI.next = currJ;
        } else {
            // If i-th node is the head, update the head to point to the j-th node
            head = currJ;
        }

        // If j-th node is not the head, update the previous node to point to the i-th node
        if (prevJ != null) {
            prevJ.next = currI;
        } else {
            // If j-th node is the head, update the head to point to the i-th node
            head = currI;
        }

        // Swap the next pointers of the i-th and j-th nodes
        Node<Integer> temp = currI.next;
        currI.next = currJ.next;
        currJ.next = temp;

        return head;
    }
}
....

public class Solution {
    
    // Helper function to reverse a sublist of k nodes
    private static Node<Integer> reverseKNodes(Node<Integer> head, int k) {
        Node<Integer> prev = null;
        Node<Integer> curr = head;
        Node<Integer> next = null;
        int count = 0;
        
        // Reverse the first k nodes
        while (curr != null && count < k) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
            count++;
        }
        
        // Return the new head of the reversed sublist
        return prev;
    }

    public static Node<Integer> reverseKGroup(Node<Integer> head, int k) {
        // Check for the edge case where the list is empty or k is 1
        if (head == null || k == 1) {
            return head;
        }

        Node<Integer> dummy = new Node<>(0); // Dummy node to simplify edge cases
        dummy.next = head;
        Node<Integer> groupPrev = dummy; // This will point to the node before each group
        Node<Integer> groupEnd = head; // This will point to the last node in each group
        
        while (groupEnd != null) {
            // Move the groupEnd pointer k steps forward
            int count = 0;
            while (count < k && groupEnd != null) {
                groupEnd = groupEnd.next;
                count++;
            }
            
            // If we have k nodes to reverse
            if (count == k) {
                Node<Integer> groupStart = groupPrev.next;
                Node<Integer> groupNext = groupEnd;
                
                // Reverse the k nodes
                Node<Integer> reversedGroupHead = reverseKNodes(groupStart, k);
                
                // Connect the previous part to the reversed part
                groupPrev.next = reversedGroupHead;
                
                // Connect the end of the reversed group to the rest of the list
                groupStart.next = groupNext;
                
                // Move the groupPrev pointer k nodes forward
                groupPrev = groupStart;
            }
        }
        
        return dummy.next;
    }
}
..
.....

class Node<T> {
    T data;
    Node<T> next;

    public Node(T data) {
        this.data = data;
        this.next = null;
    }
}

public class Solution {

    // Function to perform bubble sort on a singly linked list
    public static Node<Integer> bubbleSort(Node<Integer> head) {
        if (head == null || head.next == null) {
            return head; // If list is empty or has one node, no sorting needed
        }

        boolean swapped;
        Node<Integer> current;
        Node<Integer> lastSorted = null;

        // Keep making passes through the list until no swaps are done
        do {
            swapped = false;
            current = head;

            // Traverse the list, compare adjacent nodes, and swap if needed
            while (current != null && current.next != lastSorted) {
                if (current.data > current.next.data) {
                    // Swap the data of the nodes
                    int temp = current.data;
                    current.data = current.next.data;
                    current.next.data = temp;

                    swapped = true;
                }
                current = current.next;
            }

            // After each pass, the last element is sorted
            lastSorted = current;

        } while (swapped);  // Continue until no swaps are done

        return head;
    }
}
......

class Node {
    int data;
    Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

public class Stack {
    private Node top;  // Points to the top of the stack
    private int size;  // To keep track of the size of the stack

    // Constructor to initialize the stack
    public Stack() {
        this.top = null;
        this.size = 0;
    }

    // Push function: adds an element to the top of the stack
    public void push(int data) {
        Node newNode = new Node(data);
        newNode.next = top;  // New node points to the previous top
        top = newNode;       // Now, the new node becomes the top
        size++;              // Increment the size
    }

    // Pop function: removes the top element from the stack
    public int pop() {
        if (top == null) {  // Stack is empty
            return -1;
        }
        int poppedData = top.data;  // Save the data to return
        top = top.next;  // Remove the top node
        size--;  // Decrease the size
        return poppedData;
    }

    // Top function: returns the top element without removing it
    public int top() {
        if (top == null) {  // Stack is empty
            return -1;
        }
        return top.data;
    }

    // Size function: returns the size of the stack
    public int size() {
        return size;
    }

    // isEmpty function: checks if the stack is empty
    public boolean isEmpty() {
        return top == null;
    }

    public static void main(String[] args) {
        Stack stack = new Stack();
        
        // Sample Input 1
        stack.push(13);
        stack.push(47);
        System.out.println(stack.size());  // Output: 2
        System.out.println(stack.isEmpty());  // Output: false
        System.out.println(stack.pop());  // Output: 47
        System.out.println(stack.top());  // Output: 13

        // Sample Input 2
        stack = new Stack();
        System.out.println(stack.isEmpty());  // Output: true
        System.out.println(stack.pop());  // Output: -1
        stack.push(10);
        System.out.println(stack.isEmpty());  // Output: false
    }
}
