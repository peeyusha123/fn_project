<div class="col-xs-12 col-sm-12 col-md-12 margin-top mobile-padding-left-right-0 ipad-padding-left-right-0 ight-0">
    <label class="col-sm-5 col-xs-12 col-md-5 padding-left-right-zero opt-label">Date Submitted to Environmental Compliance: </label>
    <div class="col-xs-12 col-sm-7 col-md-7 padding-zero">
        <div class="date-picker">
            <input id="env_submit_territory_date" type="text" close-text="Close" data-provide="datepicker" datepicker-popup="dd-MMM-yyyy" class="col-xs-12 datepicker form-control-spm env-submit-territory-date disable" aria-required="false" aria-invalid="false" data-toggle="tooltip" data-placement="top" data-original-title="Date Submitted to Environmental Compliance">
            <span class="input-group-btn">
            </span>
        </div>
    </div>
</div>
....









<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>SPM Tracker</title>
    <link rel="stylesheet" type="text/css" href="path/to/your/css/file.css">
    <style>
        .hidden {
            display: none;
        }
    </style>
</head>
<body>

<h6 class="teat-brand-red margin-top">@BAMWIDTH Callsigns</h6>

<div class="col-md-12 padding-zero section-divider-bottom">
    <div class="radio vzhs-radio test-bold border-none margin-top-bottom">
        <label>Does the signal extend into the country at levels specified in the Agreement between The FCC and their counterpart?</label>
        &nbsp;
        <input name="signalExtend" role="radio" data-reg-service="VZREGSERVICE" value="yes" id="signalExtendYes" type="radio">
        <label for="signalExtendYes">Yes</label>
        <input name="signalExtend" role="radio" data-reg-service="VZREGSERVICE" value="no" id="signalExtendNo" type="radio" checked>
        <label for="signalExtendNo">No</label>
    </div>

    <div id="notificationTimeoutDiv" class="hidden">
        <label for="notificationTimeout">Notification Timeout Date</label>
        <input type="date" id="notificationTimeout" name="notificationTimeout">
    </div>

    <div id="agreementTimeoutDiv" class="hidden">
        <label for="agreementTimeout">Agreement Timeout Date</label>
        <input type="date" id="agreementTimeout" name="agreementTimeout">
    </div>

    <label>Upload Agreement/Notification</label>
    <div class="custom-file-upload vertical-align-middle">
        <div class="margin-top-bottom">
            <input type="file" name="fileUpload" class="file-upload" accept=".doc, .docx, .pdf">
        </div>
        <input type="hidden" name="category" id="category" value="projects">
        <input type="hidden" name="subCategory" id="subCategory" value="INTERNATIONAL BORDER DOC">
        <input type="hidden" name="description" id="description" value="General Documents">
        <input type="hidden" name="uri" id="uri" value="document-gateway/document">
    </div>

    <button type="submit" class="btn btn-danger">Upload Document</button>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        var signalExtendYes = document.getElementById('signalExtendYes');
        var signalExtendNo = document.getElementById('signalExtendNo');
        var notificationTimeoutDiv = document.getElementById('notificationTimeoutDiv');
        var agreementTimeoutDiv = document.getElementById('agreementTimeoutDiv');

        signalExtendYes.addEventListener('change', function() {
            if (signalExtendYes.checked) {
                agreementTimeoutDiv.classList.remove('hidden');
                notificationTimeoutDiv.classList.add('hidden');
            }
        });

        signalExtendNo.addEventListener('change', function() {
            if (signalExtendNo.checked) {
                notificationTimeoutDiv.classList.remove('hidden');
                agreementTimeoutDiv.classList.add('hidden');
            }
        });

        // Initialize the fields based on the current state
        if (signalExtendYes.checked) {
            agreementTimeoutDiv.classList.remove('hidden');
        } else {
            notificationTimeoutDiv.classList.remove('hidden');
        }
    });
</script>

</body>
</html>














//p1.html..
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="p2.css" />

    <title>Login Page</title>
  </head>
  <body>
    <form id="loginForm">
      <label for="username">Username:</label>
      <input
        type="text"
        id="newUsername"
        placeholder="Enter the User Name"
        autocomplete="newUsername"
      />

      <label for="password">Password:</label>
      <input
        type="password"
        id="newPassword"
        placeholder="Enter the Password"
        autocomplete="newPassword"
      />

      <button type="button" id="submitBtn" disabled>Submit</button>
      <button type="button" id="resetBtn" style="display: none">Reset</button>
      <button type="button" id="signupBtn" onclick="openSignUpModal()">
        Sign Up
      </button>

      <button
        type="button"
        id="resetPasswordBtn"
        onclick="openResetPasswordModal()"
      >
        Password Reset
      </button>
    </form>

    <div id="signUpModalContainer"></div>
    <div id="signUpModal" class="modal">
      <div class="modal-content">
        <span class="close" onclick="closeSignUpModal()">&times;</span>
        <h2>Sign Up</h2>
        <form id="signUpForm">
          <label for="signupUsername">Username:</label>
          <input
            type="text"
            id="signupUsername"
            placeholder="Enter the User Name"
            autocomplete="signupUsername"
          />

          <label for="signupPassword">Password:</label>
          <input
            type="password"
            id="signupPassword"
            placeholder="Enter the Password"
            autocomplete="signupPassword"
          />

          <button
            type="button"
            id="signupSubmitBtn"
            onclick="submitSignUpForm()"
          >
            Submit
          </button>
          <button type="button" id="signupResetBtn" onclick="resetSignUpForm()">
            Reset
          </button>
          <button type="button" id="resetStorageBtn">Reset Storage</button>
        </form>
      </div>
    </div>
    <div id="resetPasswordModal" class="modal">
      <div class="modal-content">
        <span class="close" onclick="closeResetPasswordModal()">&times;</span>
        <h2>Password Reset</h2>
        <form id="resetPasswordForm">
          <label for="resetUsername">Username:</label>
          <input
            type="text"
            id="resetUsername"
            placeholder="Enter the User Name"
            autocomplete="resetUsername"
          />
          <button type="button" id="resetPasswordBtn">Reset Password</button>
        </form>
      </div>
    </div>
    <script defer src="p3.js"></script>
    <script defer src="p4.js"></script>
  </body>
</html>

//p2.css,,,,,
body {
  font-family: Arial, sans-serif;
  background-color: #f4f4f4;
  margin: 0;
  padding: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  height: 100vh;
}

form {
  background-color: #fff;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  width: 300px;
  text-align: center;
}

input {
  width: 100%;
  padding: 8px;
  margin: 8px 0;
  box-sizing: border-box;
}

button {
  background-color: #4caf50;
  color: white;
  padding: 10px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

button:disabled {
  background-color: #cccccc;
  cursor: not-allowed;
}

.error {
  color: red;
}

.modal {
  display: none;
  position: fixed;
  z-index: 1;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: auto;
  background-color: rgb(0, 0, 0);
  background-color: rgba(0, 0, 0, 0.4);
  padding-top: 60px;
}

.modal-content {
  background-color: #fefefe;
  margin: 5% auto;
  padding: 20px;
  border: 1px solid #888;
  width: 80%;
}

.close {
  color: #aaa;
  float: right;
  font-size: 28px;
  font-weight: bold;
}

.close:hover,
.close:focus {
  color: black;
  text-decoration: none;
  cursor: pointer;
}
//p3.js...
document.getElementById("signupPassword").addEventListener("cut", function (e) {
  e.preventDefault();
  showDisabledAlert();
});

document
  .getElementById("signupPassword")
  .addEventListener("copy", function (e) {
    e.preventDefault();
    showDisabledAlert();
  });

document
  .getElementById("signupPassword")
  .addEventListener("paste", function (e) {
    e.preventDefault();
    showDisabledAlert();
  });

document
  .getElementById("signupPassword")
  .addEventListener("contextmenu", function (e) {
    e.preventDefault();
    showDisabledAlert();
  });

function showDisabledAlert() {
  // Show Bootstrap Error alert in the Modal
  const signUpModalContent = document.querySelector(
    "#signUpModal .modal-content"
  );
  signUpModalContent.innerHTML += `
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
      Copy, paste, and right-click disabled for the password field.
      <button type="button" class="close" data-dismiss="alert" aria-label="Close">
        <span aria-hidden="true">&times;</span>
      </button>
    </div>
  `;
}

document.getElementById("newUsername").addEventListener("blur", function () {
  validateField("newUsername");
  updateResetButtonVisibility();
  updateSubmitButtonState();
});

document.getElementById("newPassword").addEventListener("blur", function () {
  validateField("newPassword");
  updateResetButtonVisibility();
  updateSubmitButtonState();
});

document.getElementById("submitBtn").addEventListener("click", function () {
  submitForm();
});

document.getElementById("resetBtn").addEventListener("click", function () {
  resetForm();
});

function validateField(field) {
  const element = document.getElementById(field);
  if (element.value.trim() === "") {
    element.style.border = "2px solid red";
  } else {
    element.style.border = "1px solid #ccc";
  }
}

function updateResetButtonVisibility() {
  const usernameField = document.getElementById("newUsername");
  const passwordField = document.getElementById("newPassword");
  const resetButton = document.getElementById("resetBtn");

  if (usernameField.value !== "" && passwordField.value !== "") {
    resetButton.style.display = "inline-block";
  } else {
    resetButton.style.display = "none";
  }
}

function updateSubmitButtonState() {
  const usernameField = document.getElementById("newUsername");
  const passwordField = document.getElementById("newPassword");
  const submitButton = document.getElementById("submitBtn");

  if (usernameField.value === "" && passwordField.value === "") {
    submitButton.disabled = true;
  } else {
    submitButton.disabled = false;
  }
}

function submitForm() {
  const username = document.getElementById("newUsername").value;
  const password = document.getElementById("newPassword").value;

  if (username === "" || password === "") {
    alert("Username and password are mandatory");
    if (username === "") {
      document.getElementById("newUsername").style.border = "2px solid red";
      document.getElementById("newUsername").focus();
    } else {
      document.getElementById("newUsername").style.border = "1px solid #ccc";
      document.getElementById("newPassword").style.border = "2px solid red";
      document.getElementById("newPassword").focus();
    }
    return;
  }

  const userObject = {
    userName: username,
    pwd: password,
  };

  // Retrieve the existing user list from local storage
  let userList = JSON.parse(localStorage.getItem("userList")) || [];

  // Push the new user object to the user list
  userList.push(userObject);

  // Store the updated user list back to local storage
  localStorage.setItem("userList", JSON.stringify(userList));

  console.log("User List after submission:", userList);

  // Additional logic for local storage validation can be added here

  // Log the username and password JSON list data in the console
  console.log(
    "Username and Password JSON List Data:",
    JSON.stringify(userList)
  );
}

function resetForm() {
  document.getElementById("newUsername").value = "";
  document.getElementById("newPassword").value = "";
  updateResetButtonVisibility();
  updateSubmitButtonState();
}
document
  .getElementById("resetStorageBtn")
  .addEventListener("click", function () {
    // Clear the stored local storage list
    localStorage.removeItem("userList");
    console.log("Local Storage List cleared");
  });

function openSignUpModal() {
  const signUpModal = document.getElementById("signUpModal");
  signUpModal.style.display = "block";
}

function closeSignUpModal() {
  const signUpModal = document.getElementById("signUpModal");
  signUpModal.style.display = "none";
}

function submitSignUpForm() {
  const username = document.getElementById("signupUsername").value;
  const password = document.getElementById("signupPassword").value;

  if (!/^[a-zA-Z]+$/.test(username)) {
    // Show Bootstrap Error alert in the Modal
    const signUpModalContent = document.querySelector(
      "#signUpModal .modal-content"
    );
    signUpModalContent.innerHTML += `
      <div class="alert alert-danger alert-dismissible fade show" role="alert">
        User Name cannot contain special characters or numbers. Choose another name and try again.
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
    `;
    // Place the cursor in the Username Field
    document.getElementById("signupUsername").focus();
    return;
  }
  // Validate password
  const passwordRegex =
    /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^])(?=.*\d)[a-zA-Z\d!@#$%^]{8,}$/;
  if (!passwordRegex.test(password)) {
    // Show Bootstrap Error alert in the Modal
    const signUpModalContent = document.querySelector(
      "#signUpModal .modal-content"
    );
    signUpModalContent.innerHTML += `
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
      Password must have at least 8 characters, including at least 1 lowercase letter, 1 uppercase letter, 1 digit, and 1 special character (!@#$%^).
      <button type="button" class="close" data-dismiss="alert" aria-label="Close">
        <span aria-hidden="true">&times;</span>
      </button>
    </div>
  `;
    // Place the cursor in the Password Field
    document.getElementById("signupPassword").focus();
    return;
  }
  // Retrieve the existing user list from local storage
  let userList = JSON.parse(localStorage.getItem("userList")) || [];

  // Check if the username already exists
  if (userList.some((user) => user.userName === username)) {
    // Show Bootstrap Error alert in the Modal
    const signUpModalContent = document.querySelector(
      "#signUpModal .modal-content"
    );
    signUpModalContent.innerHTML += `
      <div class="alert alert-danger alert-dismissible fade show" role="alert">
        User Name already taken. Choose another name and try again.
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
    `;
    // Place the cursor in the Username Field
    document.getElementById("signupUsername").focus();
    return;
  }

  const userObject = {
    userName: username,
    pwd: password,
  };

  // Push the new user object to the user list
  userList.push(userObject);

  // Store the updated user list back to local storage
  localStorage.setItem("userList", JSON.stringify(userList));

  console.log("User List after signup:", userList);

  // Close the modal after successful signup
  closeSignUpModal();

  // Show Bootstrap Success alert in the Modal on the Top of Login Screen
  const loginForm = document.getElementById("loginForm");
  loginForm.insertAdjacentHTML(
    "afterbegin",
    `
      <div class="alert alert-success alert-dismissible fade show" role="alert">
        User is created.
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
    `
  );

  // Set timeout to remove the success alert after 5 seconds
  setTimeout(() => {
    document.querySelector(".alert-success").remove();
  }, 5000);
}

above is login and sign up code .. now lets try password reset page .. while creating below conditions must  be satisfied..
Create a Password Reset Screen with User Name and Reset  Button which will open on clicking of Password Reset Button from the Login Page
Add a place holder in the User Name box as Enter the User Name
Disable the Reset Button if User Name Field is empty.
Once the User Name is entered Check if the entered username is present in the Local Storage 
Add Validation not to enter,paste special characters in User Name
If Present the Open a Pop Up Modal with Name as Password Reset Modal which will contain Non Editable User Name and New Password and Retype New Password Fields and a Submit Button.
On Click of the Submit Button in Password Reset Modal find the username and set this new password for the username in local storage.
Add Validation to check if Password has 8 Characters, Min 1 Lower Case, Min 1 Upper Case and Min 1 Special Character
Allowed Special Characters in Password (!@#$%^) and anything out of this then throw an Error Message stating that the Special Character should be within this.
Disable Copy, Paste using ShortCuts and Right Click on Password Field.
On Click of the Submit Button in Password Reset Modal check if New Password and Reset Password Values martch and if not and show BootStrap Success alert in the Modal  Stating  "Password does not match" on the Top of  Password Reset Screen 
BootStrap alert should have a X Mark to close also the message should disappear automatically in 5 seconds or by clicking the X Mark.
If all Validations are good then close the Password Reset Modal and show BootStrap Success alert in the Modal  Stating  "User Password Reset Success" on the Top of  Login Screen 


// Function to open the password reset modal
function openResetPasswordModal() {
  const resetPasswordModal = document.getElementById("resetPasswordModal");
  resetPasswordModal.style.display = "block";
}

// Function to close the password reset modal
function closeResetPasswordModal() {
  const resetPasswordModal = document.getElementById("resetPasswordModal");
  resetPasswordModal.style.display = "none";
}

// Function to open the password reset modal
function openResetPasswordModal() {
  const resetPasswordModal = document.getElementById("resetPasswordModal");
  resetPasswordModal.style.display = "block";

  // Add event listener to the input field for real-time validation
  const userNameInput = document.getElementById("userNameInput");
  userNameInput.addEventListener("input", handleUserNameInputChange);

  // Initially disable the Reset Button
  const resetButton = document.getElementById("resetButton");
  resetButton.disabled = true;
}

// Function to close the password reset modal
function closeResetPasswordModal() {
  const resetPasswordModal = document.getElementById("resetPasswordModal");
  resetPasswordModal.style.display = "none";
}

// Function to handle input change in the User Name field
function handleUserNameInputChange() {
  const userNameInput = document.getElementById("userNameInput");
  const resetButton = document.getElementById("resetButton");

  // Enable the Reset Button only if the User Name field is not empty
  resetButton.disabled = !userNameInput.value.trim();
}



new...

// Existing code in your p4.js file

// Function to open the password reset modal
function openResetPasswordModal() {
  const resetPasswordModal = document.getElementById("resetPasswordModal");
  resetPasswordModal.style.display = "block";

  // Add event listener to the input field for real-time validation
  const userNameInput = document.getElementById("enterUserName");
  userNameInput.addEventListener("input", handleUserNameInputChange);

  // Initially disable the Reset Button
  const resetButton = document.getElementById("resetPasswordButton");
  resetButton.disabled = true;
}

// Function to close the password reset modal
function closeResetPasswordModal() {
  const resetPasswordModal = document.getElementById("resetPasswordModal");
  resetPasswordModal.style.display = "none";
}

// Function to handle input change in the User Name field
function handleUserNameInputChange() {
  const userNameInput = document.getElementById("enterUserName");
  const resetButton = document.getElementById("resetPasswordButton");

  // Enable the Reset Button only if the User Name field is not empty
  resetButton.disabled = !userNameInput.value.trim();

  // Update button style based on disabled state
  if (resetButton.disabled) {
    resetButton.style.backgroundColor = "#d3d3d3"; /* Light gray background color */
    resetButton.style.color = "#a9a9a9"; /* Dark gray text color */
    resetButton.style.cursor = "not-allowed"; /* Display not-allowed cursor when disabled */
  } else {
    resetButton.style.backgroundColor = "#4caf50"; /* Green background color */
    resetButton.style.color = "white"; /* White text color */
    resetButton.style.cursor = "pointer"; /* Change cursor on hover */
  }
}


new..
create table user (id number(19,0) generated as identity, password varchar2(255 char), username varchar2(255 char), primary key (id))" via jdbc statement


new....



Open sidebar
ChatGPT 3.5

User
create or replace FUNCTION        "FUNC_PROJ_PRE_REQ" (siteProjectsId NUMBER, milestoneName VARCHAR2)
RETURN CLOB
AS
preReq CLOB;
v_check VARCHAR2(32);
v_bool Boolean;
v_dismantlement VARCHAR2(32);
v_whereClause VARCHAR2(64);
v_query CLOB;
tableName VARCHAR2(1024);
dataList CLOB;
fieldsData CLOB;
powerCompltDt VARCHAR2(64);
v_hubTransportVendor VARCHAR2(32);
--v_transportType VARCHAR2(64);
BEGIN
    BEGIN
	SELECT CASE WHEN SP.TYPE = 'Modification' AND (PAI.PROJ_MOD_TYPE IS NULL OR PAI.PROJ_MOD_TYPE IN ('DISMANTLEMENT')) THEN 'false' ELSE 'true' END INTO v_dismantlement
	FROM SITE_PROJECTS SP
	INNER JOIN PROJ_ADDITIONAL_INFO PAI ON PAI.SITE_PROJECTS_ID = SP.SITE_PROJECTS_ID
	AND SP.SITE_PROJECTS_ID = siteProjectsId;
    EXCEPTION WHEN NO_DATA_FOUND THEN
	    v_dismantlement := 'false';
    END;
    IF(v_dismantlement = 'true') THEN
	-- FOR FIELDS IN (SELECT * FROM ENUM_REFERENCE WHERE GROUP_NAME = 'PROJECTS_SETTINGS' AND SUB_TYPE = 'PRE_REQ'
	 -- )LOOP
	  --DBMS_OUTPUT.PUT_LINE('Field Name: '||FIELDS.NAME);
	    dataList := NULL;
	    FOR FIELD_LIST IN (SELECT MODULE,TABLE_NAME,dbms_xmlgen.convert(RTRIM(XMLAGG(XMLELEMENT(E,D,'||'',''||')).EXTRACT('E/text()').getCLOBVal(),'||'),1) AS fields FROM
				(SELECT MODULE,TABLE_NAME,
                CASE WHEN TABLE_NAME = 'VDU_ORCHESTRATION' AND FIELD_NAME != 'VCP_FE_INSTALLATION_AC_DT' 
                    THEN '''"' || TITLE || '":"''' || ' || CASE WHEN COUNT(' || FIELD_NAME || ') = COUNT(*) THEN TO_CHAR(MAX(' || FIELD_NAME || '),''MM/DD/RRRR'') ELSE '''' END ||' || '''"'''
                WHEN TABLE_NAME = 'VDU_ORCHESTRATION' AND FIELD_NAME = 'VCP_FE_INSTALLATION_AC_DT' 
                    THEN '''"' || TITLE || '":"''' || '||CASE WHEN COUNT(' || FIELD_NAME || ') = COUNT(*) THEN TO_CHAR(MAX(TO_DATE(' || FIELD_NAME || ',''MM/DD/RRRR'')),''MM/DD/RRRR'') ELSE '''' END ||' || '''"'''
                ELSE '''"' || TITLE || '":"''' || '||' || FIELD_NAME || '||' || '''"''' END AS D
				FROM FUZE_TRACKER_FIELD_CONFIG FTFC
				WHERE
				FIELD_NAME IN (SELECT  MMM.DEPENDENT_FIELD FROM PROJ_MAJOR_MILESTONE_MAPPING MMM
				    inner join FUZE_TRACKER_FIELD_CONFIG FTFC on MMM.MAJOR_MILESTONE = FTFC.FIELD_NAME
				    where MMM.IS_MANDATORY in ('C','MC','VDU')
				    and FTFC.EDIT_RULE = 'CALCULATED_DATE'
				    and FTFC.workstep_name = milestoneName
				    )
				) T GROUP BY MODULE,TABLE_NAME
	    ) LOOP
		DBMS_OUTPUT.PUT_LINE('MODULE NAME ::'||FIELD_LIST.MODULE);
		 DBMS_OUTPUT.PUT_LINE('FIELDS::'||FIELD_LIST.fields);
	       IF(FIELD_LIST.TABLE_NAME = 'SPM_PROJECT_TRACKER') THEN
		    v_whereClause := 'FUZE_PROJECT_ID';
		ELSE
		    v_whereClause := 'SITE_PROJECTS_ID';
		END IF;
		IF (FIELD_LIST.TABLE_NAME NOT IN ( 'PROJECT_TRACKER_WORKSTEP_STATUS','VDU_ORCHESTRATION')) THEN
		    v_query := 'SELECT ' || to_char(FIELD_LIST.fields) || '
				FROM SITE_PROJECTS SP
				LEFT OUTER JOIN ' || FIELD_LIST.TABLE_NAME || ' T ON T.'||v_whereClause||' = SP.SITE_PROJECTS_ID
				WHERE SP.SITE_PROJECTS_ID = ' || siteProjectsId;
		    DBMS_OUTPUT.PUT_LINE(v_query);
		    EXECUTE IMMEDIATE v_query into fieldsData;
		    DBMS_OUTPUT.PUT_LINE('IF fieldsData::'|| fieldsData );
        ELSIF(FIELD_LIST.TABLE_NAME = 'VDU_ORCHESTRATION')THEN

             v_query := 'SELECT ' || to_char(FIELD_LIST.fields) || '
				FROM SITE_PROJECTS SP
				LEFT OUTER JOIN ' || FIELD_LIST.TABLE_NAME || ' T ON T.'||v_whereClause||' = SP.SITE_PROJECTS_ID
                AND VRAN_ORCHESTRATION_PATH = ''FULL_ORCHESTRATION''
				WHERE SP.SITE_PROJECTS_ID = ' || siteProjectsId;
                DBMS_OUTPUT.PUT_LINE(v_query);

		    DBMS_OUTPUT.PUT_LINE('IF fieldsData::'|| fieldsData );

            EXECUTE IMMEDIATE v_query into fieldsData;
		    DBMS_OUTPUT.PUT_LINE('IF fieldsData::'|| fieldsData );
		ELSE
		    SELECT dbms_xmlgen.convert(XMLAGG(XMLELEMENT(E,FLDDATA,',')).EXTRACT('E/text()').getCLOBVal(),1) INTO fieldsData
		    FROM (
			SELECT '"' || FTFC.TITLE || '":"' || PTWS1.COMPLETED_DATE ||'"' AS FLDDATA
			FROM FUZE_TRACKER_FIELD_CONFIG FTFC
			inner join (
			    SELECT * FROM (
								SELECT MAJOR_MS_CANDIDATE_SELECTION_COMPLETED_DATE, MAJOR_MS_ACTIVATION_COMPLETED_DATE,MINOR_MS_ACTIVATION_NON_RF_COMPLETED_DATE,MINOR_MS_AE_COMPLETED_DATE,MINOR_MS_CANDIDATE_ACCEPTED_COMPLETED_DATE,MINOR_MS_CANDIDATE_SUBMITTED_COMPLETED_DATE,
				MINOR_MS_CONSTRUCTION_REVIEW_COMPLETED_DATE,MINOR_MS_RF_ACCEPT_RANKING_COMPLETED_DATE,MINOR_MS_TRANSPORT_REVIEW_COMPLETED_DATE,MINOR_MS_CLOSEOUT_DOCUMENTS_UPLOAD_COMPLETED_DATE,
				MINOR_MS_PHOTO_DOCUMENTS_COMPLETED_DATE,MINOR_MS_CREATE_CQ_COMPLETED_DATE,MINOR_MS_CQ_EQUIPMENT_COMPLETED_DATE,MINOR_MS_IP_COMPLETE_COMPLETED_DATE,
				MINOR_MS_READY_FOR_ASSURANCE_COMPLETED_DATE,MINOR_MS_RF_COMPLETE_DATE,MINOR_MS_SP_COMPLETE_COMPLETED_DATE,MINOR_MS_TRANSPORT_COMPLETE_COMPLETED_DATE,
				MINOR_MS_CONSTRUCTION_READY_COMPLETED_DATE,MINOR_MS_PRE_TCN_COMPLETED_DATE,MINOR_MS_CREATE_PROJECT_COMPLETED_DATE,
				MINOR_MS_CONFIRM_E911_ADDRESS_COMPLETED_DATE,MINOR_MS_CONFIRM_E911_SUBMITTED_COMPLETED_DATE,MINOR_MS_CONFIRM_TVW_RECEIVED_COMPLETED_DATE,MINOR_MS_EDGE_EQUIPMENT_CLOSEOUT_COMPLETED_DATE,
				MINOR_MS_EDGE_EQUIPMENT_INFORMATION_COMPLETED_DATE,MINOR_MS_EDGE_EQUIPMENT_INSTALL_COMPLETED_DATE,MINOR_MS_EDGE_FUNDING_COMPLETED_DATE,MINOR_MS_EDGE_INTEGRATE_COMPLETED_DATE,
				MINOR_MS_EDGE_PROJECT_INFO_COMPLETED_DATE,MINOR_MS_EDGE_PSC_VETTING_COMPLETED_DATE,MINOR_MS_EDGE_VENDOR_SERVICE_INSTALL_COMPLETED_DATE,MINOR_MS_ENVIRONMENTAL_REVIEW_COMPLETED_DATE,
				MINOR_MS_GLOBAL_EHS_REVIEW_COMPLETED_DATE,MINOR_MS_TERRITORY_REVIEW_COMPLETED_DATE,MINOR_MS_TSDF_REVIEW_COMPLETED_DATE,MINOR_MS_BOM_COMPLETE_COMPLETED_DATE,MINOR_MS_EQUIPMENT_PROCUREMENT_COMPLETE_COMPLETED_DATE,
				MAJOR_MS_HUB_READY_COMPLETED_DATE,MINOR_MS_INTEGRATION_COMPLETED_DATE,MINOR_MS_LEASING_COMPLETED_DATE,MAJOR_MS_NETWORK_ASSURANCE_COMPLETED_DATE,MINOR_MS_PERMITTING_COMPLETED_DATE,
				MINOR_MS_CONSTRUCTION_FORM_COMPLETED_DATE,MINOR_MS_ENV_CONST_CLOSEOUT_INFO_COMPLETED_DATE,
				MINOR_MS_POST_TCN_COMPLETED_DATE,MINOR_MS_RFE_MITIGATION_DOCS_COMPLETED_DATE,MINOR_MS_POWER_VETTING_COMPLETED_DATE,MINOR_MS_POWER_COMPLETE_COMPLETED_DATE,MINOR_MS_POWER_UTILITIES_TERMINATION_COMPLETED_DATE,MINOR_MS_UTILITY_INFORMATION_COMPLETED_DATE,
				MINOR_MS_PSC_CONSTRUCTION_COMPLETED_DATE,MINOR_MS_PSC_DESIGN_COMPLETED_DATE,MINOR_MS_PSC_PRE_CONSTRUCTION_COMPLETED_DATE,MINOR_MS_PSC_PROJ_DETAILS_COMPLETED_DATE,MINOR_MS_PSLC_FUNDING_COMPLETED_DATE,
				MAJOR_MS_REAL_ESTATE_COMPLETED_DATE,MINOR_MS_AM_FURTHER_STUDY_COMPLETED_DATE,MINOR_MS_ASR_FORM_COMPLETED_DATE,MINOR_MS_FAA_FORM_COMPLETED_DATE,MINOR_MS_FULL_CONSTRUCTION_APPROVAL_COMPLETED_DATE,
				MINOR_MS_GROUND_ONLY_APPROVAL_COMPLETED_DATE,MINOR_MS_STRUCTURE_FORM_COMPLETED_DATE,MINOR_MS_SUBMIT_FOR_NEPA_COMPLETED_DATE,MINOR_MS_SURVEY_COMPLETED_DATE,MINOR_MS_REGULATORY_DISMANTLEMENT_COMPLETED_DATE,
				MINOR_MS_REGULATORY_INSERVICE_COMPLETED_DATE,MINOR_MS_CARRIER_AGREEMENT_COMPLETED_DATE,MINOR_MS_CREATE_RFDS_COMPLETED_DATE,MINOR_MS_INSERVICE_DOCUMENTS_COMPLETED_DATE,MINOR_MS_INTERNATIONAL_BORDER_COMPLETED_DATE,
				MINOR_MS_QUIET_ZONE_COMPLETED_DATE,MINOR_MS_RFE_COMPLETED_DATE,MINOR_MS_SUBMIT_RFDS_COMPLETED_DATE,MINOR_MS_RFDS_IBV_COMPLETED_DATE,MINOR_MS_SELECT_VENDOR_COMPLETED_DATE,MINOR_MS_MICROWAVE_COMPLETED_DATE,MINOR_MS_ONE_FIBER_COMPLETED_DATE,
				MINOR_MS_TRANSPORT_CONTRACT_COMPLETED_DATE,MINOR_MS_TRANSPORT_DELIVERY_COMPLETED_DATE,MINOR_MS_ZONING_COMPLETED_DATE,MINOR_MS_EQUIPMENT_COMPLETED_DATE, MAJOR_MS_PHYSICAL_CONSTRUCTION_COMPLETE_COMPLETED_DATE, MAJOR_MS_TRANSPORT_COMPLETED_DATE, MINOR_MS_CONQUEST_COMPLETED_DATE, MAJOR_MS_POWER_COMPLETED_DATE, MINOR_MS_ENVIRONMENT_DUE_DILIGENCE_COMPLETED_DATE, MINOR_MS_REGULATORY_COMPLETED_DATE,
				MINOR_MS_VCP_ORCHESTRATION_COMPLETED_DATE,MAJOR_MS_RTC_COMPLETED_DATE,MINOR_MS_CONSTRUCTION_48HR_REVIEW_COMPLETED_DATE,MINOR_MS_RF_48HR_REVIEW_COMPLETED_DATE,MINOR_MS_BUILD_CONSTRUCTION_COMPLETE_COMPLETED_DATE,MINOR_MS_ENVIRONMENTAL_NOTICE_TO_CONTRACTOR_COMPLETED_DATE,MINOR_MS_REGULATORY_48HR_REVIEW_COMPLETED_DATE,MINOR_MS_REGULATORY_CONSTRUCTION_SR_COMPLETED_DATE,
                MINOR_MS_VCP_FAR_EDGE_INSTALLATION_COMPLETED_DATE,MINOR_MS_DC_DISCOVERY_COMPLETED_DATE,MINOR_MS_FAR_EDGE_INSTANTIATION_COMPLETED_DATE,MINOR_MS_VDU_DAY_0_COMPLETE_COMPLETED_DATE,
                MINOR_MS_VDU_DAY_1_COMPLETE_COMPLETED_DATE,MINOR_MS_VDU_DEPLOY_READINESS_COMPLETED_DATE,MINOR_MS_VCP_SUBCLOUD_DEPLOYMENT_INITIATED_COMPLETED_DATE
				FROM PROJECT_TRACKER_WORKSTEP_STATUS WHERE SITE_PROJECTS_ID = siteProjectsId
			    ) UNPIVOT INCLUDE NULLS( COMPLETED_DATE FOR FIELD_NAME IN (
							MAJOR_MS_CANDIDATE_SELECTION_COMPLETED_DATE AS 'MAJOR_MS_CANDIDATE_SELECTION_COMPLETED_DATE',
			    MAJOR_MS_ACTIVATION_COMPLETED_DATE AS 'MAJOR_MS_ACTIVATION_COMPLETED_DATE',
			    MINOR_MS_ACTIVATION_NON_RF_COMPLETED_DATE AS 'MINOR_MS_ACTIVATION_NON_RF_COMPLETED_DATE',
			    MINOR_MS_AE_COMPLETED_DATE AS 'MINOR_MS_AE_COMPLETED_DATE',
			    MINOR_MS_CANDIDATE_ACCEPTED_COMPLETED_DATE AS 'MINOR_MS_CANDIDATE_ACCEPTED_COMPLETED_DATE',
			    MINOR_MS_CANDIDATE_SUBMITTED_COMPLETED_DATE AS 'MINOR_MS_CANDIDATE_SUBMITTED_COMPLETED_DATE',
			    MINOR_MS_CONSTRUCTION_REVIEW_COMPLETED_DATE AS 'MINOR_MS_CONSTRUCTION_REVIEW_COMPLETED_DATE',
			    MINOR_MS_RF_ACCEPT_RANKING_COMPLETED_DATE AS 'MINOR_MS_RF_ACCEPT_RANKING_COMPLETED_DATE',
			    MINOR_MS_TRANSPORT_REVIEW_COMPLETED_DATE AS 'MINOR_MS_TRANSPORT_REVIEW_COMPLETED_DATE',
			    MINOR_MS_CLOSEOUT_DOCUMENTS_UPLOAD_COMPLETED_DATE AS 'MINOR_MS_CLOSEOUT_DOCUMENTS_UPLOAD_COMPLETED_DATE',
			    MINOR_MS_PHOTO_DOCUMENTS_COMPLETED_DATE AS 'MINOR_MS_PHOTO_DOCUMENTS_COMPLETED_DATE',
			    MINOR_MS_CREATE_CQ_COMPLETED_DATE AS 'MINOR_MS_CREATE_CQ_COMPLETED_DATE',
			    MINOR_MS_CQ_EQUIPMENT_COMPLETED_DATE AS 'MINOR_MS_CQ_EQUIPMENT_COMPLETED_DATE',
			    MINOR_MS_IP_COMPLETE_COMPLETED_DATE AS 'MINOR_MS_IP_COMPLETE_COMPLETED_DATE',
			    MINOR_MS_READY_FOR_ASSURANCE_COMPLETED_DATE AS 'MINOR_MS_READY_FOR_ASSURANCE_COMPLETED_DATE',
			    MINOR_MS_RF_COMPLETE_DATE AS 'MINOR_MS_RF_COMPLETE_DATE',
			    MINOR_MS_SP_COMPLETE_COMPLETED_DATE AS 'MINOR_MS_SP_COMPLETE_COMPLETED_DATE',
			    MINOR_MS_TRANSPORT_COMPLETE_COMPLETED_DATE AS 'MINOR_MS_TRANSPORT_COMPLETE_COMPLETED_DATE',
			    MINOR_MS_CONSTRUCTION_READY_COMPLETED_DATE AS 'MINOR_MS_CONSTRUCTION_READY_COMPLETED_DATE',
			    MINOR_MS_PRE_TCN_COMPLETED_DATE AS 'MINOR_MS_PRE_TCN_COMPLETED_DATE',
			    MINOR_MS_CREATE_PROJECT_COMPLETED_DATE AS 'MINOR_MS_CREATE_PROJECT_COMPLETED_DATE',
			    MINOR_MS_CONFIRM_E911_ADDRESS_COMPLETED_DATE AS 'MINOR_MS_CONFIRM_E911_ADDRESS_COMPLETED_DATE',
			    MINOR_MS_CONFIRM_E911_SUBMITTED_COMPLETED_DATE AS 'MINOR_MS_CONFIRM_E911_SUBMITTED_COMPLETED_DATE',
			    MINOR_MS_CONFIRM_TVW_RECEIVED_COMPLETED_DATE AS 'MINOR_MS_CONFIRM_TVW_RECEIVED_COMPLETED_DATE',
			    MINOR_MS_EDGE_EQUIPMENT_CLOSEOUT_COMPLETED_DATE AS 'MINOR_MS_EDGE_EQUIPMENT_CLOSEOUT_COMPLETED_DATE',
			    MINOR_MS_EDGE_EQUIPMENT_INFORMATION_COMPLETED_DATE AS 'MINOR_MS_EDGE_EQUIPMENT_INFORMATION_COMPLETED_DATE',
			    MINOR_MS_EDGE_EQUIPMENT_INSTALL_COMPLETED_DATE AS 'MINOR_MS_EDGE_EQUIPMENT_INSTALL_COMPLETED_DATE',
			    MINOR_MS_EDGE_FUNDING_COMPLETED_DATE AS 'MINOR_MS_EDGE_FUNDING_COMPLETED_DATE',
			    MINOR_MS_EDGE_INTEGRATE_COMPLETED_DATE AS 'MINOR_MS_EDGE_INTEGRATE_COMPLETED_DATE',
			    MINOR_MS_EDGE_PROJECT_INFO_COMPLETED_DATE AS 'MINOR_MS_EDGE_PROJECT_INFO_COMPLETED_DATE',
			    MINOR_MS_EDGE_PSC_VETTING_COMPLETED_DATE AS 'MINOR_MS_EDGE_PSC_VETTING_COMPLETED_DATE',
			    MINOR_MS_EDGE_VENDOR_SERVICE_INSTALL_COMPLETED_DATE AS 'MINOR_MS_EDGE_VENDOR_SERVICE_INSTALL_COMPLETED_DATE',
			    MINOR_MS_ENVIRONMENTAL_REVIEW_COMPLETED_DATE AS 'MINOR_MS_ENVIRONMENTAL_REVIEW_COMPLETED_DATE',
			    MINOR_MS_GLOBAL_EHS_REVIEW_COMPLETED_DATE AS 'MINOR_MS_GLOBAL_EHS_REVIEW_COMPLETED_DATE',
			    MINOR_MS_TERRITORY_REVIEW_COMPLETED_DATE AS 'MINOR_MS_TERRITORY_REVIEW_COMPLETED_DATE',
			    MINOR_MS_TSDF_REVIEW_COMPLETED_DATE AS 'MINOR_MS_TSDF_REVIEW_COMPLETED_DATE',
			    MINOR_MS_BOM_COMPLETE_COMPLETED_DATE AS 'MINOR_MS_BOM_COMPLETE_COMPLETED_DATE',
			    MINOR_MS_EQUIPMENT_PROCUREMENT_COMPLETE_COMPLETED_DATE AS 'MINOR_MS_EQUIPMENT_PROCUREMENT_COMPLETE_COMPLETED_DATE',
			    MAJOR_MS_HUB_READY_COMPLETED_DATE AS 'MAJOR_MS_HUB_READY_COMPLETED_DATE',
			    MINOR_MS_INTEGRATION_COMPLETED_DATE AS 'MINOR_MS_INTEGRATION_COMPLETED_DATE',
			    MINOR_MS_LEASING_COMPLETED_DATE AS 'MINOR_MS_LEASING_COMPLETED_DATE',
			    MAJOR_MS_NETWORK_ASSURANCE_COMPLETED_DATE AS 'MAJOR_MS_NETWORK_ASSURANCE_COMPLETED_DATE',
			    MINOR_MS_PERMITTING_COMPLETED_DATE AS 'MINOR_MS_PERMITTING_COMPLETED_DATE',
			    MINOR_MS_CONSTRUCTION_FORM_COMPLETED_DATE AS 'MINOR_MS_CONSTRUCTION_FORM_COMPLETED_DATE',
			    MINOR_MS_ENV_CONST_CLOSEOUT_INFO_COMPLETED_DATE AS 'MINOR_MS_ENV_CONST_CLOSEOUT_INFO_COMPLETED_DATE',
			    MINOR_MS_POST_TCN_COMPLETED_DATE AS 'MINOR_MS_POST_TCN_COMPLETED_DATE',
			    MINOR_MS_RFE_MITIGATION_DOCS_COMPLETED_DATE AS 'MINOR_MS_RFE_MITIGATION_DOCS_COMPLETED_DATE',
			    MINOR_MS_POWER_COMPLETE_COMPLETED_DATE AS 'MINOR_MS_POWER_COMPLETE_COMPLETED_DATE',
		MINOR_MS_POWER_VETTING_COMPLETED_DATE AS 'MINOR_MS_POWER_VETTING_COMPLETED_DATE',
			    MINOR_MS_POWER_UTILITIES_TERMINATION_COMPLETED_DATE AS 'MINOR_MS_POWER_UTILITIES_TERMINATION_COMPLETED_DATE',
			    MINOR_MS_UTILITY_INFORMATION_COMPLETED_DATE AS 'MINOR_MS_UTILITY_INFORMATION_COMPLETED_DATE',
			    MINOR_MS_PSC_CONSTRUCTION_COMPLETED_DATE AS 'MINOR_MS_PSC_CONSTRUCTION_COMPLETED_DATE',
			    MINOR_MS_PSC_DESIGN_COMPLETED_DATE AS 'MINOR_MS_PSC_DESIGN_COMPLETED_DATE',
			    MINOR_MS_PSC_PRE_CONSTRUCTION_COMPLETED_DATE AS 'MINOR_MS_PSC_PRE_CONSTRUCTION_COMPLETED_DATE',
			    MINOR_MS_PSC_PROJ_DETAILS_COMPLETED_DATE AS 'MINOR_MS_PSC_PROJ_DETAILS_COMPLETED_DATE',
			    MINOR_MS_PSLC_FUNDING_COMPLETED_DATE AS 'MINOR_MS_PSLC_FUNDING_COMPLETED_DATE',
			    MAJOR_MS_REAL_ESTATE_COMPLETED_DATE AS 'MAJOR_MS_REAL_ESTATE_COMPLETED_DATE',
			    MINOR_MS_AM_FURTHER_STUDY_COMPLETED_DATE AS 'MINOR_MS_AM_FURTHER_STUDY_COMPLETED_DATE',
			    MINOR_MS_ASR_FORM_COMPLETED_DATE AS 'MINOR_MS_ASR_FORM_COMPLETED_DATE',
			    MINOR_MS_FAA_FORM_COMPLETED_DATE AS 'MINOR_MS_FAA_FORM_COMPLETED_DATE',
			    MINOR_MS_FULL_CONSTRUCTION_APPROVAL_COMPLETED_DATE AS 'MINOR_MS_FULL_CONSTRUCTION_APPROVAL_COMPLETED_DATE',
			    MINOR_MS_GROUND_ONLY_APPROVAL_COMPLETED_DATE AS 'MINOR_MS_GROUND_ONLY_APPROVAL_COMPLETED_DATE',
			    MINOR_MS_STRUCTURE_FORM_COMPLETED_DATE AS 'MINOR_MS_STRUCTURE_FORM_COMPLETED_DATE',
			    MINOR_MS_SUBMIT_FOR_NEPA_COMPLETED_DATE AS 'MINOR_MS_SUBMIT_FOR_NEPA_COMPLETED_DATE',
			    MINOR_MS_SURVEY_COMPLETED_DATE AS 'MINOR_MS_SURVEY_COMPLETED_DATE',
			    MINOR_MS_REGULATORY_DISMANTLEMENT_COMPLETED_DATE AS 'MINOR_MS_REGULATORY_DISMANTLEMENT_COMPLETED_DATE',
			    MINOR_MS_REGULATORY_INSERVICE_COMPLETED_DATE AS 'MINOR_MS_REGULATORY_INSERVICE_COMPLETED_DATE',
			    MINOR_MS_CARRIER_AGREEMENT_COMPLETED_DATE AS 'MINOR_MS_CARRIER_AGREEMENT_COMPLETED_DATE',
			    MINOR_MS_CREATE_RFDS_COMPLETED_DATE AS 'MINOR_MS_CREATE_RFDS_COMPLETED_DATE',
			    MINOR_MS_INSERVICE_DOCUMENTS_COMPLETED_DATE AS 'MINOR_MS_INSERVICE_DOCUMENTS_COMPLETED_DATE',
			    MINOR_MS_INTERNATIONAL_BORDER_COMPLETED_DATE AS 'MINOR_MS_INTERNATIONAL_BORDER_COMPLETED_DATE',
			    MINOR_MS_QUIET_ZONE_COMPLETED_DATE AS 'MINOR_MS_QUIET_ZONE_COMPLETED_DATE',
			    MINOR_MS_RFE_COMPLETED_DATE AS 'MINOR_MS_RFE_COMPLETED_DATE',
			    MINOR_MS_SUBMIT_RFDS_COMPLETED_DATE AS 'MINOR_MS_SUBMIT_RFDS_COMPLETED_DATE',
			    MINOR_MS_RFDS_IBV_COMPLETED_DATE AS 'MINOR_MS_RFDS_IBV_COMPLETED_DATE',
			    MINOR_MS_SELECT_VENDOR_COMPLETED_DATE AS 'MINOR_MS_SELECT_VENDOR_COMPLETED_DATE',
			    MINOR_MS_MICROWAVE_COMPLETED_DATE AS 'MINOR_MS_MICROWAVE_COMPLETED_DATE',
			    MINOR_MS_ONE_FIBER_COMPLETED_DATE AS 'MINOR_MS_ONE_FIBER_COMPLETED_DATE',
			    MINOR_MS_TRANSPORT_CONTRACT_COMPLETED_DATE AS 'MINOR_MS_TRANSPORT_CONTRACT_COMPLETED_DATE',
			    MINOR_MS_TRANSPORT_DELIVERY_COMPLETED_DATE AS 'MINOR_MS_TRANSPORT_DELIVERY_COMPLETED_DATE',
			    MINOR_MS_ZONING_COMPLETED_DATE AS 'MINOR_MS_ZONING_COMPLETED_DATE',
			    MINOR_MS_EQUIPMENT_COMPLETED_DATE AS 'MINOR_MS_EQUIPMENT_COMPLETED_DATE',
			    MAJOR_MS_PHYSICAL_CONSTRUCTION_COMPLETE_COMPLETED_DATE AS 'MAJOR_MS_PHYSICAL_CONSTRUCTION_COMPLETE_COMPLETED_DATE',
			    MAJOR_MS_TRANSPORT_COMPLETED_DATE AS 'MAJOR_MS_TRANSPORT_COMPLETED_DATE',
			    MINOR_MS_CONQUEST_COMPLETED_DATE as 'MINOR_MS_CONQUEST_COMPLETED_DATE',
			    MAJOR_MS_POWER_COMPLETED_DATE as 'MAJOR_MS_POWER_COMPLETED_DATE',
			    MINOR_MS_ENVIRONMENT_DUE_DILIGENCE_COMPLETED_DATE AS 'MINOR_MS_ENVIRONMENT_DUE_DILIGENCE_COMPLETED_DATE',
			    MINOR_MS_REGULATORY_COMPLETED_DATE AS 'MINOR_MS_REGULATORY_COMPLETED_DATE',
			    MINOR_MS_VCP_ORCHESTRATION_COMPLETED_DATE AS 'MINOR_MS_VCP_ORCHESTRATION_COMPLETED_DATE',
			    MAJOR_MS_RTC_COMPLETED_DATE AS 'MAJOR_MS_RTC_COMPLETED_DATE',
		MINOR_MS_CONSTRUCTION_48HR_REVIEW_COMPLETED_DATE AS 'MINOR_MS_CONSTRUCTION_48HR_REVIEW_COMPLETED_DATE',
				MINOR_MS_RF_48HR_REVIEW_COMPLETED_DATE AS 'MINOR_MS_RF_48HR_REVIEW_COMPLETED_DATE',
				MINOR_MS_BUILD_CONSTRUCTION_COMPLETE_COMPLETED_DATE AS 'MINOR_MS_BUILD_CONSTRUCTION_COMPLETE_COMPLETED_DATE',
				MINOR_MS_ENVIRONMENTAL_NOTICE_TO_CONTRACTOR_COMPLETED_DATE AS 'MINOR_MS_ENVIRONMENTAL_NOTICE_TO_CONTRACTOR_COMPLETED_DATE',
				MINOR_MS_REGULATORY_48HR_REVIEW_COMPLETED_DATE AS 'MINOR_MS_REGULATORY_48HR_REVIEW_COMPLETED_DATE',
				MINOR_MS_REGULATORY_CONSTRUCTION_SR_COMPLETED_DATE AS 'MINOR_MS_REGULATORY_CONSTRUCTION_SR_COMPLETED_DATE',
                MINOR_MS_VCP_FAR_EDGE_INSTALLATION_COMPLETED_DATE AS 'MINOR_MS_VCP_FAR_EDGE_INSTALLATION_COMPLETED_DATE',
                MINOR_MS_DC_DISCOVERY_COMPLETED_DATE AS 'MINOR_MS_DC_DISCOVERY_COMPLETED_DATE',
                MINOR_MS_FAR_EDGE_INSTANTIATION_COMPLETED_DATE AS 'MINOR_MS_FAR_EDGE_INSTANTIATION_COMPLETED_DATE',
                MINOR_MS_VDU_DAY_0_COMPLETE_COMPLETED_DATE AS 'MINOR_MS_VDU_DAY_0_COMPLETE_COMPLETED_DATE',
                MINOR_MS_VDU_DAY_1_COMPLETE_COMPLETED_DATE AS 'MINOR_MS_VDU_DAY_1_COMPLETE_COMPLETED_DATE',
                MINOR_MS_VDU_DEPLOY_READINESS_COMPLETED_DATE AS 'MINOR_MS_VDU_DEPLOY_READINESS_COMPLETED_DATE',
                MINOR_MS_VCP_SUBCLOUD_DEPLOYMENT_INITIATED_COMPLETED_DATE AS 'MINOR_MS_VCP_SUBCLOUD_DEPLOYMENT_INITIATED_COMPLETED_DATE'
			    ) )
			) PTWS1 on FTFC.FIELD_NAME = PTWS1.FIELD_NAME
			WHERE FTFC.FIELD_NAME IN (
				SELECT	MMM.DEPENDENT_FIELD FROM PROJ_MAJOR_MILESTONE_MAPPING MMM
				    inner join FUZE_TRACKER_FIELD_CONFIG FTFC on MMM.MAJOR_MILESTONE = FTFC.FIELD_NAME
				    where MMM.IS_MANDATORY in ('C','MC')
				    and FTFC.EDIT_RULE = 'CALCULATED_DATE'
				    and FTFC.workstep_name = milestoneName
			    )
			AND FTFC.MODULE = FIELD_LIST.MODULE
		    );
		 DBMS_OUTPUT.PUT_LINE('ELSE fieldsData::'|| fieldsData );
		END IF;
		IF(fieldsData IS NOT NULL) THEN
		   dataList := dataList || fieldsData;
		END IF;
		DBMS_OUTPUT.PUT_LINE('dataList'|| dataList );
	    END LOOP;
	    --hubReadychanges start
	   IF(milestoneName = 'HUB_READY')THEN
		BEGIN

		    /*
		    SELECT TRANSPORT_VENDOR,ELECTRIC_COMPLT_AC_DT INTO v_hubTransportVendor,powerCompltDt
		    FROM PROJ_DEPENDENT_PROJECTS PDP
		    INNER JOIN PROJ_ST_FIELDS_DATA STP ON STP.SITE_PROJECTS_ID = PDP.SITE_PROJECTS_ID
		    INNER JOIN PROJ_TRANSPORT_ATTRIBUTES PTA ON PTA.SITE_PROJECTS_ID = PDP.SITE_PROJECTS_ID
		    WHERE PDP.PARENT_SITE_PROJECTS_ID = siteProjectsId AND UPPER(PDP.DEPENDENCY_TYPE)='HUB_READY';
			*/

		    SELECT TRANSPORT_VENDOR INTO v_hubTransportVendor
		    FROM ENTITY_ASSOCIATION_MAP PDP
		    INNER JOIN PROJ_TRANSPORT_ATTRIBUTES PTA ON PTA.SITE_PROJECTS_ID = PDP.PARENT_ID
		    WHERE PDP.CHILD_ID = siteProjectsId AND UPPER(PDP.ASSOCIATION_SUB_TYPE)='HUB_READY';

		EXCEPTION WHEN NO_DATA_FOUND THEN
			v_hubTransportVendor := 'N/A';
		END;

			IF(v_hubTransportVendor = 'N/A')THEN
			BEGIN
				SELECT TRANSPORT_VENDOR into v_hubTransportVendor FROM PROJ_TRANSPORT_ATTRIBUTES WHERE SITE_PROJECTS_ID= siteProjectsId;

			EXCEPTION WHEN NO_DATA_FOUND THEN
				v_hubTransportVendor := 'N/A';
			END;
			END IF;
		dataList := dataList || '"Hub Transport Vendor":"' || v_hubTransportVendor || '"';
		DBMS_OUTPUT.PUT_LINE('Hub_REAdy :: '|| dataList );
	    END IF;
		--hubReadychanges end

		--TransportM Enhancement
	   /* IF(milestoneName = 'TRANSPORT')THEN
		BEGIN
		    SELECT TRANSPORT_TYPE INTO v_transportType
			FROM PROJ_TRANSPORT_ATTRIBUTES PTA
			WHERE PTA.SITE_PROJECTS_ID = siteProjectsId;
		EXCEPTION WHEN NO_DATA_FOUND THEN
		    v_hubTransportVendor := 'N/A';
		    powerCompltDt := null;
		END;
		dataList := dataList || '"Transport Type":"' || v_transportType || '"';
		DBMS_OUTPUT.PUT_LINE('Hub_REAdy :: '|| dataList );
	    END IF; */

	     DBMS_OUTPUT.PUT_LINE(dataList);
	    preReq := preReq || '"' || milestoneName || '":{' || RTRIM(dataList,',') || '},';
       --  END LOOP;
    END IF;
    preReq := '{' || RTRIM(preReq,',') || '}';
    --DBMS_OUTPUT.PUT_LINE('preReq : '||preReq);
    RETURN preReq;
END;



Please explain above function line by line?

ChatGPT
Sure, let's break down the provided PL/SQL function FUNC_PROJ_PRE_REQ:

CREATE OR REPLACE FUNCTION "FUNC_PROJ_PRE_REQ" (siteProjectsId NUMBER, milestoneName VARCHAR2) RETURN CLOB AS: This line defines the function named FUNC_PROJ_PRE_REQ which takes two parameters siteProjectsId of type NUMBER and milestoneName of type VARCHAR2, and returns a CLOB data type.

preReq CLOB; v_check VARCHAR2(32); v_bool Boolean; v_dismantlement VARCHAR2(32); v_whereClause VARCHAR2(64); v_query CLOB; tableName VARCHAR2(1024); dataList CLOB; fieldsData CLOB; powerCompltDt VARCHAR2(64); v_hubTransportVendor VARCHAR2(32);: Declarations of various variables used within the function.

The BEGIN keyword marks the beginning of the main block of the function.

BEGIN: This marks the beginning of a nested block within the main block.

SELECT CASE WHEN SP.TYPE = 'Modification' AND (PAI.PROJ_MOD_TYPE IS NULL OR PAI.PROJ_MOD_TYPE IN ('DISMANTLEMENT')) THEN 'false' ELSE 'true' END INTO v_dismantlement FROM SITE_PROJECTS SP INNER JOIN PROJ_ADDITIONAL_INFO PAI ON PAI.SITE_PROJECTS_ID = SP.SITE_PROJECTS_ID AND SP.SITE_PROJECTS_ID = siteProjectsId;: This SQL query selects the value of v_dismantlement based on conditions from the tables SITE_PROJECTS and PROJ_ADDITIONAL_INFO.

EXCEPTION WHEN NO_DATA_FOUND THEN v_dismantlement := 'false';: If no data is found in the previous query, it sets v_dismantlement to 'false'.

END;: Marks the end of the nested block.

IF(v_dismantlement = 'true') THEN: Begins an IF condition based on the value of v_dismantlement.

dataList := NULL;: Initializes the dataList variable.

Nested loops and conditional statements follow, executing dynamic SQL queries based on certain conditions and constructing dataList accordingly.

Various SQL queries are executed using EXECUTE IMMEDIATE to fetch data dynamically based on the provided siteProjectsId and milestoneName.

Data retrieved from the queries is concatenated into the dataList.

Additional logic specific to certain milestones, like HUB_READY, is implemented.

Finally, preReq is constructed as a JSON string containing milestone data fetched from the database.

The constructed preReq is returned as the output of the function.

The function ends with END; END; marking the end of the main block and the function declaration.



User
In above function where should I add the prerequisite data  ? Give me exact line

2 / 2


ChatGPT
To add the prerequisite data to the dataList, you should add it within the nested loops where the dynamic SQL queries are executed and the dataList is being constructed. Specifically, you should add the prerequisite data after the SQL queries fetch the required information.

Based on the provided function, you should add the prerequisite data right after the fieldsData is fetched from the dynamic SQL queries. So, you should add it after the lines:

sql
Copy code
EXECUTE IMMEDIATE v_query into fieldsData;
DBMS_OUTPUT.PUT_LINE('IF fieldsData::'|| fieldsData );
You can add the prerequisite data right after these lines using the dataList variable. For example:

sql
Copy code
IF(fieldsData IS NOT NULL) THEN
   dataList := dataList || fieldsData || ','; -- Adding fetched data to dataList
   -- Add prerequisite data here
END IF;
This ensures that the prerequisite data is added to the dataList along with the fetched data from the database before it is returned.


2 / 2



User
Milestone is 'REGULATORY' for that milestone Prerequisite data is  : SURVEY, STRUCTURE_FORM,FAA,ASR,AM  Now give me complete updated function  what other info needed for prerequisite 

4 / 4


ChatGPT
To integrate the prerequisite data for the 'REGULATORY' milestone into the provided function, we'll need to add the logic to fetch the required information for the specified fields ('SURVEY', 'STRUCTURE_FORM', 'FAA', 'ASR', 'AM') from the database. Here's the complete updated function:

sql
Copy code
CREATE OR REPLACE FUNCTION "FUNC_PROJ_PRE_REQ" (siteProjectsId NUMBER, milestoneName VARCHAR2)
RETURN CLOB
AS
    preReq CLOB;
    v_dismantlement VARCHAR2(32);
    v_whereClause VARCHAR2(64);
    v_query CLOB;
    dataList CLOB;
    fieldsData CLOB;
BEGIN
    BEGIN
        SELECT CASE WHEN SP.TYPE = 'Modification' AND (PAI.PROJ_MOD_TYPE IS NULL OR PAI.PROJ_MOD_TYPE IN ('DISMANTLEMENT')) THEN 'false' ELSE 'true' END INTO v_dismantlement
        FROM SITE_PROJECTS SP
        INNER JOIN PROJ_ADDITIONAL_INFO PAI ON PAI.SITE_PROJECTS_ID = SP.SITE_PROJECTS_ID
        AND SP.SITE_PROJECTS_ID = siteProjectsId;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            v_dismantlement := 'false';
    END;

    IF(v_dismantlement = 'true') THEN
        dataList := NULL;
        FOR FIELD_LIST IN (
            SELECT MODULE, TABLE_NAME,
                dbms_xmlgen.convert(
                    RTRIM(
                        XMLAGG(
                            XMLELEMENT(E, D, '||'',''' || ',')
                        ).EXTRACT('E/text()').getCLOBVal(), '||'
                    ),
                    1
                ) AS fields
            FROM (
                SELECT MODULE, TABLE_NAME,
                    CASE
                        WHEN TABLE_NAME = 'VDU_ORCHESTRATION' AND FIELD_NAME != 'VCP_FE_INSTALLATION_AC_DT' THEN '''"' || TITLE || '":"''' || ' || CASE WHEN COUNT(' || FIELD_NAME || ') = COUNT(*) THEN TO_CHAR(MAX(' || FIELD_NAME || '),''MM/DD/RRRR'') ELSE '''' END || ' || '''"'''
                        WHEN TABLE_NAME = 'VDU_ORCHESTRATION' AND FIELD_NAME = 'VCP_FE_INSTALLATION_AC_DT' THEN '''"' || TITLE || '":"''' || '||CASE WHEN COUNT(' || FIELD_NAME || ') = COUNT(*) THEN TO_CHAR(MAX(TO_DATE(' || FIELD_NAME || ',''MM/DD/RRRR'')),''MM/DD/RRRR'') ELSE '''' END || ' || '''"'''
                        ELSE '''"' || TITLE || '":"''' || '||' || FIELD_NAME || '||' || '''"'''
                    END AS D
                FROM FUZE_TRACKER_FIELD_CONFIG FTFC
                WHERE FIELD_NAME IN (
                    SELECT MMM.DEPENDENT_FIELD
                    FROM PROJ_MAJOR_MILESTONE_MAPPING MMM
                    INNER JOIN FUZE_TRACKER_FIELD_CONFIG FTFC ON MMM.MAJOR_MILESTONE = FTFC.FIELD_NAME
                    WHERE MMM.IS_MANDATORY IN ('C', 'MC', 'VDU')
                    AND FTFC.EDIT_RULE = 'CALCULATED_DATE'
                    AND FTFC.WORKSTEP_NAME = milestoneName
                )
            ) T
            GROUP BY MODULE, TABLE_NAME
        ) LOOP
            IF(FIELD_LIST.TABLE_NAME = 'SPM_PROJECT_TRACKER') THEN
                v_whereClause := 'FUZE_PROJECT_ID';
            ELSE
                v_whereClause := 'SITE_PROJECTS_ID';
            END IF;

            IF (FIELD_LIST.TABLE_NAME NOT IN ('PROJECT_TRACKER_WORKSTEP_STATUS', 'VDU_ORCHESTRATION')) THEN
                v_query := 'SELECT ' || TO_CHAR(FIELD_LIST.fields) || '
                            FROM SITE_PROJECTS SP
                            LEFT OUTER JOIN ' || FIELD_LIST.TABLE_NAME || ' T ON T.' || v_whereClause || ' = SP.SITE_PROJECTS_ID
                            WHERE SP.SITE_PROJECTS_ID = ' || siteProjectsId;

                EXECUTE IMMEDIATE v_query INTO fieldsData;
            ELSIF (FIELD_LIST.TABLE_NAME = 'VDU_ORCHESTRATION') THEN
                v_query := 'SELECT ' || TO_CHAR(FIELD_LIST.fields) || '
                            FROM SITE_PROJECTS SP
                            LEFT OUTER JOIN ' || FIELD_LIST.TABLE_NAME || ' T ON T.' || v_whereClause || ' = SP.SITE_PROJECTS_ID
                            AND VRAN_ORCHESTRATION_PATH = ''FULL_ORCHESTRATION''
                            WHERE SP.SITE_PROJECTS_ID = ' || siteProjectsId;

                EXECUTE IMMEDIATE v_query INTO fieldsData;
            ELSE
                SELECT dbms_xmlgen.convert(
                        XMLAGG(XMLELEMENT(E, FLDDATA, ',')).EXTRACT('E/text()').getCLOBVal(),
                        1
                    )
                INTO fieldsData
                FROM (
                    SELECT '"' || FTFC.TITLE || '":"' || PTWS1.COMPLETED_DATE || '"' AS FLDDATA
                    FROM FUZE_TRACKER_FIELD_CONFIG FTFC
                    INNER JOIN (
                        SELECT *
                        FROM (
                            SELECT
                                MAJOR_MS_CANDIDATE_SELECTION_COMPLETED_DATE, MAJOR_MS_ACTIVATION_COMPLETED_DATE,
                                MINOR_MS_ACTIVATION_NON_RF_COMPLETED_DATE, MINOR_MS_AE_COMPLETED_DATE,
                                MINOR_MS_CANDIDATE_ACCEPTED_COMPLETED_DATE, MINOR_MS_CANDIDATE_SUBMITTED_COMPLETED_DATE,
                                MINOR_MS_CONSTRUCTION_REVIEW_COMPLETED_DATE, MINOR_MS_RF_ACCEPT_RANKING_COMPLETED_DATE,
                                MINOR_MS_TRANSPORT_REVIEW_COMPLETED_DATE, MINOR_MS_CLOSEOUT_DOCUMENTS_UPLOAD_COMPLETED_DATE,
                                MINOR_MS_PHOTO_DOCUMENTS_COMPLETED_DATE, MINOR_MS_CREATE_CQ_COMPLETED_DATE,
                                MINOR_MS_CQ_EQUIPMENT_COMPLETED_DATE, MINOR_MS_IP_COMPLETE_COMPLETED_DATE,
                                MINOR_MS_READY_FOR_ASSURANCE_COMPLETED_DATE, MINOR_MS_RF_COMPLETE_DATE,
                                MINOR_MS_SP_COMPLETE_COMPLETED_DATE, MINOR_MS_TRANSPORT_COMPLETE_COMPLETED_DATE,
                                MINOR_MS_CONSTRUCTION_READY_COMPLETED_DATE, MINOR_MS_PRE_TCN_COMPLETED_DATE,
                                MINOR_MS_CREATE_PROJECT_COMPLETED_DATE,
                                MINOR_MS_CONFIRM_E911_ADDRESS_COMPLETED_DATE, MINOR_MS_CONFIRM_E911_SUBMITTED_COMPLETED_DATE,
                                MINOR_MS_CONFIRM_TVW_RECEIVED_COMPLETED_DATE, MINOR_MS_EDGE_EQUIPMENT_CLOSEOUT_COMPLETED_DATE,
                                MINOR_MS_EDGE_EQUIPMENT_INFORMATION_COMPLETED_DATE, MINOR_MS_EDGE_EQUIPMENT_INSTALL_COMPLETED_DATE,
                                MINOR_MS_EDGE_FUNDING_COMPLETED_DATE, MINOR_MS_EDGE_INTEGRATE_COMPLETED_DATE,
                                MINOR_MS_EDGE_PROJECT_INFO_COMPLETED_DATE, MINOR_MS_EDGE_PSC_VETTING_COMPLETED_DATE,
                                MINOR_MS_EDGE_VENDOR_SERVICE_INSTALL_COMPLETED_DATE, MINOR_MS_ENVIRONMENTAL_REVIEW_COMPLETED_DATE,
                                MINOR_MS_GLOBAL_EHS_REVIEW_COMPLETED_DATE, MINOR_MS_TERRITORY_REVIEW_COMPLETED_DATE,
                                MINOR_MS_TSDF_REVIEW_COMPLETED_DATE, MIN

14 / 14





Message ChatGPT…

ChatGPT can make mistakes. Consider checking important information.
Function to fetch milestone data




import org.springframework.web.bind.annotation.*;
import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;
import io.swagger.v3.oas.annotations.*;
import java.util.List;
import org.slf4j.*;

@RestController
public class ProjectController {

    private static final Logger logger = LoggerFactory.getLogger(ProjectController.class);

    @Autowired
    private ProjectService projectService;

    @RequestMapping(value = "/getProjectDetails", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
    @Operation(summary = "Returns additional details of a project", description = "Projects Service")
    @ApiResponse(responseCode = "200", description = "SUCCESS", content = {@Content(mediaType = "application/json", schema = @Schema(implementation = ProjectDetails.class))})
    @ResponseStatus(HttpStatus.OK)
    public ProjectDetails getProjectDetails(@RequestHeader("user") String userJSON, @RequestParam("projectId") String projectId) throws Exception {
        final User user = userInfoService.getUserInfo();
        logger.info("PROJECTS-SERVICE: Inside {}, Called by {} with Parameter {}", Thread.currentThread().getStackTrace()[1].getMethodName(), user, projectId);

        return projectService.getProjectDetails(projectId);
    }
}

