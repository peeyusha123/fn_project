
	    loadCallSignDetails: function(response, callSignId){
	    	var title;

	    	if (response && response.length !== 0) {
	    		var templateHeader = this.dom.body.find(".international-table-header-template").html();
	    		if (callSignId === "band700m") {
	    			title = "700 Mhz"
	    		} else if (callSignId === "band850m") {
	    			title = "850 Mhz"
	    		} else if (callSignId === "band1900m") {
	    			title = "1900 Mhz"
	    		} else if (callSignId === "band2100m") {
	    			title = "2100 Mhz"
	    		}else if (callSignId === "cband") {
	    			title = "C-BAND";
	    		}
	    		
	    		var doc_check;
				var optionSelectedYes = $(this.dom.body).find("#signalextend-yes");
				var optionSelectedNo  = $(this.dom.body).find("#signalextend-no");
					
				doc_check = optionSelectedYes.prop("checked")?"AGREEMENT":optionSelectedNo.prop("checked")?"NOTIFICATION":false;					
				
	    		
	    		var tableHeader = templateHeader.replace(/@BANDWIDTH/g, title).replace(/@ID/g, callSignId).replace(/@VZREGSERVICE/g, response[0].vzRegService).replace(/@DOC_CHECK/g, (doc_check?doc_check:"")).replace(/@DOC_CATEGORY/g, title.replace(" Mhz", ""));
	    		// $.each(response, function(i, data) {
	    		// tableModifiedHeader = tableHeader.replace(/@VZREGSERVICE/g,
				// data.vzRegService);
	    		// });
	    		
	    		this.dom.body.find(".international-callsign-tables").append(tableHeader);
	    		let tableId = this.dom.body.find("#" + callSignId + "-international-colnames");
	    		let columns = this.getCallsignsColumns(false); // don't hide
																// last 2 cols
	    		

	    		createKendoGrid(tableId, columns, response);

	    		if (callSignId === "band700m") {
	    			if (response[0].intlBorderExtendsFor700Mhz === 'Yes') {
	    				this.appendFccRadioValues(".band700m", true, false);
	    			} else {
	    				this.appendFccRadioValues(".band700m", false, true);
	    			}
	    		} else if (callSignId === "band850m") {
	    			if (response[0].intlBorderExtendsForCellular === 'Yes') {
	    				this.appendFccRadioValues(".band850m", true, false);
	    			} else {
	    				this.appendFccRadioValues(".band850m", false, true);
	    			}
	    		} else if (callSignId === "band1900m") {
	    			if (response[0].intlBorderExtendsForPCS === 'Yes') {
	    				this.appendFccRadioValues(".band1900m", true, false);
	    			} else {
	    				this.appendFccRadioValues(".band1900m", false, true);
	    			}
	    		} else if (callSignId === "band2100m") {
	    			if (response[0].intlBorderExtendsForAWS === 'Yes') {
	    				this.appendFccRadioValues(".band2100m", true, false);
	    			} else {
	    				this.appendFccRadioValues(".band2100m", false, true);
	    			}
	    		}
				else if (callSignId === "cband") {
	    			if (response[0].intlBorderExtendsForCBand === 'Yes') {
	    				this.appendFccRadioValues(".cband", true, false);
	    			} else {
	    				this.appendFccRadioValues(".cband", false, true);
	    			}
	    		}
	    	} else {
	    		console.info("No Callsigns");
	    	}
	    },

	    appendFccRadioValues: function(className, value1, value2) {
	    	this.dom.body.find(className + "-yes").prop("checked", value1);
	    	this.dom.body.find(className + "-no").prop("checked", value2);
			this.dom.body.find(".fcc-radio").off('change').on('change', $.proxy(this.changeFccRadio, this));
	    },

	    getBasData: function() {
	    	var callSignsReq = {};
	    	callSignsReq.refType = "AWS";
	    	callSignsReq.searchKey = this.dom.projectId;
	    	this.getCallSignsWrap(callSignsReq);
	    },

	    loadAWSCallsigns: function(response, i){

	    	if(i === "band2100m" && response !== null && response !== undefined){
	    		let columns = this.getCallsignsColumns(true);
	    		
	    		// grid should only contain rows where freqBandCode === "A"
	    		response = response.filter(data => data.freqBandCode === "A");

	    		// perform the following logic for each row in the response
	    		response.forEach(data => {
	    			this.dom.body.find("#bas-market").val(data.basMarket);
	    			this.basMarketShow();
	    			this.dom.body.find("#signalextend-" + data.isSiteWithinBasRange).prop("checked", true);
	    			this.dom.body.find(".bas-doc-upload").addClass("hide");
	    			if (this.dom.body.find("#signalextend-" + data.isSiteWithinBasRange).val() === "Yes") {
	    				this.dom.body.find(".bas-doc-upload").removeClass("hide");
	    			}
	    		});
	    		createKendoGrid("#bas-review-callsigns-table", columns, response);
	    	}
	    },
	    
	    getCallsignsColumns: function(extraColumns){
	    	return [{
	    		field: "callSigns", 
	    		title: "Callsigns",
	    		media: "(min-width: 768px)"
	    	}, {
	    		field: "freqBandCode", 
	    		title: "Block",
	    		media: "(min-width: 768px)"
	    	},{
	    		field: "entityName", 
	    		title: "Licensee Name",
	    		media: "(min-width: 768px)"
	    	},{
	    		field: "whollyOwned", 
	    		title: "Wholly Owned",
	    		media: "(min-width: 768px)"
	    	},{
	    		field: "maxErp", 
	    		title: "ERP",
	    		media: "(min-width: 768px)"
	    	}, {
	    		field: "freqRange1", 
	    		title: "Freq Range 1",
	    		media: "(min-width: 768px)"
	    	}, {
	    		field: "freqRange2", 
	    		title: "Freq Range 2",
	    		media: "(min-width: 768px)"
	    	}, {
	    		field: "freqRange3", 
	    		title: "Freq Range 3",
	    		media: "(min-width: 768px)"
	    	}, {
	    		field: "freqRange4", 
	    		title: "Freq Range 4",
	    		media: "(min-width: 768px)"
	    	}, {
	    		field: "borderDistance", 
	    		title: "Border Distance(mi)",
	    		hidden: extraColumns,
	    		media: "(min-width: 768px)"
	    	}, {
	    		field: "country", 
	    		title: "Country", 
	    		hidden: extraColumns,
	    		media: "(min-width: 768px)"
	    	}, {
	    		template: kendo.template(this.dom.body.find("#intl-callsigns-responsive-grid-template").html()),
	    		media: "(max-width: 767px)"
	    	}];
	    },

	    basMarketShow: function() {
	    	this.dom.body.find(".bas-market-data").empty();
	    	var val = this.dom.body.find("#bas-market").val();
	    	if (val !== "" && val !== undefined) {
	    		this.dom.body.find(".bas-market-data").append($("." + val).html());
	    	}
	    },

	    updateRfdsCallSigns: function(rfdsCallSigns, callback) {
	    	this.constructor.ajax.fireApi(rfdsCallSigns, "project", "updateRfdsCallSigns", (response)=> {
	    		if (callback) {
	    			callback();
	    		}
	    	});
	    },

	    getCarrierAgreementTypes: function(callback) {
	    	this.constructor.ajax.fireMetaServiceAPI("project", "project", "getCarrierAgreementTypes", (response)=> {
	    		carrierAgreementReportType = response;
	    		this.dom.body.find("#doc-report-type-list").empty();
	    		this.dom.body.find("#doc-report-type-list").append($("<option></option>").prop("value", "").text("Nothing Selected").prop('selected', 'true'));
	    		$.each(response, (i, data)=> {
	    			if (data !== null && data !== undefined && i !== 'CONTOUR_EXTENSION_BEYOND_40') {
	    				this.dom.body.find("#doc-report-type-list").append($("<option></option>").prop("value", i).text(data));
	    			}
	    		});
	    		if (callback) {
	    			callback(response);
	    		}
	    	});
	    },



	    displayExtensionAgreement: function(reportType, isReportRequired, callsigns) {
	    	var cgsaCallsigns = this.dom.body.find("#callsign-list-CONTOUR_EXTENSION_BEYOND_40").val();
	    	var template = this.dom.body.find(".carrier-agreement-template").html();
	    	this.dom.body.find(".carrier-agreements-select-block").find('#' + reportType).find(".carrier-agreements-selected-block").empty();
	    	if (isReportRequired === "Yes") {
	    		if (cgsaCallsigns === null) {
	    			this.dom.body.find('#' + reportType + '_Yes').prop('checked', false);
	    			this.dom.body.find('#' + reportType + '_No').prop('checked', true);
	    			displayError("Error", "Please select callsigns for CGSA Border");
	    			return false;
	    		}
	    		this.dom.body.find(".carrier-agreements-select-block").find('#' + reportType).find(".carrier-agreements-selected-block").append(template.replace(/@REPORT_TYPE_VAL/g, reportType));
	    		this.dom.body.find("#callsign-list-" + reportType).empty();
	    		if(cgsaCallsigns !== undefined && cgsaCallsigns !== null){
	    			if (cgsaCallsigns.length >1) {
	    				$.each(cgsaCallsigns, (i, data)=> {
	    					this.dom.body.find("#callsign-list-EXTENSION_AGREEMENT").append($("<option></option>").prop("value", data).text(callSignFrequency[data]));
	    				});
	    			}else{
	    				this.dom.body.find("#callsign-list-EXTENSION_AGREEMENT").append($("<option></option>").prop("value", cgsaCallsigns).text(callSignFrequency[cgsaCallsigns]));
	    			}
	    	    	this.dom.body.find(".carrier-agrmt-callsign-list").off('change').on('change', $.proxy(this.changeCarrierAgrmtCallsignList, this));
	    		}	
	    		if (callsigns !== undefined && callsigns !== null) {
	    			this.dom.body.find("#callsign-list-" + reportType).val(callsigns.split(","));
	    		}
	    		this.dom.body.find("#callsign-list-" + reportType).selectpicker('refresh');
	    	}
	    },

	    displayContourExtension: function(reportType, isReportRequired, callsigns) {
	    	var cgsaCallsigns = this.dom.body.find("#callsign-list-CONTOUR_EXTENSION_INTO_UNLICENSED_AREA").val();
	    	var template = this.dom.body.find(".carrier-agreement-template").html();
	    	this.dom.body.find(".carrier-agreements-select-block").find('#' + reportType).find(".carrier-agreements-selected-block").empty();
	    	if (isReportRequired === "Yes") {
	    		this.dom.body.find("#EXTENSION_AGREEMENT").removeClass('hide');
	    		if (cgsaCallsigns === null) {
	    			this.dom.body.find('#' + reportType + '_Yes').prop('checked', false);
	    			this.dom.body.find('#' + reportType + '_No').prop('checked', true);
	    			displayError("Error", "Please select callsigns for CGSA Border");
	    			return false;
	    		}
	    		$(".carrier-agreements-select-block").find('#' + reportType).find(".carrier-agreements-selected-block").append(template.replace(/@REPORT_TYPE_VAL/g, reportType));
	    		this.dom.body.find("#callsign-list-" + reportType).empty();
	    		if(cgsaCallsigns !== undefined && cgsaCallsigns !== null){
	    			if (cgsaCallsigns.length >1) {
	    				$.each(cgsaCallsigns, (i, data)=> {
	    					this.dom.body.find("#callsign-list-CONTOUR_EXTENSION_BEYOND_40").append($("<option></option>").prop("value", data).text(callSignFrequency[data]));
	    				});
	    			}else{
	    				this.dom.body.find("#callsign-list-CONTOUR_EXTENSION_BEYOND_40").append($("<option></option>").prop("value", cgsaCallsigns).text(callSignFrequency[cgsaCallsigns]));
	    			}
			    	this.dom.body.find(".carrier-agrmt-callsign-list").off('change').on('change', $.proxy(this.changeCarrierAgrmtCallsignList, this));
	    		}
	    		if (callsigns !== undefined && callsigns !== null) {
	    			this.dom.body.find("#callsign-list-" + reportType).val(callsigns.split(","));
	    		}
	    		this.dom.body.find("#callsign-list-" + reportType).selectpicker('refresh');
	    	}else{
	    		this.dom.body.find("#EXTENSION_AGREEMENT").addClass('hide');
	    	}
	    },

	    addCallSigns: function(reportType, isReportRequired, callsigns, action) {
	    	var self =rfdsModule;
	    	var template = self.dom.body.find(".carrier-agreement-template").html();
	    	self.dom.body.find(".carrier-agreements-select-block").find('#' + reportType).find(".carrier-agreements-selected-block").empty();

	    	if (isReportRequired === "Yes") {
	    		if(reportType !== "CONTOUR_EXTENSION_INTO_UNLICENSED_AREA"){
	    			self.dom.body.find(".carrier-agreements-select-block").find('#' + reportType).find(".carrier-agreements-selected-block").append(template.replace(/@REPORT_TYPE_VAL/g, reportType));
	    		}else{
	    			console.log("The Report Type is CONTOUR_EXTENSION_INTO_UNLICENSED_AREA")
	    		}
	    	}else {

	    		if(reportType === "CONTOUR_EXTENSION_INTO_UNLICENSED_AREA" &&  isReportRequired === "No"){

	    			self.dom.body.find("#CONTOUR_EXTENSION_BEYOND_40").removeClass('hide');

	    			self.dom.body.find(".carrier-agreements-select-block").find('#' + reportType).find(".carrier-agreements-selected-block").append(template.replace(/@REPORT_TYPE_VAL/g, reportType));
	    		}else{
	    			console.log("The Report Type is not CONTOUR_EXTENSION_INTO_UNLICENSED_AREA")
	    		}
	    		if(reportType === "CONTOUR_EXTENSION_BEYOND_40") {
	    			self.dom.body.find("#EXTENSION_AGREEMENT_No").prop("checked",false);
	    			self.dom.body.find("#EXTENSION_AGREEMENT").addClass('hide')
	    		}
	    	}
	    	self.getProjCallSignsCommon(reportType, isReportRequired, callsigns, action);

	    },

	    getProjCallSignsCommon: function(reportType, isReportRequired, callsigns, action){
	    	var carrierAgreementsContainer = this.dom.body.find(".carrier-agreements-select-block");
	    	this.dom.body.find("#callsign-list-" + reportType).empty();
	    	this.getProjCallSigns(reportType, (response)=> {
	    		if (!jQuery.isEmptyObject(response)) {
	    			$.each(response, (i, data)=> {
	    				if (data !== null && data !== undefined) {
	    					this.dom.body.find("#callsign-list-" + reportType).append($("<option></option>").prop("value", i).text(data));
	    				}
	    			});
	    	    	this.dom.body.find(".carrier-agrmt-callsign-list").off('change').on('change', $.proxy(this.changeCarrierAgrmtCallsignList, this));
	    			if (callsigns !== undefined && callsigns !== null) {
	    				this.dom.body.find("#callsign-list-" + reportType).val(callsigns.split(","));
	    			}
	    			this.dom.body.find("#callsign-list-" + reportType).selectpicker('refresh');
	    			if (isReportRequired === "Yes" || isReportRequired === "" || isReportRequired === undefined){
	    				reportType === "CONTOUR_EXTENSION_INTO_UNLICENSED_AREA" ? this.dom.body.find("#CONTOUR_EXTENSION_BEYOND_40, #EXTENSION_AGREEMENT").addClass('hide') : "";
	    			}else{
	    				reportType === "CONTOUR_EXTENSION_INTO_UNLICENSED_AREA" ? this.dom.body.find("#CONTOUR_EXTENSION_BEYOND_40").removeClass('hide') : "";
	    			}
	    			if (reportType === "CONTOUR_EXTENSION_INTO_UNLICENSED_AREA" && isReportRequired === "Yes") {
	    				this.dom.body.find('#CONTOUR_EXTENSION_BEYOND_40_No').prop('checked', true);
	    				this.dom.body.find('#CONTOUR_EXTENSION_BEYOND_40_Yes').prop('checked', false);
	    				this.dom.body.find('#EXTENSION_AGREEMENT_No').prop('checked', true);
	    				this.dom.body.find('#EXTENSION_AGREEMENT_Yes').prop('checked', false);
	    				this.dom.body.find("#callsign-list-CONTOUR_EXTENSION_BEYOND_40, #callsign-list-EXTENSION_AGREEMENT").empty();
	    				this.dom.body.find("#callsign-list-CONTOUR_EXTENSION_BEYOND_40, #callsign-list-EXTENSION_AGREEMENT").change();

	    			}else {
	    				console.log("850 callsigns are going as no");
	    			}
	    		} else {
	    			reportType === "CONTOUR_EXTENSION_INTO_UNLICENSED_AREA" ? this.dom.body.find("#CONTOUR_EXTENSION_BEYOND_40, #EXTENSION_AGREEMENT").addClass('hide') : "";
	    			reportType === "CONTOUR_EXTENSION_BEYOND_40" ? this.dom.body.find("#EXTENSION_AGREEMENT").removeClass('hide') : "";
	    			this.dom.body.find(".carrier-agreements-select-block").find('#' + reportType).find(".carrier-agreements-selected-block").empty();

	    			if (reportType === "CONTOUR_EXTENSION_INTO_UNLICENSED_AREA") {
	    				
	    				carrierAgreementsContainer.find("#CONTOUR_EXTENSION_INTO_UNLICENSED_AREA").attr("data-850-callsigns", "No");
	    				$('#CONTOUR_EXTENSION_INTO_UNLICENSED_AREA_No, #CONTOUR_EXTENSION_INTO_UNLICENSED_AREA_Yes, #CONTOUR_EXTENSION_BEYOND_40_No, #CONTOUR_EXTENSION_BEYOND_40_Yes, #EXTENSION_AGREEMENT_No, #EXTENSION_AGREEMENT_Yes').prop('checked', false);
	    				$("#callsign-list-CONTOUR_EXTENSION_INTO_UNLICENSED_AREA, #callsign-list-CONTOUR_EXTENSION_BEYOND_40, #callsign-list-EXTENSION_AGREEMENT").empty();
	    				$("#callsign-list-CONTOUR_EXTENSION_INTO_UNLICENSED_AREA, #callsign-list-CONTOUR_EXTENSION_BEYOND_40, #callsign-list-EXTENSION_AGREEMENT").change();

	    				// Delay in setting the dom
	    				setTimeout(()=> {
	    					this.dom.body.find('#CONTOUR_EXTENSION_INTO_UNLICENSED_AREA').addClass('hide');
	    					this.dom.body.find('#CONTOUR_EXTENSION_INTO_UNLICENSED_AREA, #CONTOUR_EXTENSION_BEYOND_40, #EXTENSION_AGREEMENT').removeClass("mandatory_label_before");
	    					if(action && action === "CHANGE" && isReportRequired === "Yes" ){ //NTSCE-10311
								this.mergeProjCarrierAgreementDetails(reportType , displayMessage("No CallSigns Available for "+ reportType));
							}else{
								this.mergeProjCarrierAgreementDetails(reportType);
							}
	    				}, 100);

	    			}else {

	    				this.dom.body.find('#' + reportType + '_No').prop('checked', true);

	    				// Delay in setting the dom
	    				setTimeout(()=> {
							if(action && action === "CHANGE" && isReportRequired === "Yes" ){ //NTSCE-10311
								this.mergeProjCarrierAgreementDetails(reportType , displayMessage("No CallSigns Available for"+ reportType));
							}else{
								this.mergeProjCarrierAgreementDetails(reportType);
							}
	    				}, 100);


	    			}
	    			this.dom.body.find('#' + reportType + '_Yes').prop('checked', false);
	    		}
	    	});
	    },

	    getProjCallSigns: function(reportType, callback) {
	    	var projectSearchRequest = {};
	    	projectSearchRequest.siteProjectsId = this.dom.projectId;
	    	projectSearchRequest.searchKey = reportType;
	    	this.constructor.ajax.fireApi(projectSearchRequest, "project", "getProjCallSigns", (response)=> {
				var isESValid=response.isESValid;
			    var isCbandSiteOrProject=response.isCbandSiteOrProject;
				var isContigUnlicensed=response.CONTIG_50_SQMI_UNLICENSED;
			    delete response["isESValid"];
			    delete response["isCbandSiteOrProject"];
				delete response["CONTIG_50_SQMI_UNLICENSED"];	

	    		if (reportType === "") {
	    			callSignFrequency = response;
	    		} else if (reportType === "8Cs") {
	    			cellularCallSigns = [];
	    			$.each(response, (callsign, frequency)=> {
	    				cellularCallSigns.push(callsign);
	    			});
	    		}
				var cbandFound = Object.values(response).find(a => a.match("C-Band"));
				if(reportType === ""){ // ONLY ON LOAD
					if(cbandFound){
						if(isCbandSiteOrProject == "true" && isESValid == "true" ){
							this.constructor.mandateESDocs = true;
							let payload ={
			                		 siteProjectsId : this.dom.siteProjectsId,
									 siteInfoId : this.dom.siteInfoId  
			                   }
							this.constructor.ajax.fireApi(payload,"rfds-callsign","getAtollEarthStationData",(res)=>{
									this.atollTransmitterGrid(res,"rfds-cband-table");
							})
							this.dom.body.find('.c-band-body .rfds-cband-template').removeClass('hide');

							$("#c-band-gNB-equipment-type").val(projectDetailsWrapper.projAdditionalInfo.cbEqType);
							if(projectDetailsWrapper.projAdditionalInfo.earth_station_agreement == 'true'){
								$("#earth-station-agreement").prop("checked",true);
							}else{
								$("#earth-station-agreement").prop("checked",false);
							}
							var esdma= projectDetailsWrapper.projAdditionalInfo.esdma.split(',')
							$("#earth-station-design-mitigation-applied").val(esdma);
							$("#earth-station-design-mitigation-applied").selectpicker('refresh');
							this.dom.body.find('.c-band-body .earth-station-fields').removeClass('hide');

						}else{
							this.constructor.mandateESDocs = false;
							this.dom.body.find('.c-band-body .rfds-cband-template').addClass('hide');
							this.dom.body.find('.c-band-body .earth-station-fields').addClass('hide');
						}
						
						this.dom.body.find('.c-band-header, .c-band-body').removeClass('hide');
					}else{
						this.dom.body.find('.c-band-header, .c-band-body').addClass('hide');
					}
				
				}
	    		if(["CONTOUR_EXTENSION_INTO_UNLICENSED_AREA","CONTOUR_EXTENSION_BEYOND_40","EXTENSION_AGREEMENT"].includes(reportType) || reportType === ""){
	    			var callsigns850 = Object.values(response).find(a => a.match('850'));
					
	    			if(callsigns850){
						this.dom.validate850 = true;
	    				this.dom.body.find('#CONTOUR_EXTENSION_INTO_UNLICENSED_AREA, .850_callsigns_header').removeClass('hide');
	    				this.dom.body.find("#CONTOUR_EXTENSION_INTO_UNLICENSED_AREA").attr("data-850-callsigns", "Yes");
	    			}else{
						this.dom.validate850 = false;
	    				this.dom.body.find("#CONTOUR_EXTENSION_INTO_UNLICENSED_AREA").attr("data-850-callsigns", "No");
	    				this.dom.body.find('#CONTOUR_EXTENSION_INTO_UNLICENSED_AREA_No, #CONTOUR_EXTENSION_INTO_UNLICENSED_AREA_Yes, #CONTOUR_EXTENSION_BEYOND_40_No, #CONTOUR_EXTENSION_BEYOND_40_Yes, #EXTENSION_AGREEMENT_No, #EXTENSION_AGREEMENT_Yes').prop('checked', false);
	    				this.dom.body.find("#callsign-list-CONTOUR_EXTENSION_INTO_UNLICENSED_AREA, #callsign-list-CONTOUR_EXTENSION_BEYOND_40, #callsign-list-EXTENSION_AGREEMENT").empty();
	    				this.dom.body.find("#callsign-list-CONTOUR_EXTENSION_INTO_UNLICENSED_AREA, #callsign-list-CONTOUR_EXTENSION_BEYOND_40, #callsign-list-EXTENSION_AGREEMENT").change();
	    			}
					if(isContigUnlicensed == 'No'){
						this.dom.body.find('#CONTIG_50_SQMI_UNLICENSED').removeClass('hide');
						this.dom.body.find('#CONTIG_50_SQMI_UNLICENSED_No').prop('checked', true);
						this.dom.body.find('#CONTIG_50_SQMI_UNLICENSED_Yes').prop('checked', false);
					}else if(isContigUnlicensed == 'Yes'){
						this.dom.body.find('#CONTIG_50_SQMI_UNLICENSED').removeClass('hide');
						this.dom.body.find('#CONTIG_50_SQMI_UNLICENSED_Yes').prop('checked', true);
						this.dom.body.find('#CONTIG_50_SQMI_UNLICENSED_No').prop('checked', false);
						
					}
	    		}
	    		if (callback) {
	    			callback(response);
	    		}
	    	});
	    },


	    mergeProjCarrierAgreementDetails:function(reportType, callback){

	    	var projCarrierAgreementDetails = {};

	    	var callSigns = this.dom.body.find("#callsign-list-" + reportType).val();
	    	var isReportRequired = this.dom.body.find('input[name=' + reportType + ']:checked').val() === undefined ? "" : this.dom.body.find('input[name=' + reportType + ']:checked').val();

	    	projCarrierAgreementDetails.reportType = reportType;
	    	projCarrierAgreementDetails.siteProjectsId = this.dom.projectId;
	    	projCarrierAgreementDetails.isReportRequired = isReportRequired;

	    	if (callSigns !== undefined && callSigns !== null) {
	    		projCarrierAgreementDetails.callSigns = callSigns.join(',');
	    	}
	    	this.constructor.ajax.fireApi(projCarrierAgreementDetails, "project", "mergeProjCarrierAgreementDetails", ()=> {

	    		this.dom.body.find("#" + reportType).attr('data-report-required', isReportRequired);

	    		if (reportType === "CONTOUR_EXTENSION_BEYOND_50") {
	    			var projCallSignMerge = {};
	    			var projReg850 = {};
	    			projReg850.contourExtensionBeyond50 = isReportRequired;
	    			projReg850.siteProjectsId = this.dom.projectId;
	    			projCallSignMerge.projReg850 = projReg850;
	    	
	    			this.constructor.ajax.fireApi(projCallSignMerge, "regulatory-licenses", "mergeCallSignsWrap");
	    		}

	    		if( reportType === "CONTOUR_EXTENSION_INTO_UNLICENSED_AREA" && isReportRequired === "Yes"){
	    			// Clean up the data
	    			this.dom.body.find("#CONTOUR_EXTENSION_BEYOND_40_No").prop("checked",true);
	    			this.dom.body.find("#CONTOUR_EXTENSION_BEYOND_40_Yes").prop("checked",false);
	    			this.dom.body.find("#EXTENSION_AGREEMENT_No").prop("checked",true);
	    			this.dom.body.find("#EXTENSION_AGREEMENT_Yes").prop("checked",false);
	    			this.mergeProjCarrierAgreementDetails("CONTOUR_EXTENSION_BEYOND_40");
	    		}else if(reportType === "CONTOUR_EXTENSION_BEYOND_40" && isReportRequired === "No"){
	    			this.mergeProjCarrierAgreementDetails("EXTENSION_AGREEMENT");
	    		}

	    		if(callback){
	    			callback();
	    		}
	    	});
	    },


	    getProjCarrierAgreements: function(callback) {
	    	var projCarrierAgreementDetails = {};
	    	projCarrierAgreementDetails.siteProjectsId = this.dom.projectId;
	    	this.constructor.ajax.fireApi(projCarrierAgreementDetails, "project", "getProjCarrierAgreementDetails", (response)=> {
	    		setCarrierAgreements(response);
	    		$.each(response, (i, data)=> {
	    			if (data !== null && data !== undefined) {
	    				if (data.isReportRequired === 'No') {
	    					this.dom.body.find("#doc-report-type-list option[value=" + data.reportType + "]").remove();
	    				}
	    			}
	    		});
	    		if (callback) {
	    			callback(response);
	    		}
	    	});
	    },

	    displayCarrierAgreements: function(response) {
	    	// console.log(this);
	    	var self = rfdsModule;
	    	var extensionAgreementData = {};
	    	var contourAgreementData = {};
	    	$.each(response, (i, data)=> {
	    		if (data !== null && data !== undefined) {
	    			var reportType = data.reportType;
	    			self.dom.body.find("#" + reportType).attr('data-report-required', data.isReportRequired);
	    			self.dom.body.find('#' + reportType + '_' + data.isReportRequired).prop('checked', true);
	    			if (reportType !== "EXTENSION_AGREEMENT" && reportType !== "CONTOUR_EXTENSION_BEYOND_40" && data.isReportRequired !== "No") {
	    				self.addCallSigns(reportType, data.isReportRequired, data.callSigns);
	    			}else if (reportType === "EXTENSION_AGREEMENT") {
	    				extensionAgreementData = data;
	    			}else if(reportType === "CONTOUR_EXTENSION_BEYOND_40"){
	    				contourAgreementData = data;
	    			}
	    		}
	    	});
	    	setTimeout(()=> {
	    		if (contourAgreementData) {
	    			self.dom.body.find('#' + contourAgreementData.reportType + '_' + contourAgreementData.isReportRequired).prop('checked', true);
	    			self.displayContourExtension(contourAgreementData.reportType, contourAgreementData.isReportRequired, contourAgreementData.callSigns);
	    		}
	    		if (extensionAgreementData) {
	    			self.dom.body.find('#' + extensionAgreementData.reportType + '_' + extensionAgreementData.isReportRequired).prop('checked', true);
	    			self.displayExtensionAgreement(extensionAgreementData.reportType, extensionAgreementData.isReportRequired, extensionAgreementData.callSigns);
	    		}
	    	}, 1000);
	    },

	    getRfdsInserviceDocuments: function(obj, docids, finalizeField) {
	    	uploadedCallSigns = [];
	    	uploadedReportTypes = [];
			uploadedDocumnetsFor850Callsigns = [];
	    	var self =rfdsModule;
	    	var esDoc=false;
	    	$(".rfds-inservice-documents-block").empty();
			var taskId = rfdsModule.dom.body.find(".finalize-task-button").attr('role');
	    	var documentWrapper = {};
	    	documentWrapper.refType = "RFDS_INSERVICE_DOCUMENTS",
	    	documentWrapper.refNum = $("#site-project-id").val();
	    	documentWrapper.status = "uploaded";
	    	documentWrapper.siteInfoId = $("#site-info-id").val();
	    	self.dom.parent.find('#earthStationExceptionStatus').attr('disabled', 'disabled');
			self.dom.parent.find('#earthStationExceptionStatus').val("");
			var validation = null;
			searchDocuments(documentWrapper, (docList) => {
				$.each(docList, (i, data) => {
					if (data !== null && data !== undefined) {
						if (data.category === 'ES_POINT_ANALYSIS') {
							self.dom.parent.find('#earthStationExceptionStatus').removeAttr("disabled");
							self.dom.parent.find('#earthStationExceptionStatus').val(rfdsModule.constructor.esStatus);
						}
						rfdsModule.displayRfdsInserviceDocuments(docList, data.subCategory);
						uploadedCallSigns.push(data.subCategory);
						if(data.category === "8Cs" || data.category === "SHAPE_FILES"){
							uploadedDocumnetsFor850Callsigns.push(data);
						}
						uploadedReportTypes.push(data.category);
					}
				});
				if (finalizeField == "Yes") {
					validation = mileStoneFinalize.uploadInserviceDocValidateModule(false);
					if (validation.status) {
						completeWorkStep("INSERVICE_DOCUMENTS", taskId, function (wsStatusresponse, siteProjectsId) {
								populateWorkStepStatus(wsStatusresponse, siteProjectsId, "COMPLETE", "INSERVICE_DOCUMENTS", "RFDS");
						});
					}
				}
			});

	    },
	    displayRfdsInserviceDocuments: function(docList, subCategory){
	    	// set label + subCat
	    	if (this.dom.body.find(".rfds-inservice-documents-block").find("." + subCategory).length === 0) {
	    		var headTemplate = this.dom.body.find(".rfds-inservice-doc-template-head").html();
	    		this.dom.body.find(".rfds-inservice-documents-block").append(
	    			headTemplate.replace(/@SUB_CATEGORY/g, subCategory)
	    			.replace(/@FREQUENCY_BAND_CODE/g, callSignFrequency[subCategory])
	    		);
	    	}
	    	var tableId = "#rfds-inservice-document-table-" + subCategory;

	    	let columns = this.getRfdsInserviceDocColumns();

	    	// filter out docs where subCat does not match with what is passed
			// as param
	    	// also convertUnixDate while looping anyway
	    	let documentList = [];
	    	docList = docList.forEach(doc => {
	    		if(doc.subCategory === subCategory){
	    			doc.uploadedDate = convertUnixDate(doc.uploadedDate);
	    			documentList.push(doc);
	    		}
	    	});
	    	var gridOptions = { 
				dataBound: this.commonShowDocsAfterGridLoad,
	    	}
	    	createKendoGrid(tableId, columns, documentList, null, gridOptions);
	    	this.dom.body.find(tableId).kendoTooltip({
	            filter: "td:nth-child(3)", // this filter selects the second
											// column's cells
	            position: "right",
	            content: (e)=>{
	              var dataItem = this.dom.body.find(tableId).data("kendoGrid").dataItem(e.target.closest("tr"));
	              var content = dataItem.documentSize === "N/A" ? "N/A": dataItem.documentSize + " Bytes";
	              return content;
	            }
	          }).data("kendoTooltip");
	    	this.dom.body.find(tableId).parents(".documents-result").removeClass("hide");
	    },
	    
	    
	    getRfdsInserviceDocColumns: function() {
	    	return [{
	    		field: "action", 
	    		title: "Action", 
	    		width: 55,
	    		template: `<b class="k-delete-document text-brand-red vz-icon-delete fa fa-trash fa-bold-icon disable" id="#:documentID#"></b>`,
	    		filterable:false,
	    		attributes: {
	    			"class": "text-align-center"
	    		}
	    	}, {
	    		field: "title",
	    		title: "Documnet Name", 
	    		template: (response)=>{
	    			var vendorPath = `<a href="#" id="${response.documentID}" data-path="${response.path+ "?"+new Date().getTime()}" class="text-underline text-link download-documents">${response.title}</a>`;
	    			var nonVendorPath =`<a href="${response.path+ "?" + new Date().getTime()}" id="${response.documentID}" data-path="${response.path+ "?"+new Date().getTime()}" class="text-underline text-link" target="_blank">${response.title}</a>`;
	    			if ($('#isVendorCheck').val()== "true") {
	    				return vendorPath;
	    			} else{
	    				return nonVendorPath;
	    			}
	    		}
	    	}, 
	    	{
	    		field:"documentSizeHuman",
	    		title:"Size"
	    	},
	    	{
	    		field: "category", 
	    		title: "Category"
	    	}, {
	    		field: "uploadedDate",
	    		title: "Upload Date", 
	    		type: "date"
	    	}, {
	    		field: "uploadedBy",
	    		title: "Upload By"
	    	}];
	    },
	    changeFccRadio: function(e){
			var self  = $(e.currentTarget);
    		var fccRequiredObject = {};
    		var radioVal = self.val();
    		var regService = self.data('reg-service');
    		var selectedBandName = self.data('reg-service');
    		fccRequiredObject.siteProjectsId = this.dom.projectId;
    		var bandNames = ['700Mhz', 'Cellular', 'PCS', 'AWS', 'C-Band'];
    		for (var key = 0; key < bandNames.length; key++) {
    			var value = bandNames[key];
    			if (selectedBandName === value) {
					selectedBandName = selectedBandName === 'C-Band'? 'CBand':selectedBandName;
    				fccRequiredObject['intlBorderExtendsFor' + selectedBandName] = radioVal
    				fccRequiredObject.vzRegService = regService;
    				this.updateRfdsCallSigns(fccRequiredObject);
    				break;
    			}
    		}
    		var callSignId = self.attr("name");
			if(radioVal === 'Yes'){
				
				$("#"+callSignId +"-notificationTimeoutDiv").addClass("hide");
				$("#"+callSignId +"-agreementTimeoutDiv").removeClass("hide");
			}
			else{
			$("#"+callSignId +"-agreementTimeoutDiv").addClass("hide");
			$("#"+callSignId +"-notificationTimeoutDiv").removeClass("hide");	
			}
    		var subCategory="";
    		if (callSignId === "band700m") {
                    subCategory = "700"
                } else if (callSignId === "band850m") {
                    subCategory = "850"
                } else if (callSignId === "band1900m") {
                    subCategory = "1900"
                } else if (callSignId === "band2100m") {
                    subCategory = "2100"
                }else if (callSignId === "cband") {
                    subCategory = "C-BAND";
                }
               subCategory = 'INTERNATIONAL_BORDER_'+  (radioVal === 'No' ? 'NOTIFICATION' : 'AGREEMENT' )+'_'+subCategory;
               $("#"+callSignId+"-form").find("#subCategory").val(subCategory);                
	    },
	    changeUploadRfdsInserviceDocuments: function(e){
    		e.preventDefault();
    		var form = this.dom.body.find('.rfds-inservice-template .upload-form');
    		var formId = form.attr("id");
    		var subCategory = this.dom.parent.find("#inservice-callsign-list").val();
    		if (subCategory !== null && subCategory !== "" && subCategory !== undefined) {
//    			this.dom.parent.find("#" + formId).find('#subCategory').val(subCategory);
//    			this.dom.parent.find("#" + formId).find('#bandwidth').val(callSignFrequency[subCategory].replace(/-/g, "^"));
//    			uploadDocument(this.dom.siteInfoId, formId, this.getRfdsInserviceDocuments);
	    		this.dom.parent.find("#" + formId).find('#subCategory').val(subCategory);
	    		this.dom.parent.find("#" + formId).find('#bandwidth').val(JSON.stringify(callSignFrequency));
	    		uploadDocumentWithMultipleCategories(this.dom.siteInfoId, formId, this.getRfdsInserviceDocuments, null, "Yes");
    		} else {
    			displayError("Error", "Please select the callsigns the document is applicable to");
    			this.dom.parent.find("#" + formId)[0].reset();
    		}
	    },
	   
