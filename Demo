
getProjEnvRestrictionCompliance: function(version, callback) {
    var payload = {};
    payload.siteInfoId = $("#site-project-id").val();
    
    this.constructor.ajax.fireApi(payload, "inventory", "getSiteRestrictions", $.proxy(function(response) {
        // Logging the response to check the API call output
        console.log(response);

        // Call a function to display the restrictions on the UI
        this.displaySiteRestrictions(response);

        // Check specific restrictions to enable or disable UI components
        if (response.restrictionsConstruction === "Yes") {
            this.handleConstructionRestriction(response);
        }

        // Perform additional checks and operations as necessary
        // Example: Enable or disable components based on response values
        if (response.noticeToContractor === "Yes") {
            this.enableContractorNotice();
        } else {
            this.disableContractorNotice();
        }

        // Call a callback function if provided
        if (typeof callback === "function") {
            callback(response);
        }

    }, this), true, false);
},

displaySiteRestrictions: function(response) {
    // Implement this function to update the UI with the response data
    // Example:
    $('#restrictions-construction').text(response.restrictionsConstruction);
    $('#restrictions-envcovs').text(response.restrictionsEnvcovs);
    $('#restrictions-diesel-gasoline').text(response.restrictionsDieselGasoline);
    $('#restrictions-diesel-sensitive').text(response.restrictionsDieselSensitive);
    // Add similar lines for other fields as necessary
},

handleConstructionRestriction: function(response) {
    // Implement handling of construction restriction based on the response
    if (response.restrictionsConstruction === "Yes") {
        // Code to handle 'Yes' restriction, such as disabling specific components
        disableComponents("construction");
    } else {
        // Code to handle 'No' restriction, such as enabling specific components
        enableComponents("construction");
    }
},

enableContractorNotice: function() {
    // Code to enable contractor notice related UI components
    $('#contractor-notice').removeClass('disabled').addClass('enabled');
},

disableContractorNotice: function() {
    // Code to disable contractor notice related UI components
    $('#contractor-notice').removeClass('enabled').addClass('disabled');
}




getProjEnvRestrictionCompliance: function(version, callback) {
    var payload = {};
    payload.siteInfoId = $("#site-project-id").val();

    this.constructor.ajax.fireApi(payload, "inventory", "getSiteRestrictions", $.proxy(function(response) {
        // Process the response data here
        this.displaySiteRestrictions(response);
        
        // Additional logic based on the response, similar to `getProjEnvReviewFormDetails`
        if (response.noticeToContractor === "Yes") {
            // Assuming there might be some additional processing if 'Yes'
            this.getAdditionalComplianceData(payload);
        } else {
            let userPrivilege = $("#userPrivilege").val();
            let maxVersion = $(".environmental_restrictions_container").find(".last-version-value").text();
            let activeVersion = $(".environmental_restrictions_container").find(".current-version-value").text();
            let taskStatus = $(".environmental_restrictions_container").attr("data-status");

            /** Determine if components should be enabled or disabled */
            if (((taskStatus === "COMPLETED") || 
                 ((taskStatus === "TERRITORY_REVIEW" || taskStatus === "GLOBAL_EHS_REVIEW") && 
                  !userPrivilege.includes("SPM_HQ_ENV") && !userPrivilege.includes("FUZE_GUI_SUPPORT") && 
                  !userPrivilege.includes("SPM_GUI_SUPPORT")) || 
                 (activeVersion && activeVersion !== maxVersion))) {
                disableComponents(taskStatus);
                $('.version-list').parent().find('button').removeClass('disable');
            } else {
                enableComponents(taskStatus);
            }
        }

    }, this), true, false);
},








getProjEnvReviewFormDetails: function(version, callback) {
        var projectSearchRequest = {};
        projectSearchRequest.siteProjectsId = $("#site-project-id").val();
        if (version) {
            projectSearchRequest.version = version;
        }
        var taskName = this.dom.reviewContainer.closest('.tab-pane').attr('data-task');
        var taskStatus = $("." + taskName).attr("data-status");
        this.constructor.ajax.fireApi(projectSearchRequest, "env", "getProjEnvFormDetails", $.proxy(function(response) {
            fetchDocumentsCallback("SITE_ENV_REPORT_DOCUMENTS", "#" + this.dom.tableId);
            this.displayProjEnvFormDetails(response);
            if (response.prelimEddReviewRequired === "Yes") {
                this.getProjEnvAdditionalData(projectSearchRequest, taskName, taskStatus);
            }else{
                enableComponents(taskName);
                let userPrivilege = $("#userPrivilege").val();
                let maxVersion = $(".environmental_review_container").find(".last-version-value").text();
                let activeVersion = $(".environmental_review_container").find(".current-version-value").text();

                /** keeping it readonly as document n adding report is template based - used by environmental review task too**/            
                if (((taskName === "TERRITORY_REVIEW" || taskName === "GLOBAL_EHS_REVIEW") && !userPrivilege.includes("SPM_HQ_ENV") && !userPrivilege.includes("FUZE_GUI_SUPPORT") && !userPrivilege.includes("SPM_GUI_SUPPORT")) || (activeVersion && activeVersion !== maxVersion) || taskStatus === "COMPLETED") {
                    disableComponents(taskName);
                    $('.version-list').parent().find('button').removeClass('disable');
                }
            }

        }, this), false, false);
    },

 getProjEnvRestrictionCompliance: function(version, callback) {
        var payload = {};
        payload.siteInfoId = $("#site-project-id").val();
        this.constructor.ajax.fireApi(payload, "inventory", "getSiteRestrictions", $.proxy(function(response) {
            console.log(response);
        }, this), true, false);
    },
    

Site:
When the Environmental Tab is clicked in the site page, invoke an API that pulls the current site level restrictions for the site from the Compliance Module
Look into how site level restrictions are being handled
The restrictions currently show in Site Level fields


uri:
 compliance-service/inventory/getSiteRestrictions
payload :
{
"siteInfoId":616311816
}
Response :
{
"siteInfoId": 616311816,
"restrictionsConstruction": "No",
"restrictionsEnvcovs": "No",
"restrictionsDieselGasoline": "No",
"restrictionsDieselSensitive": "Yes",
"restrictionsDsNstd399": null,
"restrictionsDsFuelPlan": "No",
"restrictionsDsSpill": null,
"restrictionsDPortableGen": null,
"lastModifiedBy": null,
"lastModifiedDate": null,
"restrictionsAsbestos": null,
"restrictionsLBP": null,
"noticeToContractor": "No"
}




ChatGPT

You said:
I want to send mail to manager regarding update on last 15 days..my updates is 1)I am working on ntsce-13725  ticket ..also 2)I gone through SQL procedure trying to understand this also 3)understanding the different layers controller service dao layer

Write mail on above mentioned things these three work not related to each other

3/3

ChatGPT said:
ChatGPT
Here's a draft email you can use to update your manager on your recent progress:

Subject: Update on My Work Progress Over the Last 15 Days

Hi [Manager's Name],

I wanted to provide you with a quick update on the work Iâ€™ve been doing over the last 15 days.

NTCSE-13725 Ticket: I am currently working on the NTCSE-13725 ticket. This involves [briefly describe what the ticket entails, if necessary]. I am progressing steadily and am focused on addressing all the requirements for this task.

SQL Procedure Review: I have also spent some time going through the SQL procedures. My aim here is to deepen my understanding of how these procedures function and contribute to the overall system. I am working through the logic and flow to ensure I can utilize these effectively in my tasks.

Understanding System Layers: Additionally, I have been learning about the different layers of our system architecture, specifically the controller, service, and DAO layers. This effort is to better grasp how each layer interacts and supports our applications, which I believe will enhance my contributions to the project.

Please let me know if there are any specific areas you would like me to focus on or if there's anything else you'd like me to update you on.

Thank you, [Your Name]

Feel free to customize this as needed.



var agreementSentDate = new Date(); // This should be replaced with the actual Agreement Sent Date value
    var notificationSentDate = new Date(); // This should be replaced with the actual Notification Sent Date value
    var calculatedDate;

    if (radioVal === 'Yes') {
        if (subCategory.includes("700") || subCategory.includes("850") || subCategory.includes("1900") || subCategory.includes("C-BAND")) {
            calculatedDate = new Date(agreementSentDate);
            calculatedDate.setDate(calculatedDate.getDate() + 30); // Agreement Sent Date + 30 days
        } else if (subCategory.includes("2100")) {
            calculatedDate = new Date(agreementSentDate);
            calculatedDate.setDate(calculatedDate.getDate() + 60); // Agreement Sent Date + 60 days
        }
    } else if (radioVal === 'No') {
        calculatedDate = new Date(notificationSentDate);
        calculatedDate.setDate(calculatedDate.getDate() + 30); // Notification Sent Date + 30 days
    }

    $("#" + callSignId + "-form").find("#calculatedDateField").val(calculatedDate.toISOString().split('T')[0]); // Assuming the field ID is `calculatedDateField`
},





-controller file
@RequestMapping(value = "/mergeProjLocationInfo", method = RequestMethod.POST, produces =  MediaType.APPLICATION_JSON )
	@ApiOperation(value = "Returns output details", notes = "Projects Service", response = ProjLocationInfo.class)
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Successful retrieval service", response = ProjLocationInfo.class),
			@ApiResponse(code = 400, message = "Invalid input provided"),
			@ApiResponse(code = 404, message = "Data does not exist"), })
	@ResponseStatus(value = HttpStatus.OK)

	public boolean mergeProjLocationInfo(@RequestHeader("user") String userJSON, @RequestBody ProjLocationInfo projLocationInfo) throws Exception {

		final User user = userInfoService.getUserInfo();
		
		logger.info("PROJECTS-SERVICE : Inside {}, Called by {} with Parameter {}", Thread.currentThread().getStackTrace()[1].getMethodName(), user, projLocationInfo);
		
		final boolean status = projectsService.mergeProjLocationInfo(projLocationInfo, user);
		
		return status;
	}
-service layer
@Override
	public boolean mergeProjLocationInfo(ProjLocationInfo projLocationInfo, User user) throws Exception {

		projLocationInfo.setLastModifiedBy(user.getUserId());

		logger.info("PROJECTS-SERVICE : mergeProjectLocationInfo service Impl");

		return projectsDao.mergeProjLocationInfo(projLocationInfo, user);
	}
-DAO layer 
public boolean mergeProjLocationInfo(ProjLocationInfo projLocationInfo, User user ) throws Exception {

		logger.info("PROJECTS_SERVICE : Inside {}. Parameter :  {}",
				Thread.currentThread().getStackTrace()[1].getMethodName(), projLocationInfo);
		
		final DataSourceCriteria criteria = dataCloudSerializer.mapMergeProjLocationInfo(projLocationInfo, user);
		
		boolean isMerged = false;

		try {

			final DataSourceResultSet wsResult = DataCloud.perform(DataCloudServices.PROJECTS.mergeProjLocationInfo,
					criteria);
			isMerged = wsResult.getUpdateCount() > 0;
			
			//Code to update the PSLC data from ppl sft is moved to getProjectFields
			if(isMerged) {
				DataCloud.perform(DataCloudServices.PROJECTS.mergePslcSite,
						criteria);
			}else {
				throw new Exception("Invalid PSLC Code");

			}
			
		} catch (final Exception e) {
			logger.error("PROJECTS_SERVICE : Error in projLocationInfo Dao {}", e.getMessage());
			e.printStackTrace();
			throw e;
		}

		logger.info(RETURN_PARAMS,
				Thread.currentThread().getStackTrace()[1].getMethodName(), isMerged);
		return isMerged;
	}
- dataCluodService layer
String mergeProjLocationInfo = "projects.mergeProjLocationInfo";
