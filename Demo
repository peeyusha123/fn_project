class Node<T> {
    T data;
    Node<T> next;

    public Node(T data) {
        this.data = data;
        this.next = null;
    }
}

public class Solution {

    public static Node<Integer> appendLastNToFirst(Node<Integer> head, int n) {
        // Handle empty list or no rearrangement needed
        if (head == null || n == 0) {
            return head;
        }

        // Step 1: Find the length of the linked list
        int length = 0;
        Node<Integer> current = head;
        while (current != null) {
            length++;
            current = current.next;
        }

        // Step 2: If N equals length, no change needed
        if (n == length) {
            return head;
        }

        // Step 3: Find the (length - N)th node (the new tail)
        current = head;
        int count = 1;
        while (count < length - n) {
            current = current.next;
            count++;
        }

        // Step 4: Rearrange pointers
        Node<Integer> newHead = current.next;
        current.next = null;  // Make current node the new tail
        Node<Integer> temp = newHead;
        while (temp.next != null) {
            temp = temp.next;
        }
        temp.next = head;  // Make the old head the next of the last node
        
        // Return the new head
        return newHead;
    }
}
2)..

class Node<T> {
    T data;
    Node<T> next;

    public Node(T data) {
        this.data = data;
        this.next = null;
    }
}

public class Solution {

    public static Node<Integer> removeDuplicates(Node<Integer> head) {
        // Edge case: If the list is empty or has only one element, no duplicates to remove
        if (head == null || head.next == null) {
            return head;
        }

        Node<Integer> current = head;

        // Traverse the list
        while (current != null && current.next != null) {
            // Check if current node's data is equal to next node's data
            if (current.data.equals(current.next.data)) {
                // Skip the next node
                current.next = current.next.next;
            } else {
                // Move to the next node
                current = current.next;
            }
        }
        return head;
    }
}


3)

class Node<T> {
    T data;
    Node<T> next;

    public Node(T data) {
        this.data = data;
        this.next = null;
    }
}

public class Solution {

    public static void printReverse(Node<Integer> root) {
        // Base case: If the node is null, return
        if (root == null) {
            return;
        }

        // Recursive call on the next node
        printReverse(root.next);

        // Print the current node's data after the recursion has reached the end
        System.out.print(root.data);
    }
}


4.

class Node<T> {
    T data;
    Node<T> next;

    public Node(T data) {
        this.data = data;
        this.next = null;
    }
}

public class Solution {

    // Function to find the middle of the linked list
    private static Node<Integer> findMiddle(Node<Integer> head) {
        Node<Integer> slow = head;
        Node<Integer> fast = head;

        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }

    // Function to reverse a linked list
    private static Node<Integer> reverseList(Node<Integer> head) {
        Node<Integer> prev = null;
        Node<Integer> curr = head;

        while (curr != null) {
            Node<Integer> nextNode = curr.next;
            curr.next = prev;
            prev = curr;
            curr = nextNode;
        }
        return prev;
    }

    // Function to check if the linked list is a palindrome
    public static boolean isPalindrome(Node<Integer> head) {
        // Edge case: if the list is empty or has only one element, it's a palindrome
        if (head == null || head.next == null) {
            return true;
        }

        // Step 1: Find the middle of the list
        Node<Integer> middle = findMiddle(head);

        // Step 2: Reverse the second half of the list
        Node<Integer> secondHalf = reverseList(middle);

        // Step 3: Compare the first and second halves
        Node<Integer> firstHalf = head;
        Node<Integer> secondHalfCopy = secondHalf;

        while (secondHalfCopy != null) {
            if (!firstHalf.data.equals(secondHalfCopy.data)) {
                return false; // If mismatch found, it's not a palindrome
            }
            firstHalf = firstHalf.next;
            secondHalfCopy = secondHalfCopy.next;
        }

        return true; // If no mismatch, the list is a palindrome
    }
}
