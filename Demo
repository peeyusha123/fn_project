var agreementSentDate = new Date(); // This should be replaced with the actual Agreement Sent Date value
    var notificationSentDate = new Date(); // This should be replaced with the actual Notification Sent Date value
    var calculatedDate;

    if (radioVal === 'Yes') {
        if (subCategory.includes("700") || subCategory.includes("850") || subCategory.includes("1900") || subCategory.includes("C-BAND")) {
            calculatedDate = new Date(agreementSentDate);
            calculatedDate.setDate(calculatedDate.getDate() + 30); // Agreement Sent Date + 30 days
        } else if (subCategory.includes("2100")) {
            calculatedDate = new Date(agreementSentDate);
            calculatedDate.setDate(calculatedDate.getDate() + 60); // Agreement Sent Date + 60 days
        }
    } else if (radioVal === 'No') {
        calculatedDate = new Date(notificationSentDate);
        calculatedDate.setDate(calculatedDate.getDate() + 30); // Notification Sent Date + 30 days
    }

    $("#" + callSignId + "-form").find("#calculatedDateField").val(calculatedDate.toISOString().split('T')[0]); // Assuming the field ID is `calculatedDateField`
},





-controller file
@RequestMapping(value = "/mergeProjLocationInfo", method = RequestMethod.POST, produces =  MediaType.APPLICATION_JSON )
	@ApiOperation(value = "Returns output details", notes = "Projects Service", response = ProjLocationInfo.class)
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Successful retrieval service", response = ProjLocationInfo.class),
			@ApiResponse(code = 400, message = "Invalid input provided"),
			@ApiResponse(code = 404, message = "Data does not exist"), })
	@ResponseStatus(value = HttpStatus.OK)

	public boolean mergeProjLocationInfo(@RequestHeader("user") String userJSON, @RequestBody ProjLocationInfo projLocationInfo) throws Exception {

		final User user = userInfoService.getUserInfo();
		
		logger.info("PROJECTS-SERVICE : Inside {}, Called by {} with Parameter {}", Thread.currentThread().getStackTrace()[1].getMethodName(), user, projLocationInfo);
		
		final boolean status = projectsService.mergeProjLocationInfo(projLocationInfo, user);
		
		return status;
	}
-service layer
@Override
	public boolean mergeProjLocationInfo(ProjLocationInfo projLocationInfo, User user) throws Exception {

		projLocationInfo.setLastModifiedBy(user.getUserId());

		logger.info("PROJECTS-SERVICE : mergeProjectLocationInfo service Impl");

		return projectsDao.mergeProjLocationInfo(projLocationInfo, user);
	}
-DAO layer 
public boolean mergeProjLocationInfo(ProjLocationInfo projLocationInfo, User user ) throws Exception {

		logger.info("PROJECTS_SERVICE : Inside {}. Parameter :  {}",
				Thread.currentThread().getStackTrace()[1].getMethodName(), projLocationInfo);
		
		final DataSourceCriteria criteria = dataCloudSerializer.mapMergeProjLocationInfo(projLocationInfo, user);
		
		boolean isMerged = false;

		try {

			final DataSourceResultSet wsResult = DataCloud.perform(DataCloudServices.PROJECTS.mergeProjLocationInfo,
					criteria);
			isMerged = wsResult.getUpdateCount() > 0;
			
			//Code to update the PSLC data from ppl sft is moved to getProjectFields
			if(isMerged) {
				DataCloud.perform(DataCloudServices.PROJECTS.mergePslcSite,
						criteria);
			}else {
				throw new Exception("Invalid PSLC Code");

			}
			
		} catch (final Exception e) {
			logger.error("PROJECTS_SERVICE : Error in projLocationInfo Dao {}", e.getMessage());
			e.printStackTrace();
			throw e;
		}

		logger.info(RETURN_PARAMS,
				Thread.currentThread().getStackTrace()[1].getMethodName(), isMerged);
		return isMerged;
	}
- dataCluodService layer
String mergeProjLocationInfo = "projects.mergeProjLocationInfo";
