@RequestMapping(value = "/completeWorkStep", method = RequestMethod.POST, produces =  MediaType.APPLICATION_JSON )
	@ApiOperation(value = "Returns output details", notes = "Projects Service", response = ProjTracker.class)
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Successful retrieval service", response = ProjTracker.class),
			@ApiResponse(code = 400, message = "Invalid input provided"),
			@ApiResponse(code = 404, message = "Data does not exist"), })
	@ResponseStatus(value = HttpStatus.OK)

	public Map<String, Map<String, Object>> completeWorkStep(@RequestHeader("user") String userJSON, @RequestBody ProjTracker projTracker) throws Exception {

		final User user = userInfoService.getUserInfo();
		
		logger.info("PROJECTS-SERVICE :  completeWorkStep is called for {} by {} ",projTracker,userInfoService.getUserInfo());
		
		Map<String, Map<String, Object>> completedStepMap = new LinkedHashMap<>();

		BackEndValidations.projTrackerFieldsValidation(projTracker);
		
		try{
			final String currentWorkStep = projTracker.getWorkStepName();
			logger.info("PROJECTS-SERVICE :  Current step is {}",currentWorkStep);

			String validationResult=trackerService.BackendValidationCheck(projTracker);
			if(validationResult.equalsIgnoreCase("FALSE"))
			{
				logger.info("PROJECTS-SERVICE :  BACKEND VALIDATION FAILED");
				throw new Exception("BackEndValidation- Finalize failed !!");
			}
			else
			{
			completedStepMap = trackerService.completeWorkStep(projTracker, user);

			if("COMPLETE".equalsIgnoreCase(projTracker.getActionPerformed())){
				String enableRhpam = "flase"; // cachedResultsDao.getEnableRhpam().get(0);
					if("CREATE_PROJECT".equalsIgnoreCase(currentWorkStep)) {
						projTracker.setWorkStepName("CREATE_PROJECT_COMPLETED");
						projectsService.populateUaceIdAndName(projTracker, user);
						
						if(enableRhpam.equalsIgnoreCase("true")) {
							unoService.createProjectPAM(projTracker.getSiteProjectsId(),user);
						}						
					}
					else {
						if(enableRhpam.equalsIgnoreCase("true")) {
//							final String currWorkStepDispNm = Optional.ofNullable(cachedResultsDao.getMilestones().get(currentWorkStep)).isPresent() && !"".equalsIgnoreCase(cachedResultsDao.getMilestones().get(currentWorkStep).trim()) ?
//									cachedResultsDao.getMilestones().get(currentWorkStep) : cachedResultsDao.getWorkStepName().get(currentWorkStep);//cachedResultsDao.getMilestones().get(currentWorkStep);
							unoService.updateWorkstepStatusPAM(currentWorkStep, "COMPLETED", projTracker.getSiteProjectsId(),user);
						}	
					}
				
				parallelProcessor.execute(ParallelProcessor.Operation.EMAIL_QUEUE, userInfoService.getUserInfo(), projTracker, new HashMap<>());
				projTracker.setWorkStepName(currentWorkStep);
			}
			}

		}catch( final Exception e){
			e.printStackTrace();
			throw e;
		}
		return completedStepMap;
	}
