
<div class="international-callsign-tables"></div>

<div id="international-border-document-table" data-ref-type="SITE_INTL_BORDER_AGREEMENTS" class="spm-grid-styles"></div>

<div class="documents-result col-xs-12 col-sm-12 padding-zero international-border-documents-list margin-top hide"></div>

<div class="international-table-header-template hide">
    <h6 class="text-brand-red margin-top">@BANDWIDTH Callsigns</h6>
    <div class="col-md-12 padding-zero section-divider-bottom">
        <div id="@ID-international-colnames" class="spm-grid-styles"></div>
        <div class="radio vzbs-radio text-bold border-none margin-top-bottom">
            Does the signal extend into the country at levels above those specified in the Agreement between the FCC and their counterpart? : &nbsp;
            <input name="@ID" role="radio" data-reg-service="@VZREGSERVICE" value="Yes" id="signalextend-yes" type="radio" class="@ID-yes fcc-radio" disabled="disabled">
            <label>Yes</label>
            <input name="@ID" role="radio" data-reg-service="@VZREGSERVICE" value="No" id="signalextend-no" type="radio" class="@ID-no fcc-radio" disabled="disabled" checked>
            <label>No</label>
        </div>









//sign up

Create a Sign Up Modal with User Name, Password and Submit and Reset Storage Button which will open on clicking of Sign Up Button from the Login Page
Add a place holder in the User Name box as Enter the User Name and in password box as Enter the Password.
Create a User List Object and store the entered User Name in a key called userName and Password into pwd key inside the User Object.
Once the User Clicks on Submit Button then Log the Username and password JSON List Data in the Console.
Now Store the List to the Browser Local Storage
On Click on the Reset Storage Button clear the Stored Local Storage List.
On Submit check if the new username entered is present in the existing Local Storage List and incase if its present then throw an BootStrap Error alert in the Modal   Stating  "User Name already taken choose another Name and Try Again"  and place the Cursor in the Username Field.
On Submit check if the new username entered is not present in the existing Local Storage List then close the SignUp modal and show BootStrap Success alert in the Modal  Stating  "User is Created" on the Top of  Login Screen 
BootStrap alert should have a X Mark to close also the message should disappear automatically in 5 seconds or by clicking the X Mark.
Add Validation not to get Special Characters in User Name
Add Validation to check if Password has 8 Characters, Min 1 Lower Case, Min 1 Upper Case and Min 1 Special Character
Allowed Special Characters in Password (!@#$%^) and anything out of this then throw an Error Message stating that the Special Character should be within this.
Disable Copy, Paste using ShortCuts and Right Click on Password Field.

//password reset
1	Create a Password Reset Screen with User Name and Reset  Button which will open on clicking of Password Reset Button from the Login Page
2	Add a place holder in the User Name box as Enter the User Name
3	Disable the Reset Button if User Name Field is empty.
4	Add Validation not to enter,paste special characters in User Name
5	Once the User Name is entered Check if the entered username is present in the Local Storage 
6	If Present the Open a Pop Up Modal with Name as Password Reset Modal which will contain Non Editable User Name and New Password and Retype New Password Fields and a Submit Button.
7	On Click of the Submit Button in Password Reset Modal find the username and set this new password for the username in local storage.
8	Add Validation to check if Password has 8 Characters, Min 1 Lower Case, Min 1 Upper Case and Min 1 Special Character
9	Allowed Special Characters in Password (!@#$%^) and anything out of this then throw an Error Message stating that the Special Character should be within this.
10	Disable Copy, Paste using ShortCuts and Right Click on Password Field.
11	On Click of the Submit Button in Password Reset Modal check if New Password and Reset Password Values martch and if not and show BootStrap Success alert in the Modal  Stating  "Password does not match" on the Top of  Password Reset Screen 
12	BootStrap alert should have a X Mark to close also the message should disappear automatically in 5 seconds or by clicking the X Mark.
13	If all Validations are good then close the Password Reset Modal and show BootStrap Success alert in the Modal  Stating  "User Password Reset Success" on the Top of  Login Screen 
	
//DB
1.Create Table to Store USER_DETAILS																									
2.Create Table to Store USER_LOCATION_DETAILS should have foreign key as USER_DETAILS primary key																									
3.Create a Table to Store the history of USER_DETAILS_HISTORY Changes which should have old Value, new Value and the userid who changed it and the time it was changed																									
																									
4.Define a Insert Query to insert the User Details to the USER_DETAILS table																									
5.Define a Insert Query to insert the User Location Details to the USER_LOCATION_DETAILS  table																									
6.Define a Update query to update the User Password to the USER_DETAILS table for a given user_id																									
7.Define a Update query to update the User Location Details like City, State to the USER_LOCATION_DETAILS  table for a given user_id																									
8.Create a Procedure with userid as input and when you pass the user id to the procedure it should check if the user id is present and if its present then delete the USER_DETAILS and USER_LOCATION_DETAILS  for the given user id																									
9.Create a function which with userid as input and when you pass the user id to the function it should check if the user id is present in the USER_DETAILS Table and if present return true or return false																									
10.Create a Trigger on USER_DETAILS and USER_LOCATION_DETAILS Table columns and when you insert or update the value it should put an entry of new value and old value in the USER_DETAILS_HISTORY  Table																									

//SpringBoot
1.Create A Spring Boot Project																									
2.Create Needed POJO, Controller, Service and DAO Methods and use Simple JDBC Connection to connect to DB																									
3."Create Separate API for 
Adding New User to DB
Resetting the User Name in the DB




create one javascript function to satisfied below conditions:																							
The Actual Date field will be required to finalize the Documents Uploaded Task if the following conditions are met:
1)Construction Completed Milestone Status != N/A (construction was performed on this project)
2)Project Level Physical Site Address State is MA, CT, or RI
3)In State GC Picklist is set to “No”
4)Otherwise, this field will not be required
5)Editable field?: Forecast field editable, Actual date read only
while creating function refer below function for referance
 updateAMStatus: function() {
        var siteProjectId = this.dom.projectId;
        var projTracker = {};
        projTracker.siteProjectsId = siteProjectId;
  
        this.constructor.ajax.fireApi(projTracker, "regulatory-licenses", "updateAMStatus", (response) => {
            console.log(response);
        });
    },
below function where you add you conditions
	testFunc: function(){
		//Here you need to write all the conditions & make the field mandatory
		var details = getProjectDetails();
		
		addToolTip(".inStateGC",`Are all general contractors assigned to this project performing work as a resident contractor (registered with state and remitting S&U tax returns) of the state of ${details.siteInfo.state}?`);
    },


finalizeDocumentsUploadedTask: function() {
    var details = getProjectDetails();
    
    // Conditions
    var constructionCompleted = details.milestoneStatus !== "N/A";
    var inStateGC = details.inStateGC === "No";
    var state = details.siteInfo.state;
    var stateRequirementsMet = state === "MA" || state === "CT" || state === "RI";
    
    // Make the field mandatory if all conditions are met
    if (constructionCompleted && stateRequirementsMet && inStateGC) {
        // Make Actual Date field required
        $(".actualDate").prop("required", true); // Assuming the Actual Date field has a class of "actualDate"
    } else {
        // Make Actual Date field not required
        $(".actualDate").prop("required", false); // Assuming the Actual Date field has a class of "actualDate"
    }
    
    // Make Forecast field editable
    $(".forecast").prop("readonly", false); // Assuming the Forecast field has a class of "forecast"
},

