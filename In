// Function to open the password reset modal
function openResetPasswordModal() {
  const resetPasswordModal = document.getElementById("resetPasswordModal");
  resetPasswordModal.style.display = "block";

  // Add event listener to the input field for real-time validation
  const resetUsernameInput = document.getElementById("resetUsername");
  resetUsernameInput.addEventListener("input", handleResetUsernameInputChange);

  // Initially disable the Reset Button
  const resetPasswordBtn = document.getElementById("resetPasswordBtn");
  resetPasswordBtn.disabled = true;
}

// Function to close the password reset modal
function closeResetPasswordModal() {
  const resetPasswordModal = document.getElementById("resetPasswordModal");
  resetPasswordModal.style.display = "none";
}

// Function to handle input change in the Reset Username field
function handleResetUsernameInputChange() {
  const resetUsernameInput = document.getElementById("resetUsername");
  const resetPasswordBtn = document.getElementById("resetPasswordBtn");

  // Enable the Reset Button only if the Reset Username field is not empty
  resetPasswordBtn.disabled = !resetUsernameInput.value.trim();

  // Update button style based on disabled state
  if (resetPasswordBtn.disabled) {
    resetPasswordBtn.style.backgroundColor = "#d3d3d3"; /* Light gray background color */
    resetPasswordBtn.style.color = "#a9a9a9"; /* Dark gray text color */
    resetPasswordBtn.style.cursor = "not-allowed"; /* Display not-allowed cursor when disabled */
  } else {
    resetPasswordBtn.style.backgroundColor = "#4caf50"; /* Green background color */
    resetPasswordBtn.style.color = "white"; /* White text color */
    resetPasswordBtn.style.cursor = "pointer"; /* Change cursor on hover */
  }
}

html...
<div id="resetPasswordModal" class="modal">
      <div class="modal-content">
        <span class="close" onclick="closeResetPasswordModal()">&times;</span>
        <h2>Password Reset</h2>
        <form id="resetPasswordForm">
          <label for="resetUsername">Username:</label>
          <input
            type="text"
            id="resetUsername"
            placeholder="Enter the User Name"
            autocomplete="resetUsername"
          />
          <button type="button" id="resetPasswordBtn">Reset Password</button>
        </form>
      </div>
    </div>

// Function to open the password reset modal
function openResetPasswordModal() {
  const resetPasswordModal = document.getElementById("resetPasswordModal");
  resetPasswordModal.style.display = "block";

  // Add event listener to the input field for real-time validation
  const resetUsernameInput = document.getElementById("resetUsername");
  resetUsernameInput.addEventListener("input", handleResetUsernameInputChange);

  // Initially disable the Reset Button
  const resetPasswordBtn = document.getElementById("resetPasswordBtn");
  resetPasswordBtn.disabled = true;
}

// Function to close the password reset modal
function closeResetPasswordModal() {
  const resetPasswordModal = document.getElementById("resetPasswordModal");
  resetPasswordModal.style.display = "none";
}

// Function to handle input change in the Reset Username field
function handleResetUsernameInputChange() {
  const resetUsernameInput = document.getElementById("resetUsername");
  const resetPasswordBtn = document.getElementById("resetPasswordBtn");

  // Enable the Reset Button only if the Reset Username field is not empty
  resetPasswordBtn.disabled = !resetUsernameInput.value.trim();
}
.

new...
// Function to open the password reset modal
function openResetPasswordModal() {
  const resetPasswordModal = document.getElementById("resetPasswordModal");
  resetPasswordModal.style.display = "block";

  // Add event listener to the input field for real-time validation
  const resetUsernameInput = document.getElementById("resetUsername");
  resetUsernameInput.addEventListener("input", handleResetUsernameInputChange);

  // Initially disable the Reset Buttons
  const resetPasswordBtns = document.querySelectorAll(".resetPasswordBtn");
  resetPasswordBtns.forEach(btn => {
    btn.disabled = true;
  });
}

// Function to close the password reset modal
function closeResetPasswordModal() {
  const resetPasswordModal = document.getElementById("resetPasswordModal");
  resetPasswordModal.style.display = "none";
}

// Function to handle input change in the Reset Username field
function handleResetUsernameInputChange() {
  const resetUsernameInput = document.getElementById("resetUsername");
  const resetPasswordBtns = document.querySelectorAll(".resetPasswordBtn");

  // Enable the Reset Buttons only if the Reset Username field is not empty
  const isUsernameEmpty = !resetUsernameInput.value.trim();
  resetPasswordBtns.forEach(btn => {
    btn.disabled = isUsernameEmpty;
  });
}

condition...
4	Once the User Name is entered Check if the entered username is present in the Local Storage 																									
5	Add Validation not to enter,paste special characters in User Name																									
6	If Present the Open a Pop Up Modal with Name as Password Reset Modal which will contain Non Editable User Name and New Password and Retype New Password Fields and a Submit Button.																									
7	On Click of the Submit Button in Password Reset Modal find the username and set this new password for the username in local storage.																									
8	Add Validation to check if Password has 8 Characters, Min 1 Lower Case, Min 1 Upper Case and Min 1 Special Character																									
9	Allowed Special Characters in Password (!@#$%^) and anything out of this then throw an Error Message stating that the Special Character should be within this.																									
10	Disable Copy, Paste using ShortCuts and Right Click on Password Field.																									
11	On Click of the Submit Button in Password Reset Modal check if New Password and Reset Password Values martch and if not and show BootStrap Success alert in the Modal  Stating  "Password does not match" on the Top of  Password Reset Screen 																									
12	BootStrap alert should have a X Mark to close also the message should disappear automatically in 5 seconds or by clicking the X Mark.																									
13	If all Validations are good then close the Password Reset Modal and show BootStrap Success alert in the Modal  Stating  "User Password Reset Success" on the Top of  Login Screen 																									



condition 4..
// Function to handle input change in the Reset Username field
function handleResetUsernameInputChange() {
  const resetUsernameInput = document.getElementById("resetUsername");
  const resetPasswordBtns = document.querySelectorAll(".resetPasswordBtn");

  // Enable the Reset Buttons only if the Reset Username field is not empty
  const isUsernameEmpty = !resetUsernameInput.value.trim();
  resetPasswordBtns.forEach(btn => {
    btn.disabled = isUsernameEmpty;
  });

  // Check if the entered username is present in Local Storage
  const enteredUsername = resetUsernameInput.value.trim();
  const storedUsernames = JSON.parse(localStorage.getItem("usernames")) || [];

  const isUsernameInLocalStorage = storedUsernames.includes(enteredUsername);

  if (isUsernameInLocalStorage) {
    // Username is present in Local Storage, you can add further logic here
    console.log("Username found in Local Storage:", enteredUsername);
  } else {
    // Username is not present in Local Storage, you can add further logic here
    console.log("Username not found in Local Storage:", enteredUsername);
  }
}

u...
// Function to handle input change in the Reset Username field
function handleResetUsernameInputChange() {
  const resetUsernameInput = document.getElementById("resetUsername");
  const resetPasswordBtns = document.querySelectorAll(".resetPasswordBtn");

  // Enable the Reset Buttons only if the Reset Username field is not empty
  const isUsernameEmpty = !resetUsernameInput.value.trim();
  resetPasswordBtns.forEach(btn => {
    btn.disabled = isUsernameEmpty;
  });

  // Check if the entered username is present in Local Storage
  const enteredUsername = resetUsernameInput.value.trim();
  const storedUsernames = JSON.parse(localStorage.getItem("usernames")) || [];

  const isUsernameInLocalStorage = storedUsernames.includes(enteredUsername);

  if (isUsernameInLocalStorage) {
    console.log("Username found in Local Storage:", enteredUsername);
  } else {
    console.log("Username not found in Local Storage:", enteredUsername);

    // If the username is not found, you can add it to Local Storage
    storedUsernames.push(enteredUsername);
    localStorage.setItem("usernames", JSON.stringify(storedUsernames));

    console.log("Username added to Local Storage:", enteredUsername);
  }
}
cond 5..

// Function to handle input change in the Reset Username field
function handleResetUsernameInputChange() {
  const resetUsernameInput = document.getElementById("resetUsername");
  const resetPasswordBtns = document.querySelectorAll(".resetPasswordBtn");

  // Enable the Reset Buttons only if the Reset Username field is not empty
  const isUsernameEmpty = !resetUsernameInput.value.trim();
  resetPasswordBtns.forEach(btn => {
    btn.disabled = isUsernameEmpty;
  });

  // Check if the entered username is present in Local Storage
  const enteredUsername = resetUsernameInput.value.trim();

  // Validation: Ensure that special characters are not present
  const containsSpecialCharacters = /[!@#$%^&*(),.?":{}|<>]/.test(enteredUsername);

  if (containsSpecialCharacters) {
    console.log("Special characters are not allowed in the username");
    // Optionally, you can clear the input field or display an error message
    resetUsernameInput.value = "";
  } else {
    console.log("Username is valid:", enteredUsername);

    // Continue with the rest of the code (e.g., checking Local Storage, enabling buttons, etc.)
    // ...
  }
}

