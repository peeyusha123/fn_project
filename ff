CREATE OR REPLACE PROCEDURE DeleteUserDetailsAndLocation(
   p_userID IN NUMBER
)
IS
BEGIN
   -- Delete from USER_LOCATION_DETAILS
   DELETE FROM your_schema.USER_LOCATION_DETAILS WHERE user_id = p_userID;

   -- Delete from USER_DETAILS
   DELETE FROM your_schema.USER_DETAILS WHERE user_id = p_userID;

   DBMS_OUTPUT.PUT_LINE('User details and location deleted for user ID: ' || p_userID);
END DeleteUserDetailsAndLocation;
/




-- Disable constraints
ALTER TABLE your_schema.USER_LOCATION_DETAILS DISABLE CONSTRAINT constraint_name;
ALTER TABLE your_schema.USER_DETAILS DISABLE CONSTRAINT constraint_name;

-- Execute the procedure
BEGIN
   DeleteUserDetailsAndLocation(p_userID => 1);
END;
/

-- Enable constraints
ALTER TABLE your_schema.USER_LOCATION_DETAILS ENABLE CONSTRAINT constraint_name;
ALTER TABLE your_schema.USER_DETAILS ENABLE CONSTRAINT constraint_name;


SELECT constraint_name
FROM all_constraints
WHERE r_constraint_name IN (
    SELECT constraint_name
    FROM all_constraints
    WHERE table_name = 'USER_DETAILS'
);


SELECT constraint_name, table_name, column_name
FROM all_cons_columns
WHERE constraint_name IN (
    SELECT constraint_name
    FROM all_constraints
    WHERE r_constraint_name IN (
        SELECT constraint_name
        FROM all_constraints
        WHERE table_name = 'USER_DETAILS'
    )
);

new...
CREATE OR REPLACE FUNCTION IsUserIDExists(p_userID IN NUMBER) RETURN BOOLEAN
IS
   v_userExists BOOLEAN;
BEGIN
   SELECT 1 INTO v_userExists FROM USER_DETAILS WHERE user_id = p_userID;
   RETURN TRUE;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      RETURN FALSE;
END IsUserIDExists;
/


DECLARE
   v_result BOOLEAN;
BEGIN
   v_result := IsUserIDExists(p_userID => 1);
   DBMS_OUTPUT.PUT_LINE('User ID exists: ' || v_result);
END;
/
