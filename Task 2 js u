hijiye
function submitForm() {
    const username = document.getElementById('username').value;
    const password = document.getElementById('password').value;

    if (username === '' || password === '') {
        alert('Username and password are mandatory');
        if (username === '') {
            document.getElementById('username').style.border = '2px solid red';
            document.getElementById('username').focus();
        } else {
            document.getElementById('username').style.border = '1px solid #ccc';
            document.getElementById('password').style.border = '2px solid red';
            document.getElementById('password').focus();
        }
        return;
    }

    const userObject = {
        userName: username,
        pwd: password
    };

    console.log('Username and password data:', username, password);
    console.log('Username and password JSON data:', JSON.stringify(userObject));

    // Additional logic for local storage validation can be added here
}




new..

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100vh;
        }

        form {
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            width: 300px;
            text-align: center;
        }

        input {
            width: 100%;
            padding: 8px;
            margin: 8px 0;
            box-sizing: border-box;
        }

        button {
            background-color: #4caf50;
            color: white;
            padding: 10px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        button:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }

        .error {
            color: red;
        }
    </style>
    <title>Login Page</title>
</head>
<body>

<form id="loginForm">
    <label for="username">Username:</label>
    <input type="text" id="username" placeholder="Enter the User Name">

    <label for="password">Password:</label>
    <input type="password" id="password" placeholder="Enter the Password">

    <button type="button" id="submitBtn" disabled>Submit</button>
    <button type="button" id="resetBtn" style="display:none;">Reset</button>
    <button type="button" id="signupBtn">Sign Up</button>
    <button type="button" id="resetPasswordBtn">Password Reset</button>

    <script>
        document.getElementById('username').addEventListener('blur', function () {
            validateField('username');
            updateResetButtonVisibility();
            updateSubmitButtonState();
        });

        document.getElementById('password').addEventListener('blur', function () {
            validateField('password');
            updateResetButtonVisibility();
            updateSubmitButtonState();
        });

        document.getElementById('submitBtn').addEventListener('click', function () {
            submitForm();
        });

        document.getElementById('resetBtn').addEventListener('click', function () {
            resetForm();
        });

        function validateField(field) {
            const element = document.getElementById(field);
            if (element.value.trim() === '') {
                element.style.border = '2px solid red';
            } else {
                element.style.border = '1px solid #ccc';
            }
        }

        function updateResetButtonVisibility() {
            const usernameField = document.getElementById('username');
            const passwordField = document.getElementById('password');
            const resetButton = document.getElementById('resetBtn');

            if (usernameField.value !== '' && passwordField.value !== '') {
                resetButton.style.display = 'inline-block';
            } else {
                resetButton.style.display = 'none';
            }
        }

        function updateSubmitButtonState() {
            const usernameField = document.getElementById('username');
            const passwordField = document.getElementById('password');
            const submitButton = document.getElementById('submitBtn');

            if (usernameField.value === '' && passwordField.value === '') {
                submitButton.disabled = true;
            } else {
                submitButton.disabled = false;
            }
        }

        function submitForm() {
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;

            if (username === '' || password === '') {
                alert('Username and password are mandatory');
                if (username === '') {
                    document.getElementById('username').style.border = '2px solid red';
                    document.getElementById('username').focus();
                } else {
                    document.getElementById('username').style.border = '1px solid #ccc';
                    document.getElementById('password').style.border = '2px solid red';
                    document.getElementById('password').focus();
                }
                return;
            }

            const userObject = {
                userName: username,
                pwd: password
            };

            console.log('Username and password data:', username, password);
            console.log('Username and password JSON data:', JSON.stringify(userObject));

            // Additional logic for local storage validation can be added here
        }

        function resetForm() {
            document.getElementById('username').value = '';
            document.getElementById('password').value = '';
            updateResetButtonVisibility();
            updateSubmitButtonState();
        }

        function signup() {
            // Additional logic for sign up can be added here
        }

        function resetPassword() {
            // Additional logic for password reset can be added here
        }
    </script>
</form>

</body>
</html>


1	Create a Sign Up Modal with User Name, Password and Submit and Reset Storage Button which will open on clicking of Sign Up Button from the Login Page
2	Add a place holder in the User Name box as Enter the User Name and in password box as Enter the Password.
3	Create a User List Object and store the entered User Name in a key called userName and Password into pwd key inside the User Object.
4	Once the User Clicks on Submit Button then Log the Username and password JSON List Data in the Console.
5	Now Store the List to the Browser Local Storage
6	On Click on the Reset Storage Button clear the Stored Local Storage List.
7	On Submit check if the new username entered is present in the existing Local Storage List and incase if its present then throw an BootStrap Error alert in the Modal   Stating  "User Name already taken choose another Name and Try Again"  and place the Cursor in the Username Field.
8	On Submit check if the new username entered is not present in the existing Local Storage List then close the SignUp modal and show BootStrap Success alert in the Modal  Stating  "User is Created" on the Top of  Login Screen 
9	BootStrap alert should have a X Mark to close also the message should disappear automatically in 5 seconds or by clicking the X Mark.
10	Add Validation not to get Special Characters in User Name
11	Add Validation to check if Password has 8 Characters, Min 1 Lower Case, Min 1 Upper Case and Min 1 Special Character
12	Allowed Special Characters in Password (!@#$%^) and anything out of this then throw an Error Message stating that the Special Character should be within this.
13	Disable Copy, Paste using ShortCuts and Right Click on Password Field.


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        /* Existing styles remain unchanged */

        /* Additional styles for modal */
        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgb(0,0,0);
            background-color: rgba(0,0,0,0.4);
            padding-top: 60px;
        }

        .modal-content {
            background-color: #fefefe;
            margin: 5% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }
    </style>
    <title>Login Page</title>
</head>
<body>

<form id="loginForm">
    <!-- Existing form fields remain unchanged -->

    <button type="button" id="signupBtn" onclick="openSignUpModal()">Sign Up</button>
    <button type="button" id="resetPasswordBtn">Password Reset</button>

    <!-- SignUp Modal -->
    <div id="signupModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeSignUpModal()">&times;</span>
            <label for="signupUsername">Username:</label>
            <input type="text" id="signupUsername" placeholder="Enter the User Name">

            <label for="signupPassword">Password:</label>
            <input type="password" id="signupPassword" placeholder="Enter the Password">

            <button type="button" onclick="submitSignUp()">Submit</button>
            <button type="button" onclick="resetLocalStorage()">Reset Storage</button>
        </div>
    </div>

    <script>
        // Existing script remains unchanged

        function openSignUpModal() {
            document.getElementById('signupModal').style.display = 'block';
        }

        function closeSignUpModal() {
            document.getElementById('signupModal').style.display = 'none';
        }

        function submitSignUp() {
            const newUsername = document.getElementById('signupUsername').value;
            const newPassword = document.getElementById('signupPassword').value;

            // Validation checks for username and password (conditions 10, 11, 12)

            // Check if username already exists in Local Storage (condition 7)
            const userList = JSON.parse(localStorage.getItem('userList')) || [];

            if (userList.some(user => user.userName === newUsername)) {
                alert('Username already taken. Choose another name and try again.');
                document.getElementById('signupUsername').style.border = '2px solid red';
                document.getElementById('signupUsername').focus();
                return;
            }

            // Check if password has allowed special characters (condition 12)
            const specialChars = '!@#$%^';
            if (![...newPassword].every(char => /[a-zA-Z\d]/.test(char) || specialChars.includes(char))) {
                alert('Special characters in password should be within (!@#$%^).');
                document.getElementById('signupPassword').style.border = '2px solid red';
                document.getElementById('signupPassword').focus();
                return;
            }

            // Check if password meets criteria (condition 11)
            if (!/^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^]).{8,}$/.test(newPassword)) {
                alert('Password should have 8 characters, at least 1 lowercase, 1 uppercase, and 1 special character.');
                document.getElementById('signupPassword').style.border = '2px solid red';
                document.getElementById('signupPassword').focus();
                return;
            }

            const newUser = {
                userName: newUsername,
                pwd: newPassword
            };

            // Log data to console (condition 4)
            console.log('New user data:', newUsername, newPassword);
            console.log('New user JSON data:', JSON.stringify(newUser));

            // Store new user in Local Storage (condition 5)
            userList.push(newUser);
            localStorage.setItem('userList', JSON.stringify(userList));

            // Display success alert (condition 8)
            alert('User created successfully!');

            // Close SignUp modal
            closeSignUpModal();
        }

        function resetLocalStorage() {
            // Clear Local Storage (condition 6)
            localStorage.removeItem('userList');
            alert('Local Storage reset successfully.');
        }
    </script>
</form>

</body>
</html>

new 2

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        /* Existing styles ... */

        #signupModal {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            width: 300px;
            text-align: center;
            z-index: 1000;
        }
    </style>
    <!-- ... (existing head content) ... -->
</head>
<body>

<!-- Login Form -->
<form id="loginForm">
    <!-- ... (existing form content) ... -->
    <button type="button" id="signupBtn">Sign Up</button>
</form>

<!-- Sign Up Modal -->
<div id="signupModal">
    <form id="signupForm">
        <label for="signupUsername">Username:</label>
        <input type="text" id="signupUsername" placeholder="Enter the User Name">

        <label for="signupPassword">Password:</label>
        <input type="password" id="signupPassword" placeholder="Enter the Password">

        <button type="button" id="signupSubmitBtn">Submit</button>
        <button type="button" id="signupResetBtn">Reset Storage</button>
    </form>
</div>

<script>
    // ... (existing script content) ...

    document.getElementById('signupBtn').addEventListener('click', function () {
        openSignupModal();
    });

    document.getElementById('signupSubmitBtn').addEventListener('click', function () {
        signup();
    });

    document.getElementById('signupResetBtn').addEventListener('click', function () {
        resetSignupStorage();
    });

    function openSignupModal() {
        document.getElementById('signupModal').style.display = 'block';
        document.getElementById('signupUsername').value = ''; // Clear previous input
        document.getElementById('signupPassword').value = ''; // Clear previous input
    }

    function closeSignupModal() {
        document.getElementById('signupModal').style.display = 'none';
    }

    function resetSignupStorage() {
        // Clear the stored local storage list for sign-up
        localStorage.removeItem('userList');
    }

    function signup() {
        // ... (existing signup logic) ...
    }

    // ... (existing functions) ...
</script>

</body>
</html>

js....


document.getElementById('signupBtn').addEventListener('click', function () {
    openSignUpModal();
});

function openSignUpModal() {
    // Create and display the sign-up modal
    const signUpModal = document.createElement('div');
    signUpModal.innerHTML = `
        <div id="signUpModal" style="display: block; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5);">
            <form id="signUpForm" style="background-color: #fff; padding: 20px; border-radius: 8px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); width: 300px; text-align: center; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <label for="newUsername">User Name:</label>
                <input type="text" id="newUsername" placeholder="Enter the User Name">

                <label for="newPassword">Password:</label>
                <input type="password" id="newPassword" placeholder="Enter the Password">

                <button type="button" id="submitSignUpBtn">Submit</button>
                <button type="button" id="resetStorageBtn">Reset Storage</button>
            </form>
        </div>
    `;
    document.body.appendChild(signUpModal);

    // Attach event listeners for the new modal
    document.getElementById('submitSignUpBtn').addEventListener('click', function () {
        submitSignUpForm();
    });

    document.getElementById('resetStorageBtn').addEventListener('click', function () {
        resetLocalStorage();
    });
}

function submitSignUpForm() {
    const newUsername = document.getElementById('newUsername').value;
    const newPassword = document.getElementById('newPassword').value;

    // Validate username and password
    // Implement conditions 10, 11, and 12 here

    // Check if the new username is already taken
    const userList = JSON.parse(localStorage.getItem('userList')) || [];
    const isUsernameTaken = userList.some(user => user.userName === newUsername);

    if (isUsernameTaken) {
        alert("User Name already taken. Choose another Name and Try Again");
        document.getElementById('newUsername').focus();
        return;
    }

    const newUserObject = {
        userName: newUsername,
        pwd: newPassword
    };

    userList.push(newUserObject);

    // Log the data and store in local storage
    console.log('New User Data:', newUsername, newPassword);
    console.log('New User JSON Data:', JSON.stringify(newUserObject));
    console.log('Updated User List:', userList);

    localStorage.setItem('userList', JSON.stringify(userList));

    // Close the modal
    document.getElementById('signUpModal').remove();

    // Show success alert on the login screen
    showSuccessAlert('User is Created');
}

function resetLocalStorage() {
    // Clear stored local storage list
    localStorage.removeItem('userList');

    // Close the modal
    document.getElementById('signUpModal').remove();
}

function showSuccessAlert(message) {
    // Display a success alert with a close button
    const successAlert = document.createElement('div');
    successAlert.innerHTML = `
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            ${message}
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
    `;
    document.body.appendChild(successAlert);

    // Automatically close the alert after 5 seconds
    setTimeout(function () {
        successAlert.remove();
    }, 5000);
}

// Implement validations for username and password (conditions 10, 11, and 12) as needed.
// Disable Copy, Paste using ShortCuts and Right Click on Password Field (condition 13).



new new 1...
function submitSignUpForm() {
    const newUsername = document.getElementById('newUsername').value;
    const newPassword = document.getElementById('newPassword').value;

    // Validate username and password
    // Implement conditions 10, 11, and 12 here

    // Check if the new username is already taken
    const userList = JSON.parse(localStorage.getItem('userList')) || [];
    const isUsernameTaken = userList.some(user => user.userName === newUsername);

    if (isUsernameTaken) {
        alert("User Name already taken. Choose another Name and Try Again");
        document.getElementById('newUsername').focus();
        return;
    }

    const newUserObject = {
        username: newUsername, // Use 'username' instead of 'userName'
        pwd: newPassword
    };

    userList.push(newUserObject);

    // Log the data and store in local storage
    console.log('New User Data:', newUsername, newPassword);
    console.log('New User JSON Data:', JSON.stringify(newUserObject));
    console.log('Updated User List:', userList);

    localStorage.setItem('userList', JSON.stringify(userList));

    // Close the modal
    document.getElementById('signUpModal').remove();

    // Show success alert on the login screen
    showSuccessAlert('User is Created');

    // Log the username and password JSON list data
    console.log('Username and password JSON List Data:', JSON.stringify(userList));
}



