
SELECT object_name, object_type
FROM all_objects
WHERE object_name = 'USER_DETAILS';



SELECT constraint_name
FROM all_cons_columns
WHERE table_name = 'USER_LOCATION_DETAILS' AND column_name = 'USER_ID';

-- Drop foreign key constraints
ALTER TABLE USER_LOCATION_DETAILS DROP CONSTRAINT fk_user_location_user_id;
ALTER TABLE USER_DETAILS_HISTORY DROP CONSTRAINT fk_user_details_history_user_id;
ALTER TABLE USER_DETAILS_HISTORY DROP CONSTRAINT fk_user_details_history_changed_by_user_id;

-- Drop tables
DROP TABLE USER_LOCATION_DETAILS;
DROP TABLE USER_DETAILS_HISTORY;
DROP TABLE USER_DETAILS;






-- Create Table to Store USER DETAILS
CREATE TABLE USER_DETAILS (
    USER_ID INT PRIMARY KEY,
    USERNAME VARCHAR(255) NOT NULL,
    PASSWORD VARCHAR(255) NOT NULL,
    EMAIL VARCHAR(255) NOT NULL
);

-- Create Table to Store USER LOCATION DETAILS with foreign key
CREATE TABLE USER_LOCATION_DETAILS (
    USER_ID INT PRIMARY KEY,
    CITY VARCHAR(255),
    STATE VARCHAR(255),
    FOREIGN KEY (USER_ID) REFERENCES USER_DETAILS(USER_ID)
);

-- Create a Table to Store the history of USER DETAILS HISTORY Changes
CREATE TABLE USER_DETAILS_HISTORY (
    HISTORY_ID INT PRIMARY KEY,
    USER_ID INT,
    OLD_VALUE VARCHAR(255),
    NEW_VALUE VARCHAR(255),
    CHANGED_BY_USERID INT,
    CHANGE_TIME TIMESTAMP,
    FOREIGN KEY (USER_ID) REFERENCES USER_DETAILS(USER_ID)
);

-- Insert Query to insert User Details
INSERT INTO USER_DETAILS (USER_ID, USERNAME, PASSWORD, EMAIL)
VALUES (1, 'example_user', 'password123', 'user@example.com');

-- Insert Query to insert User Location Details
INSERT INTO USER_LOCATION_DETAILS (USER_ID, CITY, STATE)
VALUES (1, 'City1', 'State1');

-- Update query to update User Password
UPDATE USER_DETAILS
SET PASSWORD = 'newpassword'
WHERE USER_ID = 1;

-- Update query to update User Location Details
UPDATE USER_LOCATION_DETAILS
SET CITY = 'NewCity', STATE = 'NewState'
WHERE USER_ID = 1;

-- Create Procedure to delete USER DETAILS and USER LOCATION DETAILS
CREATE PROCEDURE DeleteUserDetailsAndLocation(IN p_user_id INT)
BEGIN
    DELETE FROM USER_DETAILS WHERE USER_ID = p_user_id;
    DELETE FROM USER_LOCATION_DETAILS WHERE USER_ID = p_user_id;
END;

-- Create Function to check if user id is present in USER DETAILS Table
CREATE FUNCTION IsUserIdPresent(IN p_user_id INT)
RETURNS BOOLEAN
BEGIN
    DECLARE user_exists BOOLEAN;
    SELECT EXISTS(SELECT 1 FROM USER_DETAILS WHERE USER_ID = p_user_id) INTO user_exists;
    RETURN user_exists;
END;

-- Create Trigger on USER DETAILS table for insert and update operations
CREATE TRIGGER UserDetailsHistoryTrigger
AFTER INSERT OR UPDATE ON USER_DETAILS
FOR EACH ROW
BEGIN
    INSERT INTO USER_DETAILS_HISTORY (USER_ID, OLD_VALUE, NEW_VALUE, CHANGED_BY_USERID, CHANGE_TIME)
    VALUES (NEW.USER_ID, OLD.PASSWORD, NEW.PASSWORD, 1, NOW());
END;


new....


CREATE TABLE USER_DETAILS (
   user_id INT PRIMARY KEY,
   username VARCHAR(255) NOT NULL,
   password VARCHAR(255) NOT NULL,
   email VARCHAR(255) NOT NULL
);


CREATE TABLE USER_LOCATION_DETAILS (
   location_id INT PRIMARY KEY,
   user_id INT,
   city VARCHAR(255) NOT NULL,
   state VARCHAR(255) NOT NULL,
   FOREIGN KEY (user_id) REFERENCES USER_DETAILS(user_id)
);

CREATE TABLE USER_DETAILS_HISTORY (
   history_id INT PRIMARY KEY,
   user_id INT,
   old_value VARCHAR(255),
   new_value VARCHAR(255),
   changed_by_user_id INT,
   change_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
   FOREIGN KEY (user_id) REFERENCES USER_DETAILS(user_id),
   FOREIGN KEY (changed_by_user_id) REFERENCES USER_DETAILS(user_id)
);


INSERT INTO USER_DETAILS (user_id, username, password, email)
VALUES (1, 'example_user', 'password123', 'user@example.com');


INSERT INTO USER_LOCATION_DETAILS (location_id, user_id, city, state)
VALUES (1, 1, 'CityName', 'StateName');


UPDATE USER_DETAILS
SET password = 'new_password'
WHERE user_id = 1;


UPDATE USER_LOCATION_DETAILS
SET city = 'NewCity', state = 'NewState'
WHERE user_id = 1;


CREATE PROCEDURE DeleteUserDetailsAndLocation(IN userID INT)
BEGIN
   DELETE FROM USER_DETAILS WHERE user_id = userID;
   DELETE FROM USER_LOCATION_DETAILS WHERE user_id = userID;
END;



CREATE FUNCTION CheckUserIDExistence(IN userID INT) RETURNS BOOLEAN
BEGIN
   DECLARE userExists BOOLEAN;
   SELECT EXISTS(SELECT 1 FROM USER_DETAILS WHERE user_id = userID) INTO userExists;
   RETURN userExists;
END;


CREATE TRIGGER UserDetailsHistoryTrigger
AFTER INSERT OR UPDATE ON USER_DETAILS
FOR EACH ROW
INSERT INTO USER_DETAILS_HISTORY (user_id, old_value, new_value, changed_by_user_id)
VALUES (NEW.user_id, NULL, NEW.username, NEW.user_id);

CREATE TRIGGER UserLocationDetailsHistoryTrigger
AFTER INSERT OR UPDATE ON USER_LOCATION_DETAILS
FOR EACH ROW
INSERT INTO USER_DETAILS_HISTORY (user_id, old_value, new_value, changed_by_user_id)
VALUES (NEW.user_id, NULL, CONCAT(NEW.city, ', ', NEW.state), NEW.user_id);





Tax Bond Certificates for 
Closeout Milestone


Objective
For a subset of sites in MA, RI, and CT - Verizon is experiencing issues where general contractors based outside of state are not paying appropriate tax bonds for material cost (dubbed “Non Resident Contractor” or NRC fees). When the GC does not pay NRC fees, Verizon is liable to pay these costs themselves. This is costing Verizon ~$3M per year.
SPM Requirements
Closeout Document Milestone Changes
Document Upload Task Changes
Introduce a new selectable document subtype called “Tax Bond Certificate”
Create a new picklist field within this task:
Field Name: In State GC?
Field Data Type: Picklist Field
Field Tooltip: Are all general contractors assigned to this project performing work as a resident contractor (registered with state and remitting S&U tax returns) of the state of SITE_ADDRESS_STATE? 
SITE_ADDRESS_STATE will be the same state as the Project Level Physical Site Address State: MA, CT, or RI
Required Field: Yes
Selectable Values:
Yes
No
Default Value: Yes
Create a new date field called “Tax Bond Certificate Uploaded (F)/(A)”
Field Name: Tax Bond Certificate Uploaded
Field Data Type: (F)/(A) date
Field Definition / Tooltip: 
This date verifies NRC fees have been paid by the Verizon General Contractor and appropriate tax bond receipts have been received by Verizon if NRC fees apply to this project
Field Requirements:
The Actual Date field will be required to finalize the Documents Uploaded Task if the following conditions are met:
Construction Completed Milestone Status != N/A (construction was performed on this project)
Project Level Physical Site Address State is MA, CT, or RI
In State GC Picklist is set to “No”
Otherwise, this field will not be required 

