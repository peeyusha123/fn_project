// Function to open the password reset modal
// In openResetPasswordModal function
function openResetPasswordModal(triggeredFromLogin = false) {
  const resetPasswordModal = document.getElementById("resetPasswordModal");

  resetPasswordModal.style.display = "block";

  // Add event listener to the input field for real-time validation
  const resetUsernameInput = document.getElementById("resetUsername");
  resetUsernameInput.addEventListener("input", handleResetUsernameInputChange);

  // Initially disable the Reset Buttons
  const resetPasswordBtns = document.querySelectorAll(".resetPasswordBtn");
  resetPasswordBtns.forEach((btn) => {
    btn.disabled = true;
  });

  if (triggeredFromLogin) {
    resetUsernameInput.value = "";
  }

  // Return a promise that resolves after opening the resetpasswordmodal
  return new Promise((resolve) => {
    setTimeout(() => {
      if (triggeredFromLogin) {
        enteredUsername = resetUsernameInput.value.trim();
        openPasswordResetModal(enteredUsername);
      }
      resolve();
    }, 0);
  });
}

// In openResetPasswordModalFromLogin function
async function openResetPasswordModalFromLogin() {
  await openResetPasswordModal(true);
  openPasswordResetModal();
}

// Function to handle input change in the Reset Username field
function handleResetUsernameInputChange() {
  let isUsernameInLocalStorage;
  const resetUsernameInput = document.getElementById("resetUsername");
  const resetPasswordBtns = document.querySelectorAll(".resetPasswordBtn");

  // Enable the Reset Buttons only if the Reset Username field is not empty

  const isUsernameEmpty = !resetUsernameInput.value.trim();
  const containsSpecialCharacters = /[!@#$%^&*(),.?":{}|<>]/.test(
    resetUsernameInput.value.trim()
  );

  resetPasswordBtns.forEach((btn) => {
    btn.disabled = isUsernameEmpty || containsSpecialCharacters;
  });
  let enteredUsername = resetUsernameInput.value.trim();
  isCompleteUsername = enteredUsername && enteredUsername.length > 1;

  if (
    document.getElementById("passwordResetModal").style.display === "block" &&
    document.getElementById("passwordResetModal").offsetHeight > 0 &&
    !isCompleteUsername
  ) {
    resetUsernameInput.value = "";
  }

  // Check if the entered username is present in Local Storage

  if (!containsSpecialCharacters) {
    const storedUsernames = JSON.parse(localStorage.getItem("userList")) || [];

    isUsernameInLocalStorage = storedUsernames.some(
      (user) => user.userName === enteredUsername
    );

    // Optionally, you can clear the input field or display an error message
    resetUsernameInput.value = "";
  } else {
    const storedUsernames = JSON.parse(localStorage.getItem("userList")) || [];
    const isUsernameInLocalStorage = storedUsernames.some(
      (user) => user.userName === enteredUsername
    );
    console.log("Username is valid:", enteredUsername);

    if (!isUsernameInLocalStorage) {
      storedUsernames.push({ userName: enteredUsername });
      localStorage.setItem("userList", JSON.stringify(storedUsernames));
    }

    openPasswordResetModal(enteredUsername);
  }

  const storedUsernames = JSON.parse(localStorage.getItem("usernames")) || [];
  isUsernameInLocalStorage = storedUsernames.includes(enteredUsername);

  if (isUsernameInLocalStorage) {
    console.log("Username found in Local Storage:", enteredUsername);
    openPasswordResetModal(enteredUsername);
  } else {
    console.log("Username not found in Local Storage:", enteredUsername);

    // If the username is not found, you can add it to Local Storage
    storedUsernames.push(enteredUsername);
    localStorage.setItem("usernames", JSON.stringify(storedUsernames));

    console.log("Username added to Local Storage:", enteredUsername);
  }
}

// Function to open the password reset modal from login
function openResetPasswordModalFromLogin() {
  openResetPasswordModal(true);
}

// Function to close the password reset modal
function closeResetPasswordModal() {
  //const resetPasswordModal = document.getElementById("resetPasswordModal");
  //resetPasswordModal.style.display = "none";
  resetUsernameInput = document.getElementById("resetUsername");
  resetUsernameInput.removeEventListener(
    "input",
    handleResetUsernameInputChange
  );
}

// Function to open the password reset modal
function openPasswordResetModal(username) {
  const passwordResetModal = document.getElementById("passwordResetModal");

  if (passwordResetModal) {
    passwordResetModal.style.display = "block";

    //set the username in the modal
    const usernameField = document.getElementById("resetUsernameDisplay");

    if (usernameField) {
      usernameField.value = username;
      usernameField.setAttribute("readonly", true);

      //add event listener to handle input change in second modal
      const newPasswordInput = document.getElementById("passwordNew");
      if (newPasswordInput) {
        newPasswordInput.addEventListener(
          "input",
          handleNewPasswordInputChange
        );
      }
    } else {
      console.error("Element with id 'resetUsernameModal' not found.");
    }
  } else {
    console.error("Element with id 'passwordResetModal' not found.");
  }
}
// Function to close the password reset modal
function closePasswordResetModal() {
  const passwordResetModal = document.getElementById("passwordResetModal");
  passwordResetModal.style.display = "none";
}

function handleNewPasswordInputChange() {
  newPasswordInput = document.getElementById("passwordNew");
}

// Function to submit the password reset form
function submitPasswordResetForm() {
  const newPasswordInput = document.getElementById("passwordNew");
  const retypeNewPasswordInput = document.getElementById("retypeNewPassword");
  const resetUsernameDisplay = document.getElementById("resetUsernameDisplay");

  // Validate Password
  const passwordRegex =
    /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^])(?=.*\d)[a-zA-Z\d!@#$%^]{8,}$/;
  const newPassword = newPasswordInput.value;
  const retypeNewPassword = retypeNewPasswordInput.value;

  if (!passwordRegex.test(newPassword)) {
    showErrorMessage("Password must meet the specified criteria.");
    return;
  }

  // Validate Special Characters
  const specialCharactersRegex = /[!@#$%^]/;
  if (!specialCharactersRegex.test(newPassword)) {
    showErrorMessage("Password must contain at least one of !@#$%^");
    return;
  }

  // Check if New Password and Retype Password Match
  if (newPassword !== retypeNewPassword) {
    showErrorMessage("Passwords do not match.");
    return;
  }

  // Update the password in local storage
  const userList = JSON.parse(localStorage.getItem("userList")) || [];
  const userIndex = userList.findIndex(
    (user) => user.userName === resetUsernameDisplay.value
  );

  if (userIndex !== -1) {
    userList[userIndex].pwd = newPassword;
    localStorage.setItem("userList", JSON.stringify(userList));
  }

  // Close the Password Reset Modal
  closePasswordResetModal();

  // Show Bootstrap Success Alert for Password Reset Success
  showSuccessMessage("User Password Reset Success");
}

function showErrorMessage(message) {
  showAlert(message, "alert-danger");
}

function showSuccessMessage(message) {
  showAlert(message, "alert-success");
}

function showAlert(message, alertType) {
  const loginForm = document.getElementById("loginForm");
  loginForm.insertAdjacentHTML(
    "afterbegin",
    `
    <div class="alert ${alertType} alert-dismissible fade show" role="alert">
      ${message}
      <button type="button" class="close" data-dismiss="alert" aria-label="Close">
        <span aria-hidden="true">&times;</span>
      </button>
    </div>
  `
  );

  // Set timeout to remove the alert after 5 seconds
  setTimeout(() => {
    document.querySelector(`.${alertType}`).remove();
  }, 5000);
}

//trail,js
// Function to open the password reset modal
// In openResetPasswordModal function
function openResetPasswordModal(triggeredFromLogin = false) {
  const resetPasswordModal = document.getElementById("resetPasswordModal");
  resetPasswordModal.style.display = "block";

  // Add event listener to the input field for real-time validation
  const resetUsernameInput = document.getElementById("resetUsername");
  resetUsernameInput.addEventListener("input", handleResetUsernameInputChange);

  // Initially disable the Reset Buttons
  const resetPasswordBtns = document.querySelectorAll(".resetPasswordBtn");
  resetPasswordBtns.forEach((btn) => {
    btn.disabled = true;
  });

  if (triggeredFromLogin) {
    resetUsernameInput.value = "";
  }

  // Return a promise that resolves after opening the resetpasswordmodal
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve();
    }, 0);
  });
}

// In openResetPasswordModalFromLogin function
async function openResetPasswordModalFromLogin() {
  await openResetPasswordModal(true);
  openPasswordResetModal();
}

// Function to handle input change in the Reset Username field
function handleResetUsernameInputChange() {
  let isUsernameInLocalStorage;
  const resetUsernameInput = document.getElementById("resetUsername");
  const resetPasswordBtns = document.querySelectorAll(".resetPasswordBtn");

  // Enable the Reset Buttons only if the Reset Username field is not empty

  const isUsernameEmpty = !resetUsernameInput.value.trim();
  const containsSpecialCharacters = /[!@#$%^&*(),.?":{}|<>]/.test(
    resetUsernameInput.value.trim()
  );

  resetPasswordBtns.forEach((btn) => {
    btn.disabled = isUsernameEmpty || containsSpecialCharacters;
  });

  if (
    document.getElementById("passwordResetModal").style.display === "block" &&
    document.getElementById("passwordResetModal").offsetHeight > 0
  ) {
    resetUsernameInput.value = "";
  }

  // Check if the entered username is present in Local Storage
  const enteredUsername = resetUsernameInput.value.trim();
  if (!containsSpecialCharacters) {
    const storedUsernames = JSON.parse(localStorage.getItem("userList")) || [];

    isUsernameInLocalStorage = storedUsernames.some(
      (user) => user.userName === enteredUsername
    );

    // Optionally, you can clear the input field or display an error message
    resetUsernameInput.value = "";
  } else {
    const storedUsernames = JSON.parse(localStorage.getItem("userList")) || [];
    const isUsernameInLocalStorage = storedUsernames.some(
      (user) => user.userName === enteredUsername
    );
    console.log("Username is valid:", enteredUsername);

    if (!isUsernameInLocalStorage) {
      storedUsernames.push({ userName: enteredUsername });
      localStorage.setItem("userList", JSON.stringify(storedUsernames));
    }

    openPasswordResetModal(enteredUsername);
  }

  const storedUsernames = JSON.parse(localStorage.getItem("usernames")) || [];
  isUsernameInLocalStorage = storedUsernames.includes(enteredUsername);

  if (isUsernameInLocalStorage) {
    console.log("Username found in Local Storage:", enteredUsername);
    openPasswordResetModal(enteredUsername);
  } else {
    console.log("Username not found in Local Storage:", enteredUsername);

    // If the username is not found, you can add it to Local Storage
    storedUsernames.push(enteredUsername);
    localStorage.setItem("usernames", JSON.stringify(storedUsernames));

    console.log("Username added to Local Storage:", enteredUsername);
  }
}

// Function to open the password reset modal from login
function openResetPasswordModalFromLogin() {
  openResetPasswordModal(true);
}

// Function to close the password reset modal
function closeResetPasswordModal() {
  //const resetPasswordModal = document.getElementById("resetPasswordModal");
  //resetPasswordModal.style.display = "none";
  resetUsernameInput = document.getElementById("resetUsername");
  resetUsernameInput.removeEventListener(
    "input",
    handleResetUsernameInputChange
  );
}

// Function to open the password reset modal
function openPasswordResetModal(username) {
  const passwordResetModal = document.getElementById("passwordResetModal");

  if (passwordResetModal) {
    passwordResetModal.style.display = "block";

    //set the username in the modal
    const usernameField = document.getElementById("resetUsernameDisplay");

    if (usernameField) {
      usernameField.value = username;
      usernameField.setAttribute("readonly", true);

      //add event listener to handle input change in second modal
      const newPasswordInput = document.getElementById("passwordNew");
      if (newPasswordInput) {
        newPasswordInput.addEventListener(
          "input",
          handleNewPasswordInputChange
        );
      }
    } else {
      console.error("Element with id 'resetUsernameModal' not found.");
    }
  } else {
    console.error("Element with id 'passwordResetModal' not found.");
  }
}
// Function to close the password reset modal
function closePasswordResetModal() {
  const passwordResetModal = document.getElementById("passwordResetModal");
  passwordResetModal.style.display = "none";
}

function handleNewPasswordInputChange() {
  newPasswordInput = document.getElementById("passwordNew");
}

// Function to submit the password reset form
function submitPasswordResetForm() {
  const newPasswordInput = document.getElementById("passwordNew");
  const retypeNewPasswordInput = document.getElementById("retypeNewPassword");
  const resetUsernameDisplay = document.getElementById("resetUsernameDisplay");

  // Validate Password
  const passwordRegex =
    /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^])(?=.*\d)[a-zA-Z\d!@#$%^]{8,}$/;
  const newPassword = newPasswordInput.value;
  const retypeNewPassword = retypeNewPasswordInput.value;

  if (!passwordRegex.test(newPassword)) {
    showErrorMessage("Password must meet the specified criteria.");
    return;
  }

  // Validate Special Characters
  const specialCharactersRegex = /[!@#$%^]/;
  if (!specialCharactersRegex.test(newPassword)) {
    showErrorMessage("Password must contain at least one of !@#$%^");
    return;
  }

  // Check if New Password and Retype Password Match
  if (newPassword !== retypeNewPassword) {
    showErrorMessage("Passwords do not match.");
    return;
  }

  // Update the password in local storage
  const userList = JSON.parse(localStorage.getItem("userList")) || [];
  const userIndex = userList.findIndex(
    (user) => user.userName === resetUsernameDisplay.value
  );

  if (userIndex !== -1) {
    userList[userIndex].pwd = newPassword;
    localStorage.setItem("userList", JSON.stringify(userList));
  }

  // Close the Password Reset Modal
  closePasswordResetModal();

  // Show Bootstrap Success Alert for Password Reset Success
  showSuccessMessage("User Password Reset Success");
}

function showErrorMessage(message) {
  showAlert(message, "alert-danger");
}

function showSuccessMessage(message) {
  showAlert(message, "alert-success");
}

function showAlert(message, alertType) {
  const loginForm = document.getElementById("loginForm");
  loginForm.insertAdjacentHTML(
    "afterbegin",
    `
    <div class="alert ${alertType} alert-dismissible fade show" role="alert">
      ${message}
      <button type="button" class="close" data-dismiss="alert" aria-label="Close">
        <span aria-hidden="true">&times;</span>
      </button>
    </div>
  `
  );

  // Set timeout to remove the alert after 5 seconds
  setTimeout(() => {
    document.querySelector(`.${alertType}`).remove();
  }, 5000);
}

above code should satisfied below conditions..
1	Create a Password Reset Screen with User Name and Reset  Button which will open on clicking of Password Reset Button from the Login Page
2	Add a place holder in the User Name box as Enter the User Name
3	Disable the Reset Button if User Name Field is empty.
4	Once the User Name is entered Check if the entered username is present in the Local Storage 
5	Add Validation not to enter,paste special characters in User Name
6	If Present the Open a Pop Up Modal with Name as Password Reset Modal which will contain Non Editable User Name and New Password and Retype New Password Fields and a Submit Button.
7	On Click of the Submit Button in Password Reset Modal find the username and set this new password for the username in local storage.
8	Add Validation to check if Password has 8 Characters, Min 1 Lower Case, Min 1 Upper Case and Min 1 Special Character
9	Allowed Special Characters in Password (!@#$%^) and anything out of this then throw an Error Message stating that the Special Character should be within this.
10	Disable Copy, Paste using ShortCuts and Right Click on Password Field.
11	On Click of the Submit Button in Password Reset Modal check if New Password and Reset Password Values martch and if not and show BootStrap Success alert in the Modal  Stating  "Password does not match" on the Top of  Password Reset Screen 
12	BootStrap alert should have a X Mark to close also the message should disappear automatically in 5 seconds or by clicking the X Mark.
13	If all Validations are good then close the Password Reset Modal and show BootStrap Success alert in the Modal  Stating  "User Password Reset Success" on the Top of  Login Screen 
