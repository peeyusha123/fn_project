//p4.js  updated
// Function to open the password reset modal
// In openResetPasswordModal function
function openResetPasswordModal(triggeredFromLogin = false) {
  const resetPasswordModal = document.getElementById("resetPasswordModal");
  resetPasswordModal.style.display = "block";

  // Add event listener to the input field for real-time validation
  const resetUsernameInput = document.getElementById("resetUsername");
  resetUsernameInput.addEventListener("input", handleResetUsernameInputChange);

  // Initially disable the Reset Buttons
  const resetPasswordBtns = document.querySelectorAll(".resetPasswordBtn");
  resetPasswordBtns.forEach((btn) => {
    btn.disabled = true;
  });

  if (triggeredFromLogin) {
    resetUsernameInput.value = "";
  }

  // Return a promise that resolves after opening the resetpasswordmodal
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve();
    }, 0);
  });
}

// In openResetPasswordModalFromLogin function
async function openResetPasswordModalFromLogin() {
  await openResetPasswordModal(true);
  openPasswordResetModal();
}

// Function to handle input change in the Reset Username field
function handleResetUsernameInputChange() {
  let isUsernameInLocalStorage;
  const resetUsernameInput = document.getElementById("resetUsername");
  const resetPasswordBtns = document.querySelectorAll(".resetPasswordBtn");

  // Enable the Reset Buttons only if the Reset Username field is not empty

  const isUsernameEmpty = !resetUsernameInput.value.trim();
  const containsSpecialCharacters = /[!@#$%^&*(),.?":{}|<>]/.test(
    resetUsernameInput.value.trim()
  );

  resetPasswordBtns.forEach((btn) => {
    btn.disabled = isUsernameEmpty || containsSpecialCharacters;
  });

  // Check if the entered username is present in Local Storage
  const enteredUsername = resetUsernameInput.value.trim();
  if (!containsSpecialCharacters) {
    const storedUsernames = JSON.parse(localStorage.getItem("userList")) || [];

    isUsernameInLocalStorage = storedUsernames.some(
      (user) => user.userName === enteredUsername
    );

    // Optionally, you can clear the input field or display an error message
    resetUsernameInput.value = "";
  } else {
    const storedUsernames = JSON.parse(localStorage.getItem("userList")) || [];
    const isUsernameInLocalStorage = storedUsernames.some(
      (user) => user.userName === enteredUsername
    );
    console.log("Username is valid:", enteredUsername);

    if (!isUsernameInLocalStorage) {
      storedUsernames.push({ userName: enteredUsername });
      localStorage.setItem("userList", JSON.stringify(storedUsernames));
    }

    openPasswordResetModal(enteredUsername);
  }

  const storedUsernames = JSON.parse(localStorage.getItem("usernames")) || [];
  isUsernameInLocalStorage = storedUsernames.includes(enteredUsername);

  if (isUsernameInLocalStorage) {
    console.log("Username found in Local Storage:", enteredUsername);
    openPasswordResetModal(enteredUsername);
  } else {
    console.log("Username not found in Local Storage:", enteredUsername);

    // If the username is not found, you can add it to Local Storage
    storedUsernames.push(enteredUsername);
    localStorage.setItem("usernames", JSON.stringify(storedUsernames));

    console.log("Username added to Local Storage:", enteredUsername);
  }
}

// Function to open the password reset modal from login
function openResetPasswordModalFromLogin() {
  openResetPasswordModal(true);
}

// Function to close the password reset modal
function closeResetPasswordModal() {
  const resetPasswordModal = document.getElementById("resetPasswordModal");
  resetPasswordModal.style.display = "none";
}

// Function to open the password reset modal
function openPasswordResetModal(username) {
  const passwordResetModal = document.getElementById("passwordResetModal");

  if (passwordResetModal) {
    passwordResetModal.style.display = "block";

    //set the username in the modal
    const usernameField = document.getElementById("resetUsernameDisplay");

    if (usernameField) {
      usernameField.value = username;
      usernameField.setAttribute("readonly", true);

      //add event listener to handle input change in second modal
      const newPasswordInput = document.getElementById("passwordNew");
      if (newPasswordInput) {
        newPasswordInput.addEventListener(
          "input",
          handleNewPasswordInputChange
        );
      }
    } else {
      console.error("Element with id 'resetUsernameModal' not found.");
    }
  } else {
    console.error("Element with id 'passwordResetModal' not found.");
  }
}
// Function to close the password reset modal
function closePasswordResetModal() {
  const passwordResetModal = document.getElementById("passwordResetModal");
  passwordResetModal.style.display = "none";
}

function handleNewPasswordInputChange() {
  const newPasswordInput = document.getElementById("new");
}

// Function to submit the password reset form
function submitPasswordResetForm() {
  const newPasswordInput = document.getElementById("passwordNew");
  const retypeNewPasswordInput = document.getElementById("retypeNewPassword");
  const resetUsernameDisplay = document.getElementById("resetUsernameDisplay");

  // Validate Password
  const passwordRegex =
    /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^])(?=.*\d)[a-zA-Z\d!@#$%^]{8,}$/;
  const newPassword = newPasswordInput.value;
  const retypeNewPassword = retypeNewPasswordInput.value;

  if (!passwordRegex.test(newPassword)) {
    showErrorMessage("Password must meet the specified criteria.");
    return;
  }

  // Validate Special Characters
  const specialCharactersRegex = /[!@#$%^]/;
  if (!specialCharactersRegex.test(newPassword)) {
    showErrorMessage("Password must contain at least one of !@#$%^");
    return;
  }

  // Check if New Password and Retype Password Match
  if (newPassword !== retypeNewPassword) {
    showErrorMessage("Passwords do not match.");
    return;
  }

  // Update the password in local storage
  const userList = JSON.parse(localStorage.getItem("userList")) || [];
  const userIndex = userList.findIndex(
    (user) => user.userName === resetUsernameDisplay.value
  );

  if (userIndex !== -1) {
    userList[userIndex].pwd = newPassword;
    localStorage.setItem("userList", JSON.stringify(userList));
  }

  // Close the Password Reset Modal
  closePasswordResetModal();

  // Show Bootstrap Success Alert for Password Reset Success
  showSuccessMessage("User Password Reset Success");
}

function showErrorMessage(message) {
  showAlert(message, "alert-danger");
}

function showSuccessMessage(message) {
  showAlert(message, "alert-success");
}

function showAlert(message, alertType) {
  const loginForm = document.getElementById("loginForm");
  loginForm.insertAdjacentHTML(
    "afterbegin",
    `
    <div class="alert ${alertType} alert-dismissible fade show" role="alert">
      ${message}
      <button type="button" class="close" data-dismiss="alert" aria-label="Close">
        <span aria-hidden="true">&times;</span>
      </button>
    </div>
  `
  );

  // Set timeout to remove the alert after 5 seconds
  setTimeout(() => {
    document.querySelector(`.${alertType}`).remove();
  }, 5000);
}

