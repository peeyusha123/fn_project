function pizzaPricing(size) {
    // Define the base prices for each pizza size
    const basePrices = {
        small: 8.00,
        medium: 10.00,
        large: 12.00
    };

    // Define the cost of each topping
    const toppingCost = 1.50;

    // Return a function that takes an array of toppings
    return function(toppings) {
        // Calculate the total toppings cost
        const totalToppingCost = toppings.length * toppingCost;

        // Return a function that takes the quantity of pizzas
        return function(quantity) {
            // Calculate the base price of the pizza based on its size
            const basePrice = basePrices[size.toLowerCase()];

            // Calculate the total price
            const totalPrice = quantity * (basePrice + totalToppingCost);

            // Return the total price
            return totalPrice;
        };
    };
}

// Example usage:
const pizzaOrder = pizzaPricing("large")(["bacon", "cheese"])(2);
console.log(pizzaOrder); // Output: 29.00






mergeInternationalBorderInfo: function(){

			console.log("mergeInternationalBorderInfo", this.dom.internationalBorderInfoPayload);
			//this.calculateAndSetTimeoutDates();
			this.constructor.ajax.fireApi(this.dom.internationalBorderInfoPayload, "project", "mergeInternationalBorderInfo", (response)=> {
				console.log("mergeRes", response);
			})
		},
		internationaFeildsPayload:function(companyContainer){
				const addDays= (date, days) => {
        var result = new Date(date);
        result.setDate(result.getDate() + days);
        var day = String(result.getDate()).padStart(2, '0');
        var month = String(result.getMonth() + 1).padStart(2, '0'); // Months are zero-based
            var year = result.getFullYear();

  return month + '/' + day + '/' + year;
}
			var id = $(companyContainer).attr('id');
			var vzRegService = companyContainer.attr("data-vz-reg-service");
			this.dom.internationalBorderInfoPayload =  this.dom.internationalBorderInfoPayload.filter(ob => ob.externalCompanyNameId != id);

			var payload = {};
			payload.vzRegService = vzRegService;
			payload.externalCompanyNameId = id;
			payload.siteProjectsId = rfdsModule.dom.projectId;
			var internationalFeilds = companyContainer.find(".international-feilds");
			$.each(internationalFeilds, (i,intfeild)=>{
				var id = $(intfeild).attr('id');
				var value = $(intfeild).val();
				payload[id] = value;
				if (payload.hasOwnProperty('agrementSentDate')){
					if(payload.vzRegService == "AWS"){
						if(payload && payload.agrementSentDate){
							
							payload.agreementTimeout= payload.agrementSentDate!=""?addDays(payload.agrementSentDate, 60):"";
						}
					}else{
						if(payload && payload.agrementSentDate){
							payload.agreementTimeout= payload.agrementSentDate!=""?addDays(payload.agrementSentDate, 30):"";
							
						}
					}
				}else{
					
						if(payload && payload.hasOwnProperty('notificationSentDate')){
							payload.notificationTimeoutDate= payload.notificationTimeoutDate!=""?addDays(payload.notificationTimeoutDate, 30):"";
							 
						}
				}
			});
			this.dom.internationalBorderInfoPayload.push(payload);
		},





















var day = String(result.getDate()).padStart(2, '0');
  var month = String(result.getMonth() + 1).padStart(2, '0'); // Months are zero-based
  var year = result.getFullYear();

  return day + '/' + month + '/' + year;
}




calculateAndSetTimeoutDates: function (responseData, callsignId) {
    $.each(responseData, (i, data) => {
        if (data && data.notificationSentDate) {
            // Calculate Notification Timeout Date (+30 days from Notification Sent Date)
            data.notificationTimeoutDate = addDays(new Date(data.notificationSentDate), 30);
        }

        if (data && data.agreementSentDate) {
            // Check the callsign for determining the correct timeout days
            var agreementTimeoutDays = (callsignId === "band2100m") ? 60 : 30;

            // Calculate Agreement Timeout Date (+30 or +60 days based on band type)
            data.agreementTimeoutDate = addDays(new Date(data.agreementSentDate), agreementTimeoutDays);
        }
    });

    // Function to calculate date by adding days
    function addDays(date, days) {
        var result = new Date(date);
        result.setDate(result.getDate() + days);
        return result;
    }
}






getFreqBandTitle: function(callSignId) {
    var title;
    var freqBand;
    if (callSignId === "band700m") {
        title = "700 Mhz";
        freqBand = "700Mhz";
    } else if (callSignId === "band850m") {
        title = "850 Mhz";
        freqBand = "850Mhz";
    } else if (callSignId === "band1900m") {
        title = "1900 Mhz";
        freqBand = "1900Mhz";
    } else if (callSignId === "band2100m") {
        title = "2100 Mhz";
        freqBand = "2100Mhz";
    } else if (callSignId === "cband") {
        title = "C-BAND";
        freqBand = "cband";
    }
    return {
        title: title,
        freqBand: freqBand
    }
},

loadCallSignDetails: function(response, callSignId) {
    var details = this.getFreqBandTitle(callSignId);
    var title = details.title;
    var freqBand = details.freqBand;

    if (response && response.length !== 0) {
        var templateHeader = this.dom.body.find(".international-table-header-template").html();

        var doc_check;
        var optionSelectedYes = $(this.dom.body).find("#signalextend-yes");
        var optionSelectedNo = $(this.dom.body).find("#signalextend-no");

        doc_check = optionSelectedYes.prop("checked") ? "AGREEMENT" : optionSelectedNo.prop("checked") ? "NOTIFICATION" : false;

        var tableHeader = templateHeader.replace(/@BANDWIDTH/g, title)
            .replace(/@ID/g, callSignId)
            .replace(/@VZREGSERVICE/g, response[0].vzRegService)
            .replace(/@DOC_CHECK/g, doc_check ? doc_check : "")
            .replace(/@DOC_CATEGORY/g, title.replace(" Mhz", ""))
            .replace(/@COUNTRY/g, response[0].country);

        this.dom.body.find(".international-callsign-tables").append(tableHeader);

        let tableId = this.dom.body.find("#" + callSignId + "-international-colnames");
        let columns = this.getCallsignsColumns(false);

        createKendoGrid(tableId, columns, response);

        this.appendFccRadioValuesByCallSignId(callSignId, response[0]);

        // Calculate and set timeout dates
        this.calculateAndSetTimeoutDates(response[0], callSignId);
    } else {
        console.info("No Callsigns");
    }
},

appendFccRadioValuesByCallSignId: function(callSignId, responseData) {
    if (callSignId === "band700m") {
        this.appendFccRadioValues(".band700m", responseData.intlBorderExtendsFor700Mhz === 'Yes', responseData.intlBorderExtendsFor700Mhz !== 'Yes');
    } else if (callSignId === "band850m") {
        this.appendFccRadioValues(".band850m", responseData.intlBorderExtendsForCellular === 'Yes', responseData.intlBorderExtendsForCellular !== 'Yes');
    } else if (callSignId === "band1900m") {
        this.appendFccRadioValues(".band1900m", responseData.intlBorderExtendsForPCS === 'Yes', responseData.intlBorderExtendsForPCS !== 'Yes');
    } else if (callSignId === "band2100m") {
        this.appendFccRadioValues(".band2100m", responseData.intlBorderExtendsForAWS === 'Yes', responseData.intlBorderExtendsForAWS !== 'Yes');
    } else if (callSignId === "cband") {
        this.appendFccRadioValues(".cband", responseData.intlBorderExtendsForCBand === 'Yes', responseData.intlBorderExtendsForCBand !== 'Yes');
    }
},

calculateAndSetTimeoutDates: function(responseData, callSignId) {
    var notificationSentDate = new Date(responseData.notificationSentDate);
    var agreementSentDate = new Date(responseData.agreementSentDate);

    // Function to calculate date by adding days
    function addDays(date, days) {
        var result = new Date(date);
        result.setDate(result.getDate() + days);
        return result;
    }

    // Set notification timeout date
    if (notificationSentDate) {
        var notificationTimeoutDate = addDays(notificationSentDate, 30);
        $("#" + callSignId + "-form").find("#notificationTimeoutDate").val(notificationTimeoutDate.toISOString().split('T')[0]);
    }

    // Set agreement timeout date
    if (agreementSentDate) {
        var agreementTimeoutDate;
        switch (callSignId) {
            case "band700m":
            case "band850m":
            case "band1900m":
            case "cband":
                agreementTimeoutDate = addDays(agreementSentDate, 30);
                break;
            case "band2100m":
                agreementTimeoutDate = addDays(agreementSentDate, 60);
                break;
            default:
                agreementTimeoutDate = agreementSentDate; // Default if no match
        }
        $("#" + callSignId + "-form").find("#agreementTimeoutDate").val(agreementTimeoutDate.toISOString().split('T')[0]);
    }
}
